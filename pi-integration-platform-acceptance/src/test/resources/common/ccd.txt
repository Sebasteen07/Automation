<ClinicalDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:hl7-org:v3" xsi:schemaLocation="urn:hl7-org:v3 CDA.xsd">
  <realmCode code="US" />
  <typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040" />
  <templateId root="2.16.840.1.113883.10.20.22.1.2" />
  <templateId root="2.16.840.1.113883.10.20.22.1.1" />
  <id root="1.2.840.113619.21.1.3164884235793924544.5.1" extension="1686153106076570" />
  <code code="34133-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Summarization of episode note" />
  <title>Jeffrey Feldman M.D. Clinical Summary</title>
  <effectiveTime value="20130606155256-0400" />
  <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25" />
  <languageCode code="en-US" />
  <recordTarget>
    <patientRole>
      <id root="1.2.840.113619.21.1.3164884235793924544.2.1.1.1" extension="1346774209400600" />
      <id root="1.2.840.113619.21.1.3164884235793924544.2.1.1.2" extension="30663" />
      <addr use="HP">
        <streetAddressLine>86 hwa Street</streetAddressLine>
        <city>coral springs</city>
        <state>NJ</state>
        <postalCode>07186</postalCode>
        <country>US</country>
      </addr>
      <telecom value="tel:+1-902-600-1371" use="HP" />
      <patient>
        <name>
          <given>hwa</given>
          <family>rumph</family>
        </name>
        <administrativeGenderCode code="M" codeSystem="2.16.840.1.113883.5.1" displayName="Male" />
        <birthTime value="19360423" />
        <maritalStatusCode code="M" codeSystem="2.16.840.1.113883.5.2" />
        <languageCommunication>
          <languageCode code="UNK" />
          <preferenceInd value="false" />
        </languageCommunication>
      </patient>
      <providerOrganization>
        <id root="2.16.840.1.113883.19.1" extension="TEST" />
        <id root="2.16.840.1.113883.19.2" extension="44" />
        <id root="2.16.840.1.113883.19.3" extension="0" />
        <name>Jeffrey Feldman M.D.</name>
        <telecom value="tel:+1-330-130-0001" use="WP" />
        <addr use="WP">
          <streetAddressLine>0 Jeffrey Feldman Street</streetAddressLine>
          <city>richmond</city>
          <state>NJ</state>
          <postalCode>07123</postalCode>
          <country>US</country>
        </addr>
      </providerOrganization>
    </patientRole>
  </recordTarget>
  <author>
    <time value="20130606155256-0400" />
    <assignedAuthor>
      <id root="1.2.840.113619.21.1" extension="3164884235793924544" />
      <addr use="WP">
        <streetAddressLine>0 Jeffrey Feldman Street</streetAddressLine>
        <city>richmond</city>
        <state>NJ</state>
        <postalCode>07123</postalCode>
        <country>US</country>
      </addr>
      <telecom value="tel:+1-330-130-0001" use="WP" />
      <assignedAuthoringDevice>
        <manufacturerModelName>Centricity Practice Solutions</manufacturerModelName>
        <softwareName>CDA Document Generator</softwareName>
      </assignedAuthoringDevice>
      <representedOrganization>
        <id root="2.16.840.1.113883.19.1" extension="TEST" />
        <id root="2.16.840.1.113883.19.2" extension="44" />
        <id root="2.16.840.1.113883.19.3" extension="0" />
        <name>Jeffrey Feldman M.D.</name>
        <telecom value="tel:+1-330-130-0001" use="WP" />
        <addr use="WP">
          <streetAddressLine>0 Jeffrey Feldman Street</streetAddressLine>
          <city>richmond</city>
          <state>NJ</state>
          <postalCode>07123</postalCode>
          <country>US</country>
        </addr>
      </representedOrganization>
    </assignedAuthor>
  </author>
  <custodian>
    <assignedCustodian>
      <representedCustodianOrganization>
        <id root="2.16.840.1.113883.19.1" extension="TEST" />
        <name>Jeffrey Feldman M.D.</name>
        <telecom value="tel:+1-330-130-0001" use="WP" />
        <addr use="WP">
          <streetAddressLine>0 Jeffrey Feldman Street</streetAddressLine>
          <city>richmond</city>
          <state>NJ</state>
          <postalCode>07123</postalCode>
          <country>US</country>
        </addr>
      </representedCustodianOrganization>
    </assignedCustodian>
  </custodian>
  <legalAuthenticator>
    <time value="20130606155256-0400" />
    <signatureCode code="S" />
    <assignedEntity classCode="ASSIGNED">
      <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
      <id root="2.16.840.1.113883.4.6" extension="1124081336" />
      <addr use="WP">
        <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
        <city>richmond</city>
        <state>NJ</state>
        <postalCode>07123</postalCode>
        <country>US</country>
      </addr>
      <telecom value="tel:+1-330-130-0001" use="WP" />
      <assignedPerson>
        <name>
          <given>Timothy</given>
          <given>F</given>
          <family>SEXton MD</family>
        </name>
      </assignedPerson>
      <representedOrganization>
        <id root="2.16.840.1.113883.19.1" extension="TEST" />
        <id root="2.16.840.1.113883.19.2" extension="44" />
        <id root="2.16.840.1.113883.19.3" extension="1346768794100600" />
        <name>Union Plainfield Medical Associates PA</name>
        <telecom value="tel:+1-330-130-0001" use="WP" />
        <addr use="WP">
          <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
          <city>richmond</city>
          <state>NJ</state>
          <postalCode>07123</postalCode>
          <country>US</country>
        </addr>
      </representedOrganization>
    </assignedEntity>
  </legalAuthenticator>
  <documentationOf>
    <serviceEvent classCode="PCPR">
      <effectiveTime>
        <low value="20000503" />
        <high value="20130606" />
      </effectiveTime>
      <performer typeCode="PRF">
        <assignedEntity classCode="ASSIGNED">
          <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
          <id root="2.16.840.1.113883.4.6" extension="1124081336" />
          <addr use="WP">
            <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
            <city>richmond</city>
            <state>NJ</state>
            <postalCode>07123</postalCode>
            <country>US</country>
          </addr>
          <telecom value="tel:+1-330-130-0001" use="WP" />
          <assignedPerson>
            <name>
              <given>Timothy</given>
              <given>F</given>
              <family>SEXton MD</family>
            </name>
          </assignedPerson>
        </assignedEntity>
      </performer>
    </serviceEvent>
  </documentationOf>
  <component>
    <structuredBody>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.21.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.21" />
          <code code="42348-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Advance Directives" />
          <title>Advance Directives</title>
          <text>
            <content ID="Directive0">No Advance Directives Available</content>
          </text>
          <entry nullFlavor="NI">
            <observation nullFlavor="NA" classCode="OBS" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.48" />
              <id root="530fa1a3-dbb0-4bb8-8d62-2e78b76db20b" />
              <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <text>
                <reference value="#Directive0" />
              </text>
              <statusCode nullFlavor="UNK" />
              <effectiveTime>
                <low nullFlavor="UNK" />
                <high nullFlavor="UNK" />
              </effectiveTime>
              <participant nullFlavor="UNK" typeCode="CST">
                <participantRole nullFlavor="UNK" classCode="AGNT">
                  <playingEntity nullFlavor="UNK">
                    <name nullFlavor="UNK" />
                  </playingEntity>
                </participantRole>
              </participant>
            </observation>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.6.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.6" />
          <code code="48765-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Allergies, adverse reactions, alerts" />
          <title>Allergies, Adverse Reactions, Alerts</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Allergy Name</th>
                  <th>Reaction Description</th>
                  <th>Start Date</th>
                  <th>Severity</th>
                  <th>Status</th>
                  <th>Provider</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="Allergy1">NKDA</td>
                  <td ID="Reaction1" />
                  <td>2002/09/17</td>
                  <td ID="Severity1">Critical</td>
                  <td ID="aStatus1">Active</td>
                  <td>Timothy F SEXton MD</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.30" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.1" extension="1347881749150600" />
              <id root="d848b8a0-4393-4f66-8409-3daf50b1804f" />
              <code code="48765-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Allergies, adverse reactions, alerts" />
              <text>
                <reference value="#Allergy1" />
              </text>
              <statusCode code="completed" />
              <effectiveTime>
                <low value="20020917" />
                <high nullFlavor="UNK" />
              </effectiveTime>
              <author>
                <time value="20020917124029-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.7" />
                  <id root="1.2.840.113619.21.1.3164884235793924544" extension="1347881749150600" />
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4" codeSystemName="HL7ActCode" />
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high nullFlavor="UNK" />
                  </effectiveTime>
                  <value xsi:type="CD" code="416098002" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="drug allergy" />
                  <author>
                    <time value="20101210222204" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <participant typeCode="CSM">
                    <participantRole classCode="MANU">
                      <playingEntity classCode="MMAT">
                        <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.88">
                          <originalText>
                            <reference value="#Allergy1" />
                          </originalText>
                        </code>
                      </playingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="MFST" inversionInd="true">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.9" />
                      <id root="f0cbba26-cd98-4af2-be4d-57c0931929b3" />
                      <code nullFlavor="UNK" />
                      <text>
                        <reference value="#Reaction1" />
                      </text>
                      <statusCode code="completed" />
                      <effectiveTime>
                        <low value="20020917" />
                        <high nullFlavor="UNK" />
                      </effectiveTime>
                      <value xsi:type="CD" code="416098002" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="drug allergy" />
                      <entryRelationship typeCode="SUBJ" inversionInd="true">
                        <observation classCode="OBS" moodCode="EVN">
                          <templateId root="2.16.840.1.113883.10.20.22.4.8" />
                          <code code="SEV" codeSystem="2.16.840.1.113883.5.4" codeSystemName="ActCode" displayName="Severity" />
                          <text>
                            <reference value="#Severity1" />
                          </text>
                          <statusCode code="completed" />
                          <value xsi:type="CD" code="399166001" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Critical" />
                          <interpretationCode codeSystem="2.16.840.1.113883.5.83" codeSystemName="ObservationInterpretation" />
                        </observation>
                      </entryRelationship>
                      <entryRelationship typeCode="REFR" inversionInd="false">
                        <observation classCode="OBS" moodCode="EVN">
                          <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="AlertStatusCode" displayName="Status" />
                          <text>
                            <reference value="#aStatus1" />
                          </text>
                          <statusCode code="completed" />
                          <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.3.88.12.80.20" displayName="Active" />
                        </observation>
                      </entryRelationship>
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.22.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.22" />
          <code code="46240-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Encounters" />
          <title>Encounters</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Code</th>
                  <th>Encounter</th>
                  <th>Date</th>
                  <th>Provider</th>
                  <th>Facility</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter1">Ofc Vst, Est Level V</td>
                  <td>2011/01/06</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter2">Ofc Vst, Est Level V</td>
                  <td>2010/11/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter3">Ofc Vst, Est Level V</td>
                  <td>2010/09/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter4">Ofc Vst, Est Level V</td>
                  <td>2010/08/03</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter5">Ofc Vst, Est Level V</td>
                  <td>2010/06/28</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter6">Ofc Vst, Est Level V</td>
                  <td>2010/05/06</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter7">Ofc Vst, Est Level V</td>
                  <td>2010/03/18</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter8">Ofc Vst, Est Level V</td>
                  <td>2010/02/12</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter9">Ofc Vst, Est Level V</td>
                  <td>2010/01/07</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter10">Ofc Vst, Est Level V</td>
                  <td>2009/11/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter11">Ofc Vst, Est Level V</td>
                  <td>2009/09/28</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter12">Ofc Vst, Est Level V</td>
                  <td>2009/09/08</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter13">Ofc Vst, Est Level V</td>
                  <td>2009/07/21</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter14">Ofc Vst, Est Level V</td>
                  <td>2009/06/11</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter15">Ofc Vst, Est Level V</td>
                  <td>2009/04/28</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter16">Ofc Vst, Est Level V</td>
                  <td>2009/02/20</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter17">Ofc Vst, Est Level V</td>
                  <td>2009/01/09</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter18">Ofc Vst, Est Level V</td>
                  <td>2008/11/21</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter19">Ofc Vst, Est Level V</td>
                  <td>2008/10/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter20">Ofc Vst, Est Level V</td>
                  <td>2008/08/21</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter21">Ofc Vst, Est Level V</td>
                  <td>2008/07/09</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter22">Ofc Vst, Est Level V</td>
                  <td>2008/05/01</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter23">Ofc Vst, Est Level V</td>
                  <td>2008/02/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter24">Ofc Vst, Est Level V</td>
                  <td>2008/01/15</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter25">Ofc Vst, Est Level V</td>
                  <td>2007/12/11</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter26">Ofc Vst, Est Level V</td>
                  <td>2007/10/03</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter27">Ofc Vst, Est Level V</td>
                  <td>2007/08/31</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter28">Ofc Vst, Est Level V</td>
                  <td>2007/07/27</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter29">Ofc Vst, Est Level V</td>
                  <td>2007/06/08</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter30">Ofc Vst, Est Level V</td>
                  <td>2007/04/20</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter31">Ofc Vst, Est Level V</td>
                  <td>2007/03/16</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter32">Ofc Vst, Est Level V</td>
                  <td>2007/01/11</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter33">Ofc Vst, Est Level V</td>
                  <td>2006/11/22</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter34">Ofc Vst, Est Level V</td>
                  <td>2006/10/02</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter35">Ofc Vst, Est Level V</td>
                  <td>2006/08/31</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99205</td>
                  <td ID="Encounter36">Ofc Vst, New Level V</td>
                  <td>2006/07/13</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter37">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2006/06/01</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter38">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2006/04/27</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter39">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2006/03/09</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter40">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2006/01/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter41">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/12/22</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter42">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/11/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter43">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/10/14</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter44">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/07/29</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter45">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/05/24</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter46">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/04/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter47">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2005/04/06</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter48">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/12/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99213</td>
                  <td ID="Encounter49">Office/outpatient visit, est, exp prob(99213)</td>
                  <td>2004/10/13</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter50">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/09/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter51">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/08/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter52">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/07/29</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter53">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2004/07/15</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99215</td>
                  <td ID="Encounter54">Office/outpatient visit,est,high complex(99215)</td>
                  <td>2004/06/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter55">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/06/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99213</td>
                  <td ID="Encounter56">Office/outpatient visit, est, exp prob(99213)</td>
                  <td>2004/05/27</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter57">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/05/13</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99213</td>
                  <td ID="Encounter58">Office/outpatient visit, est, exp prob(99213)</td>
                  <td>2004/04/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter59">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/03/19</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter60">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/02/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter61">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/02/05</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter62">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/01/21</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter63">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2004/01/05</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter64">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/11/11</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter65">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/10/14</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter66">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/09/16</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter67">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/08/19</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter68">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/07/22</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99213</td>
                  <td ID="Encounter69">Office/outpatient visit, est, exp prob(99213)</td>
                  <td>2003/06/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter70">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/05/20</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter71">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/04/29</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter72">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/04/22</td>
                  <td>divina dupas</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter73">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/04/16</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
                <tr>
                  <td>CPT-99214</td>
                  <td ID="Encounter74">Office/outpatient visit, est, detailed(99214)</td>
                  <td>2003/03/31</td>
                  <td>Timothy F SEXton MD</td>
                  <td>Union Plainfield Medical Associates PA</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1609932390056190" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter1" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20110106" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20110106113506" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1605615727256180" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter2" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20101117" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101117122402" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1600864378106200" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter3" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100923" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1596455485556130" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter4" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100803" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1593340794006200" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter5" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100628" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1588768739256210" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter6" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100506" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1584536781256190" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter7" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100318" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1581594415156180" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter8" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100212" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1578485426506170" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter9" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20100107" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1573470375056190" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter10" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20091110" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1569761841706190" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter11" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090928" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1568025901000630" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter12" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090908" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1563797928400560" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter13" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090721" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1560342529000590" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter14" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090611" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1556541206250610" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter15" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090428" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1550747446200640" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter16" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090220" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1547118429050650" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter17" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20090109" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1542886672450640" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter18" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20081121" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1539262439050560" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter19" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20081010" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1534942498050610" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter20" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20080821" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1531225649250590" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter21" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20080709" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1525262145050620" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter22" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20080501" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1519645257450600" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter23" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20080226" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1516020438250630" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter24" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20080115" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1512998779650600" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter25" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20071211" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1507027588050610" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter26" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20071003" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1504180029150650" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter27" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070831" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1501154681400620" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter28" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070727" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1496920451050620" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter29" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070608" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1492685971250650" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter30" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070420" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1489667143150620" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter31" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070316" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1484133298200650" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter32" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20070111" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1479823997250620" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter33" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20061122" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1475405175050800" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter34" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20061002" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1472641697000700" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter35" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060831" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1468409756200800" />
              <code code="99205" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter36" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060713" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1464788002050690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter37" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060601" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1461767179250700" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter38" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060427" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1457525925250690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter39" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060309" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1453898510650680" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter40" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20060126" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1450869397050690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter41" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20051222" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1448369010050680" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter42" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20051123" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1444907465200670" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter43" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20051014" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1438255965050680" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter44" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20050729" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1432549946300770" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter45" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20050524" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1430132312200690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter46" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20050426" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1428401079200680" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter47" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20050406" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1418298519050700" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter48" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20041210" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1413301385050690" />
              <code code="99213" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter49" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20041013" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1411567165050690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter50" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040923" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1409140936050670" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter51" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040826" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1406721756250670" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter52" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040729" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1405506171050690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter53" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040715" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1403617299350690" />
              <code code="99215" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter54" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040623" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1402499515050690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter55" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040610" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1401284500050690" />
              <code code="99213" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter56" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040527" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1400074945550680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter57" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040513" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1398345671550690" />
              <code code="99213" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter58" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040423" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1395322080450680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter59" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040319" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1393414332250690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter60" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040226" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1391605637450690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter61" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040205" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1390316354150680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter62" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040121" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1388931119850680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter63" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20040105" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1384180092250700" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter64" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20031111" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1381768165150700" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter65" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20031014" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1379342040900690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter66" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030916" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1376922445300690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter67" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030819" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1374503129300690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter68" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030722" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1371468507450690" />
              <code code="99213" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter69" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030617" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1369050020700680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter70" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030520" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1367236654600670" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter71" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030429" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1366650390200690" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter72" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030422" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1366120114150700" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter73" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030416" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.10" extension="1364737442450680" />
              <code code="99214" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Encounter74" />
                </originalText>
              </code>
              <statusCode code="completed" />
              <effectiveTime value="20030331" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedEntity>
              </performer>
              <author>
                <time value="20101021142043" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <id root="1.2.840.113619.21.1.3164884235793924544.1" extension="1346768794100600" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <playingEntity classCode="PLC">
                    <name>
                      <family>Union Plainfield Medical Associates PA</family>
                    </name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.15" />
          <code code="10157-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Family History" />
          <title>Family History</title>
          <text>No Known Family History</text>
          <entry typeCode="DRIV">
            <organizer nullFlavor="NI" classCode="CLUSTER" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.45" />
              <code code="327715779" />
              <statusCode code="completed" />
              <subject>
                <relatedSubject classCode="PRS">
                  <addr />
                  <telecom nullFlavor="UNK" />
                  <subject>
                    <name />
                    <administrativeGenderCode nullFlavor="UNK" />
                    <birthTime nullFlavor="UNK" />
                  </subject>
                </relatedSubject>
              </subject>
              <component>
                <observation nullFlavor="NI" classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.46" />
                  <code codeSystem="2.16.840.1.113883.6.96" />
                  <statusCode code="completed" />
                  <effectiveTime nullFlavor="UNK" />
                  <entryRelationship typeCode="SUBJ" inversionInd="true">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.1.38" />
                      <code codeSystem="2.16.840.1.113883.6.96" />
                      <statusCode code="completed" />
                    </observation>
                  </entryRelationship>
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.14" />
          <code code="47420-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Functional status assessment" />
          <title>Functional Status Assessment</title>
          <text>Section Not Yet Implemented.</text>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.2.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.2" />
          <code code="11369-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Immunizations" />
          <title>Immunizations</title>
          <text>
            <content ID="Immunization0">No Known Immunizations</content>
          </text>
          <entry>
            <substanceAdministration nullFlavor="NI" classCode="SBADM" moodCode="EVN" negationInd="false">
              <templateId root="2.16.840.1.113883.10.20.22.4.52" />
              <id nullFlavor="NA" />
              <text>
                <reference value="#Immunization0" />
              </text>
              <statusCode nullFlavor="NA" />
              <effectiveTime xsi:type="IVL_TS" nullFlavor="NA" />
              <routeCode nullFlavor="NA" />
              <approachSiteCode nullFlavor="NA" />
              <administrationUnitCode nullFlavor="NA" />
              <consumable>
                <manufacturedProduct nullFlavor="NI" classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.54" />
                  <manufacturedMaterial>
                    <code nullFlavor="NA" />
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
            </substanceAdministration>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.1.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.1" />
          <code code="10160-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="History of medication use" />
          <title>Medications</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Medication</th>
                  <th>Instructions</th>
                  <th>Start Date</th>
                  <th>Stop Date</th>
                  <th>Generic Name</th>
                  <th>NDC</th>
                  <th>Status</th>
                  <th>Provider</th>
                  <th>Patient Instruction</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="Medication1">ZEMPLAR 1 MCG CAPS</td>
                  <td ID="sig1">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName1">PARICALCITOL</td>
                  <td>00074431730</td>
                  <td ID="mStatus1">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction1" />
                </tr>
                <tr>
                  <td ID="Medication2">VITAMIN D 1000 UNIT TABS</td>
                  <td ID="sig2">3 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName2">CHOLECALCIFEROL</td>
                  <td>43292056286</td>
                  <td ID="mStatus2">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction2" />
                </tr>
                <tr>
                  <td ID="Medication3">VYTORIN 10-20 MG TABS</td>
                  <td ID="sig3">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName3">EZETIMIBE-SIMVASTATIN</td>
                  <td>54868518701</td>
                  <td ID="mStatus3">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction3" />
                </tr>
                <tr>
                  <td ID="Medication4">ACTOS 30 MG TAB</td>
                  <td ID="sig4">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName4">PIOGLITAZONE HCL</td>
                  <td>68258303403</td>
                  <td ID="mStatus4">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction4" />
                </tr>
                <tr>
                  <td ID="Medication5">DIOVAN 160 MG TAB</td>
                  <td ID="sig5">1 at 6pm--renal protection in a diabetc</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName5">VALSARTAN</td>
                  <td>54569536200</td>
                  <td ID="mStatus5">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction5" />
                </tr>
                <tr>
                  <td ID="Medication6">PROGRAF 1 MG CAP</td>
                  <td ID="sig6">2 in AM 1 in PM</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName6">TACROLIMUS</td>
                  <td>67544120580</td>
                  <td ID="mStatus6">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction6" />
                </tr>
                <tr>
                  <td ID="Medication7">CELLCEPT 250 MG CAPS</td>
                  <td ID="sig7">4 twice a day</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName7">MYCOPHENOLATE MOFETIL</td>
                  <td>00004025901</td>
                  <td ID="mStatus7">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction7" />
                </tr>
                <tr>
                  <td ID="Medication8">PREDNISONE 5 MG TAB</td>
                  <td ID="sig8">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName8">PREDNISONE</td>
                  <td>63874037350</td>
                  <td ID="mStatus8">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction8" />
                </tr>
                <tr>
                  <td ID="Medication9">BACTRIM DS 800-160 MG TAB</td>
                  <td ID="sig9">1 every other day</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName9">TRIMETHOPRIM-SULFAMETHOXAZOLE</td>
                  <td>54868033700</td>
                  <td ID="mStatus9">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction9" />
                </tr>
                <tr>
                  <td ID="Medication10">TAMSULOSIN HCL 0.4 MG CAPS</td>
                  <td ID="sig10">one per day</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName10">TAMSULOSIN HCL</td>
                  <td>00093733801</td>
                  <td ID="mStatus10">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction10" />
                </tr>
                <tr>
                  <td ID="Medication11">PROTONIX 40 MG EC TAB</td>
                  <td ID="sig11">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName11">PANTOPRAZOLE SODIUM</td>
                  <td>00008084199</td>
                  <td ID="mStatus11">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction11" />
                </tr>
                <tr>
                  <td ID="Medication12">MULTIVITAMINS TAB</td>
                  <td ID="sig12">1 daily</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName12">MULTIPLE VITAMIN</td>
                  <td>00536404610</td>
                  <td ID="mStatus12">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction12" />
                </tr>
                <tr>
                  <td ID="Medication13">OSCAL 500/200 D-3 500-200 MG-IU TAB</td>
                  <td ID="sig13">2 twice a day</td>
                  <td>2011/01/06</td>
                  <td />
                  <td ID="GenericName13">CALCIUM-VITAMIN D</td>
                  <td>10267155107</td>
                  <td ID="mStatus13">Active</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="patient-instruction13" />
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930919006220" />
              <text>
                <reference value="#sig1" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="606854" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="ZEMPLAR 1 MCG CAPS">
                      <originalText>
                        <reference value="#GenericName1" />
                      </originalText>
                      <translation code="606854" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="ZEMPLAR 1 MCG CAPS" />
                    </code>
                    <name>ZEMPLAR 1 MCG CAPS</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930949006220" />
              <text>
                <reference value="#sig2" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="247775" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="VITAMIN D 1000 UNIT TABS">
                      <originalText>
                        <reference value="#GenericName2" />
                      </originalText>
                      <translation code="247775" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="VITAMIN D 1000 UNIT TABS" />
                    </code>
                    <name>VITAMIN D 1000 UNIT TABS</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930951356220" />
              <text>
                <reference value="#sig3" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="543352" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="VYTORIN 10-20 MG TABS">
                      <originalText>
                        <reference value="#GenericName3" />
                      </originalText>
                      <translation code="543352" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="VYTORIN 10-20 MG TABS" />
                    </code>
                    <name>VYTORIN 10-20 MG TABS</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930952556220" />
              <text>
                <reference value="#sig4" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="261267" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="ACTOS 30 MG TABS">
                      <originalText>
                        <reference value="#GenericName4" />
                      </originalText>
                      <translation code="261267" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="ACTOS 30 MG TAB" />
                    </code>
                    <name>ACTOS 30 MG TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus4" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930979006220" />
              <text>
                <reference value="#sig5" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="351762" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="DIOVAN 160 MG TABS">
                      <originalText>
                        <reference value="#GenericName5" />
                      </originalText>
                      <translation code="351762" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="DIOVAN 160 MG TAB" />
                    </code>
                    <name>DIOVAN 160 MG TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus5" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930980206220" />
              <text>
                <reference value="#sig6" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="108513" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="PROGRAF 1 MG CAPS">
                      <originalText>
                        <reference value="#GenericName6" />
                      </originalText>
                      <translation code="108513" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="PROGRAF 1 MG CAP" />
                    </code>
                    <name>PROGRAF 1 MG CAP</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus6" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609930981406220" />
              <text>
                <reference value="#sig7" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="616447" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="CELLCEPT 250 MG CAPS">
                      <originalText>
                        <reference value="#GenericName7" />
                      </originalText>
                      <translation code="616447" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="CELLCEPT 250 MG CAPS" />
                    </code>
                    <name>CELLCEPT 250 MG CAPS</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus7" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931128006220" />
              <text>
                <reference value="#sig8" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="312617" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="PREDNISONE 5 MG TABS">
                      <originalText>
                        <reference value="#GenericName8" />
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus8" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931158006220" />
              <text>
                <reference value="#sig9" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="849580" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="BACTRIM DS 800-160 MG TABS">
                      <originalText>
                        <reference value="#GenericName9" />
                      </originalText>
                      <translation code="849580" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="BACTRIM DS 800-160 MG TAB" />
                    </code>
                    <name>BACTRIM DS 800-160 MG TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus9" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931159206220" />
              <text>
                <reference value="#sig10" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="706955" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="TAMSULOSIN HCL 0.4 MG CAPS">
                      <originalText>
                        <reference value="#GenericName10" />
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1525196444000010" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>jo</given>
                      <family>hariri</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus10" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931189056220" />
              <text>
                <reference value="#sig11" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="284400" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="PROTONIX 40 MG TBEC">
                      <originalText>
                        <reference value="#GenericName11" />
                      </originalText>
                      <translation code="284400" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="PROTONIX 40 MG EC TAB" />
                    </code>
                    <name>PROTONIX 40 MG EC TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1525196444000010" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>jo</given>
                      <family>hariri</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus11" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931218006220" />
              <text>
                <reference value="#sig12" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code>
                      <originalText>
                        <reference value="#GenericName12" />
                      </originalText>
                    </code>
                    <name>MULTIVITAMINS TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1525196444000010" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>jo</given>
                      <family>hariri</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus12" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.16" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.2" extension="1609931219256220" />
              <text>
                <reference value="#sig13" />
              </text>
              <statusCode code="completed" />
              <effectiveTime xsi:type="IVL_TS">
                <low value="20110106" />
                <high />
              </effectiveTime>
              <approachSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" />
              <consumable typeCode="CSM">
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" />
                  <manufacturedMaterial>
                    <code code="809539" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="OSCAL 500/200 D-3 500-200 MG-UNIT TABS">
                      <originalText>
                        <reference value="#GenericName13" />
                      </originalText>
                      <translation code="809539" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="OSCAL 500/200 D-3 500-200 MG-IU TAB" />
                    </code>
                    <name>OSCAL 500/200 D-3 500-200 MG-IU TAB</name>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <author>
                <time value="20110106113456-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1525196444000010" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>jo</given>
                      <family>hariri</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.57" />
                  <templateId root="2.16.840.1.113883.10.20.1.47" />
                  <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                  <text>
                    <reference value="#mStatus13" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                </observation>
              </entryRelationship>
            </substanceAdministration>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.10" />
          <code code="18776-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Treatment plan" />
          <title>Plan of Care</title>
          <text>
            <content>No Plan of Care Available</content>
          </text>
          <entry nullFlavor="NI">
            <act nullFlavor="NI" classCode="ACT" moodCode="INT">
              <templateId root="2.16.840.1.113883.10.20.22.4.39" />
              <id nullFlavor="NI" />
              <code nullFlavor="NI" />
            </act>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.5.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.5" />
          <code code="11450-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Problem List" />
          <title>Conditions or Problems</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Problem Name</th>
                  <th>Problem Code</th>
                  <th>Onset Date</th>
                  <th>Status</th>
                  <th>Entry Date</th>
                  <th>Provider</th>
                  <th>Comment</th>
                  <th>Standard Description</th>
                  <th>Annotate</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="Problem1">DIAB W/RENAL MANIFESTS TYPE II/UNS NOT UNCNTRL</td>
                  <td>250.40</td>
                  <td>2002/09/17</td>
                  <td ID="Status1">Active</td>
                  <td>2002/09/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment1" />
                  <td>Diabetes mellitus with renal manifestations, type II or unspecified type, not stated as uncontrolled</td>
                  <td ID="Annotate1" />
                </tr>
                <tr>
                  <td ID="Problem2">Anemia</td>
                  <td>285.9</td>
                  <td>2002/09/17</td>
                  <td ID="Status2">Active</td>
                  <td>2002/09/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment2" />
                  <td>Anemia, unspecified</td>
                  <td ID="Annotate2" />
                </tr>
                <tr>
                  <td ID="Problem3">Familial hypercholesterolemia</td>
                  <td>272.0</td>
                  <td>2002/09/17</td>
                  <td ID="Status3">Active</td>
                  <td>2002/09/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment3" />
                  <td>Pure hypercholesterolemia</td>
                  <td ID="Annotate3" />
                </tr>
                <tr>
                  <td ID="Problem4">HTN CKD BEN W/CKD STAGE V/ESRD</td>
                  <td>403.11</td>
                  <td>2002/09/17</td>
                  <td ID="Status4">Active</td>
                  <td>2005/11/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment4" />
                  <td>Hypertensive chronic kidney disease, benign, with chronic kidney disease stage V or end stage renal disease</td>
                  <td ID="Annotate4" />
                </tr>
                <tr>
                  <td ID="Problem5">DIAB W/O COMP TYPE II/UNS NOT STATED UNCNTRL</td>
                  <td>250.00</td>
                  <td>2002/09/17</td>
                  <td ID="Status5">Active</td>
                  <td>2002/09/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment5" />
                  <td>Diabetes mellitus without mention of complication, type II or unspecified type, not stated as uncontrolled</td>
                  <td ID="Annotate5" />
                </tr>
                <tr>
                  <td ID="Problem6">Obsolete</td>
                  <td>585</td>
                  <td>2002/11/26</td>
                  <td ID="Status6">Active</td>
                  <td>2002/11/26</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment6" />
                  <td>Chronic kidney disease (CKD)</td>
                  <td ID="Annotate6" />
                </tr>
                <tr>
                  <td ID="Problem7">Delayed gastric emptying</td>
                  <td>536.8</td>
                  <td>2003/02/04</td>
                  <td ID="Status7">Active</td>
                  <td>2003/02/04</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment7" />
                  <td>Dyspepsia and other specified disorders of function of stomach</td>
                  <td ID="Annotate7" />
                </tr>
                <tr>
                  <td ID="Problem8">OTH VENOUS EMBO &amp; THROMBOSIS INFERIOR VENA CAVA</td>
                  <td>453.2</td>
                  <td>2003/02/04</td>
                  <td ID="Status8">Active</td>
                  <td>2003/02/04</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment8" />
                  <td>Embolism and thrombosis of inferior vena cava</td>
                  <td ID="Annotate8">s/p bilateral stents</td>
                </tr>
                <tr>
                  <td ID="Problem9">Abnormal chest xray</td>
                  <td>793.1</td>
                  <td>2003/02/04</td>
                  <td ID="Status9">Active</td>
                  <td>2003/02/04</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment9" />
                  <td>Nonspecific (abnormal) findings on radiological and other examination of lung field</td>
                  <td ID="Annotate9" />
                </tr>
                <tr>
                  <td ID="Problem10">Lymphedema</td>
                  <td>457.1</td>
                  <td>2003/03/31</td>
                  <td ID="Status10">Active</td>
                  <td>2003/03/31</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment10" />
                  <td>Other lymphedema</td>
                  <td ID="Annotate10" />
                </tr>
                <tr>
                  <td ID="Problem11">Obsolete</td>
                  <td>276.6</td>
                  <td>2003/04/16</td>
                  <td ID="Status11">Active</td>
                  <td>2003/04/16</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment11" />
                  <td>Fluid overload</td>
                  <td ID="Annotate11" />
                </tr>
                <tr>
                  <td ID="Problem12">Hypokalemia</td>
                  <td>276.8</td>
                  <td>2003/04/22</td>
                  <td ID="Status12">Active</td>
                  <td>2003/04/22</td>
                  <td>divina dupas</td>
                  <td ID="Comment12" />
                  <td>Hypopotassemia</td>
                  <td ID="Annotate12" />
                </tr>
                <tr>
                  <td ID="Problem13">Peritonitis</td>
                  <td>567.9</td>
                  <td>2003/07/22</td>
                  <td ID="Status13">Active</td>
                  <td>2003/07/22</td>
                  <td>divina dupas</td>
                  <td ID="Comment13" />
                  <td>Unspecified peritonitis</td>
                  <td ID="Annotate13">SNAPPING HIP</td>
                </tr>
                <tr>
                  <td ID="Problem14">BACTEREMIA</td>
                  <td>790.7</td>
                  <td>2003/07/22</td>
                  <td ID="Status14">Active</td>
                  <td>2003/07/22</td>
                  <td>divina dupas</td>
                  <td ID="Comment14" />
                  <td>Unspecified bacteremia</td>
                  <td ID="Annotate14">with low back pain</td>
                </tr>
                <tr>
                  <td ID="Problem15">Chest cough</td>
                  <td>786.2</td>
                  <td>2003/10/14</td>
                  <td ID="Status15">Active</td>
                  <td>2003/10/14</td>
                  <td>divina dupas</td>
                  <td ID="Comment15" />
                  <td>Cough</td>
                  <td ID="Annotate15" />
                </tr>
                <tr>
                  <td ID="Problem16">Allergy, contact</td>
                  <td>692.9</td>
                  <td>2004/01/05</td>
                  <td ID="Status16">Active</td>
                  <td>2004/01/05</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment16" />
                  <td>Contact dermatitis and other eczema, unspecified cause</td>
                  <td ID="Annotate16" />
                </tr>
                <tr>
                  <td ID="Problem17">ING HERN W/O MENTION OBST/GANGREN UNILAT/UNSPEC</td>
                  <td>550.90</td>
                  <td>2004/01/05</td>
                  <td ID="Status17">Active</td>
                  <td>2004/01/05</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment17" />
                  <td>Unilateral or unspecified inguinal hernia, without mention of obstruction or gangrene (not specified as recurrent)</td>
                  <td ID="Annotate17" />
                </tr>
                <tr>
                  <td ID="Problem18">UNSPECIFIED DISORDER OF LIPOID METABOLISM</td>
                  <td>272.9</td>
                  <td>2004/03/19</td>
                  <td ID="Status18">Active</td>
                  <td>2004/03/19</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment18" />
                  <td>Unspecified disorder of lipoid metabolism</td>
                  <td ID="Annotate18" />
                </tr>
                <tr>
                  <td ID="Problem19">ELEVATED PROSTATE SPECIFIC ANTIGEN</td>
                  <td>790.93</td>
                  <td>2004/05/13</td>
                  <td ID="Status19">Active</td>
                  <td>2004/05/13</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment19" />
                  <td>Elevated prostate specific antigen [PSA]</td>
                  <td ID="Annotate19" />
                </tr>
                <tr>
                  <td ID="Problem20">DIARRHEA OF PRESUMED INFECTIOUS ORIGIN</td>
                  <td>009.3</td>
                  <td>2004/06/10</td>
                  <td ID="Status20">Active</td>
                  <td>2004/06/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment20" />
                  <td>Diarrhea of presumed infectious origin</td>
                  <td ID="Annotate20" />
                </tr>
                <tr>
                  <td ID="Problem21">Obsolete</td>
                  <td>780.6</td>
                  <td>2004/06/10</td>
                  <td ID="Status21">Active</td>
                  <td>2004/06/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment21" />
                  <td>Fever and other physiologic disturbances of temperature regulation</td>
                  <td ID="Annotate21" />
                </tr>
                <tr>
                  <td ID="Problem22">Arteriosclerotic heart disease</td>
                  <td>414.00</td>
                  <td>2004/06/23</td>
                  <td ID="Status22">Active</td>
                  <td>2004/06/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment22" />
                  <td>Coronary atherosclerosis of unspecified type of vessel, native or graft</td>
                  <td ID="Annotate22" />
                </tr>
                <tr>
                  <td ID="Problem23">Abnormal electrocardiogram</td>
                  <td>794.31</td>
                  <td>2004/06/23</td>
                  <td ID="Status23">Active</td>
                  <td>2004/06/23</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment23" />
                  <td>Nonspecific abnormal electrocardiogram [ECG] [EKG]</td>
                  <td ID="Annotate23" />
                </tr>
                <tr>
                  <td ID="Problem24">ACUTE HEPATITIS C WITHOUT MENTION HEPATIC COMA</td>
                  <td>070.51</td>
                  <td>2004/12/10</td>
                  <td ID="Status24">Active</td>
                  <td>2004/12/10</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment24" />
                  <td>Acute hepatitis C without mention of hepatic coma</td>
                  <td ID="Annotate24" />
                </tr>
                <tr>
                  <td ID="Problem25">KIDNEY REPLACED BY TRANSPLANT</td>
                  <td>V42.0</td>
                  <td>2005/04/06</td>
                  <td ID="Status25">Active</td>
                  <td>2005/04/06</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment25" />
                  <td>Kidney replaced by transplant</td>
                  <td ID="Annotate25" />
                </tr>
                <tr>
                  <td ID="Problem26">DISORDERS OF MAGNESIUM METABOLISM</td>
                  <td>275.2</td>
                  <td>2005/07/29</td>
                  <td ID="Status26">Active</td>
                  <td>2005/07/29</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment26" />
                  <td>Disorders of magnesium metabolism</td>
                  <td ID="Annotate26" />
                </tr>
                <tr>
                  <td ID="Problem27">UNSPECIFIED VITAMIN D DEFICIENCY</td>
                  <td>268.9</td>
                  <td>2005/07/29</td>
                  <td ID="Status27">Active</td>
                  <td>2005/07/29</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment27" />
                  <td>Unspecified vitamin D deficiency</td>
                  <td ID="Annotate27" />
                </tr>
                <tr>
                  <td ID="Problem28">Antihyperlipidemic use, long term</td>
                  <td>V58.69</td>
                  <td>2006/11/22</td>
                  <td ID="Status28">Active</td>
                  <td>2006/11/22</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment28" />
                  <td>Long-term (current) use of other medications</td>
                  <td ID="Annotate28" />
                </tr>
                <tr>
                  <td ID="Problem29">Abscess, anorectal, hx of</td>
                  <td>V13.3</td>
                  <td>2007/01/11</td>
                  <td ID="Status29">Active</td>
                  <td>2007/01/11</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment29" />
                  <td>Personal history of diseases of skin and subcutaneous tissue</td>
                  <td ID="Annotate29" />
                </tr>
                <tr>
                  <td ID="Problem30">Osteoporosis</td>
                  <td>733.00</td>
                  <td>2007/07/27</td>
                  <td ID="Status30">Active</td>
                  <td>2007/07/27</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment30" />
                  <td>Osteoporosis, unspecified</td>
                  <td ID="Annotate30" />
                </tr>
                <tr>
                  <td ID="Problem31">OTHER CATARACT</td>
                  <td>366.8</td>
                  <td>2007/07/27</td>
                  <td ID="Status31">Active</td>
                  <td>2007/07/27</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment31" />
                  <td>Other cataract</td>
                  <td ID="Annotate31" />
                </tr>
                <tr>
                  <td ID="Problem32">PRE-OPERATIVE CARDIOVASCULAR EXAMINATION</td>
                  <td>V72.81</td>
                  <td>2007/09/07</td>
                  <td ID="Status32">Active</td>
                  <td>2007/09/17</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment32" />
                  <td>Preoperative cardiovascular examination</td>
                  <td ID="Annotate32" />
                </tr>
                <tr>
                  <td ID="Problem33">Adenocarcinoma, prostate</td>
                  <td>185</td>
                  <td>2009/01/09</td>
                  <td ID="Status33">Active</td>
                  <td>2009/01/09</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment33" />
                  <td>Malignant neoplasm of prostate</td>
                  <td ID="Annotate33">PRIOR ACL RECONSTRUCTION SURGERY-RULE OUT BASIS</td>
                </tr>
                <tr>
                  <td ID="Problem34">CHRONIC KIDNEY DISEASE STAGE III (MODERATE)</td>
                  <td>585.3</td>
                  <td>2009/04/28</td>
                  <td ID="Status34">Active</td>
                  <td>2009/04/28</td>
                  <td>Timothy F SEXton MD</td>
                  <td ID="Comment34" />
                  <td>Chronic kidney disease, Stage III (moderate)</td>
                  <td ID="Annotate34" />
                </tr>
              </tbody>
            </table>
          </text>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881839000600" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20020917" />
                <high />
              </effectiveTime>
              <author>
                <time value="20020917124029-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881839000600" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem1" />
                    </originalText>
                    <translation code="250.40" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="DIAB W/RENAL MANIFESTS TYPE II/UNS NOT UNCNTRL" />
                  </value>
                  <author>
                    <time value="20110612190234" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status1" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881869000600" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20020917" />
                <high />
              </effectiveTime>
              <author>
                <time value="20020917124029-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881869000600" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem2" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem2" />
                    </originalText>
                    <translation code="285.9" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Anemia" />
                  </value>
                  <author>
                    <time value="20110612190233" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status2" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881869300600" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20020917" />
                <high />
              </effectiveTime>
              <author>
                <time value="20020917124029-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881869300600" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem3" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem3" />
                    </originalText>
                    <translation code="272.0" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Familial hypercholesterolemia" />
                  </value>
                  <author>
                    <time value="20110612190241" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status3" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1448368950100680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20020917" />
                <high />
              </effectiveTime>
              <author>
                <time value="20051123124730-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881899000600" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem4" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem4" />
                    </originalText>
                    <translation code="403.11" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="HTN CKD BEN W/CKD STAGE V/ESRD" />
                  </value>
                  <author>
                    <time value="20110612190240" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status4" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881959000600" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20020917" />
                <high />
              </effectiveTime>
              <author>
                <time value="20020917124029-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1347881959000600" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem5" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20020917" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem5" />
                    </originalText>
                    <translation code="250.00" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="DIAB W/O COMP TYPE II/UNS NOT STATED UNCNTRL" />
                  </value>
                  <author>
                    <time value="20110612190233" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status5" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1353928354450610" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20021126" />
                <high />
              </effectiveTime>
              <author>
                <time value="20021126121739-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1353928354450610" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem6" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20021126" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem6" />
                    </originalText>
                    <translation code="585" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Obsolete" />
                  </value>
                  <author>
                    <time value="20110612190254" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status6" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980120050610" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030204" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030204121820-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980120050610" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem7" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030204" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem7" />
                    </originalText>
                    <translation code="536.8" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Delayed gastric emptying" />
                  </value>
                  <author>
                    <time value="20110612190256" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status7" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980150000610" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030204" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030204121820-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980150000610" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem8" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030204" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem8" />
                    </originalText>
                    <translation code="453.2" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="OTH VENOUS EMBO &amp; THROMBOSIS INFERIOR VENA CAVA" />
                  </value>
                  <author>
                    <time value="20110612190255" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status8" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980270000610" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030204" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030204121820-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1359980270000610" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem9" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030204" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem9" />
                    </originalText>
                    <translation code="793.1" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Abnormal chest xray" />
                  </value>
                  <author>
                    <time value="20110612190250" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status9" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1364737382050680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030331" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030331134402-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1364737382050680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem10" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030331" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem10" />
                    </originalText>
                    <translation code="457.1" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Lymphedema" />
                  </value>
                  <author>
                    <time value="20110612190251" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status10" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1366119664000700" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030416" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030416134834-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1366119664000700" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem11" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030416" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem11" />
                    </originalText>
                    <translation code="276.6" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Obsolete" />
                  </value>
                  <author>
                    <time value="20110612190253" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status11" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1366650359050690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030422" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030422170630-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1366650359050690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem12" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030422" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem12" />
                    </originalText>
                    <translation code="276.8" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Hypokalemia" />
                  </value>
                  <author>
                    <time value="20110612190245" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status12" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1374502859000690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030722" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030722142529-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1374502859000690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem13" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030722" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem13" />
                    </originalText>
                    <translation code="567.9" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Peritonitis" />
                  </value>
                  <author>
                    <time value="20110612190240" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status13" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1374502889000690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20030722" />
                <high />
              </effectiveTime>
              <author>
                <time value="20030722142529-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1374502889000690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem14" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20030722" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem14" />
                    </originalText>
                    <translation code="790.7" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="BACTEREMIA" />
                  </value>
                  <author>
                    <time value="20110612190233" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status14" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1381768075200700" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20031014" />
                <high />
              </effectiveTime>
              <author>
                <time value="20031014162925-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1361460680000650" />
                  <id root="2.16.840.1.113883.4.6" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>divina</given>
                      <family>dupas</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1381768075200700" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem15" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20031014" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem15" />
                    </originalText>
                    <translation code="786.2" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Chest cough" />
                  </value>
                  <author>
                    <time value="20110612190235" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status15" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1388930822350680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040105" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040105141200-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1388930822350680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem16" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040105" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem16" />
                    </originalText>
                    <translation code="692.9" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Allergy, contact" />
                  </value>
                  <author>
                    <time value="20110612190250" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status16" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1388930999000680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040105" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040105141200-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1388930999000680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem17" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040105" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem17" />
                    </originalText>
                    <translation code="550.90" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="ING HERN W/O MENTION OBST/GANGREN UNILAT/UNSPEC" />
                  </value>
                  <author>
                    <time value="20110612190247" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status17" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1395321540950680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040319" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040319132800-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1395321540950680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem18" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040319" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem18" />
                    </originalText>
                    <translation code="272.9" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="UNSPECIFIED DISORDER OF LIPOID METABOLISM" />
                  </value>
                  <author>
                    <time value="20110612190250" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status18" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1400072758950680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040513" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040513134225-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1400072758950680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem19" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040513" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem19" />
                    </originalText>
                    <translation code="790.93" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="ELEVATED PROSTATE SPECIFIC ANTIGEN" />
                  </value>
                  <author>
                    <time value="20110612190256" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status19" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1402498178000690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040610" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040610154925-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1402498178000690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem20" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040610" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem20" />
                    </originalText>
                    <translation code="009.3" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="DIARRHEA OF PRESUMED INFECTIOUS ORIGIN" />
                  </value>
                  <author>
                    <time value="20110612190259" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status20" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1402498388100690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040610" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040610154925-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1402498388100690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem21" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040610" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem21" />
                    </originalText>
                    <translation code="780.6" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Obsolete" />
                  </value>
                  <author>
                    <time value="20110612190250" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status21" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1403616877000690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040623" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040623134337-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1403616877000690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem22" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040623" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem22" />
                    </originalText>
                    <translation code="414.00" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Arteriosclerotic heart disease" />
                  </value>
                  <author>
                    <time value="20110612190249" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status22" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1403616877150690" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20040623" />
                <high />
              </effectiveTime>
              <author>
                <time value="20040623134337-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1403616877150690" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem23" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20040623" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem23" />
                    </originalText>
                    <translation code="794.31" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Abnormal electrocardiogram" />
                  </value>
                  <author>
                    <time value="20110612190241" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status23" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1418298459050700" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20041210" />
                <high />
              </effectiveTime>
              <author>
                <time value="20041210115209-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1418298459050700" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem24" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20041210" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem24" />
                    </originalText>
                    <translation code="070.51" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="ACUTE HEPATITIS C WITHOUT MENTION HEPATIC COMA" />
                  </value>
                  <author>
                    <time value="20110612190249" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status24" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1428400989000680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20050406" />
                <high />
              </effectiveTime>
              <author>
                <time value="20050406100639-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1428400989000680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem25" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20050406" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem25" />
                    </originalText>
                    <translation code="V42.0" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="KIDNEY REPLACED BY TRANSPLANT" />
                  </value>
                  <author>
                    <time value="20110612190246" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status25" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1438255695400680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20050729" />
                <high />
              </effectiveTime>
              <author>
                <time value="20050729113845-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1438255695400680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem26" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20050729" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem26" />
                    </originalText>
                    <translation code="275.2" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="DISORDERS OF MAGNESIUM METABOLISM" />
                  </value>
                  <author>
                    <time value="20110612190246" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status26" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1438255785000680" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20050729" />
                <high />
              </effectiveTime>
              <author>
                <time value="20050729113845-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1438255785000680" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem27" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20050729" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem27" />
                    </originalText>
                    <translation code="268.9" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="UNSPECIFIED VITAMIN D DEFICIENCY" />
                  </value>
                  <author>
                    <time value="20110612190255" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status27" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1479823907000620" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20061122" />
                <high />
              </effectiveTime>
              <author>
                <time value="20061122141417-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1479823907000620" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem28" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20061122" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem28" />
                    </originalText>
                    <translation code="V58.69" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Antihyperlipidemic use, long term" />
                  </value>
                  <author>
                    <time value="20110612190250" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status28" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1484133268200650" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20070111" />
                <high />
              </effectiveTime>
              <author>
                <time value="20070111113428-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1484133268200650" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem29" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20070111" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem29" />
                    </originalText>
                    <translation code="V13.3" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Abscess, anorectal, hx of" />
                  </value>
                  <author>
                    <time value="20110612190257" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status29" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1501154651300620" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20070727" />
                <high />
              </effectiveTime>
              <author>
                <time value="20070727113441-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1501154651300620" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem30" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20070727" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem30" />
                    </originalText>
                    <translation code="733.00" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Osteoporosis" />
                  </value>
                  <author>
                    <time value="20110612190249" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status30" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1501154681000620" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20070727" />
                <high />
              </effectiveTime>
              <author>
                <time value="20070727113441-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1501154681000620" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem31" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20070727" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem31" />
                    </originalText>
                    <translation code="366.8" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="OTHER CATARACT" />
                  </value>
                  <author>
                    <time value="20110612190242" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status31" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1505655978400870" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20070907" />
                <high />
              </effectiveTime>
              <author>
                <time value="20070917134648-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1505655978400870" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem32" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20070907" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem32" />
                    </originalText>
                    <translation code="V72.81" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="PRE-OPERATIVE CARDIOVASCULAR EXAMINATION" />
                  </value>
                  <author>
                    <time value="20110612190258" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status32" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1547118399000650" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20090109" />
                <high />
              </effectiveTime>
              <author>
                <time value="20090109111009-0500" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1547118399000650" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem33" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20090109" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem33" />
                    </originalText>
                    <translation code="185" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="Adenocarcinoma, prostate" />
                  </value>
                  <author>
                    <time value="20110612190238" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status33" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry>
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1556541266450610" />
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" codeSystemName="HL7ActClass" displayName="Concern" />
              <statusCode code="active" />
              <effectiveTime>
                <low value="20090428" />
                <high />
              </effectiveTime>
              <author>
                <time value="20090428123756-0400" />
                <assignedAuthor>
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                </assignedAuthor>
              </author>
              <entryRelationship typeCode="SUBJ" inversionInd="false">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.4" extension="1556541266450610" />
                  <code code="282291009" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Diagnosis" />
                  <text>
                    <reference value="#Problem34" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime>
                    <low value="20090428" />
                    <high />
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#Problem34" />
                    </originalText>
                    <translation code="585.3" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD-9-CM" displayName="CHRONIC KIDNEY DISEASE STAGE III (MODERATE)" />
                  </value>
                  <author>
                    <time value="20110612190240" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <entryRelationship typeCode="REFR" inversionInd="false">
                    <observation classCode="OBS" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.6" />
                      <code code="33999-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Status" />
                      <text>
                        <reference value="#Status34" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="CE" code="55561003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Active" />
                    </observation>
                  </entryRelationship>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.7.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.7" />
          <code code="47519-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Procedures" />
          <title>Procedures</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Code</th>
                  <th>Procedure Name</th>
                  <th>Date</th>
                  <th>Entry Date</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="Procedure1">CPT-G8443</td>
                  <td ID="ProcedureText1">  ALL PRSC DUR ENCNTR QUAL E-PRSC SYS</td>
                  <td>2009/06/11</td>
                  <td>2009/06/11</td>
                </tr>
                <tr>
                  <td ID="Procedure2">CPT-G8443</td>
                  <td ID="ProcedureText2">  ALL PRSC DUR ENCNTR QUAL E-PRSC SYS</td>
                  <td>2009/04/28</td>
                  <td>2009/04/28</td>
                </tr>
                <tr>
                  <td ID="Procedure3">CPT-G8443</td>
                  <td ID="ProcedureText3">  ALL PRSC DUR ENCNTR QUAL E-PRSC SYS</td>
                  <td>2009/02/20</td>
                  <td>2009/02/20</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry>
            <procedure classCode="PROC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.14" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.8" extension="1560342499350590" />
              <code xsi:type="CE" code="G8443" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Procedure1" />
                </originalText>
              </code>
              <text>
                <reference value="#ProcedureText1" />
              </text>
              <statusCode code="completed" />
              <effectiveTime value="20090611" />
              <priorityCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.5.7" codeSystemName="ActPriority" />
              <targetSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMEDCT" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.19.1" extension="TEST" />
                    <id root="2.16.840.1.113883.19.2" extension="44" />
                    <id root="2.16.840.1.113883.19.3" extension="1346768794100600" />
                    <name>Union Plainfield Medical Associates PA</name>
                    <telecom value="tel:+1-330-130-0001" use="WP" />
                    <addr use="WP">
                      <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                      <city>richmond</city>
                      <state>NJ</state>
                      <postalCode>07123</postalCode>
                      <country>US</country>
                    </addr>
                  </representedOrganization>
                </assignedEntity>
              </performer>
              <author>
                <time value="20090611122855" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
            </procedure>
          </entry>
          <entry>
            <procedure classCode="PROC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.14" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.8" extension="1556541266000610" />
              <code xsi:type="CE" code="G8443" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Procedure2" />
                </originalText>
              </code>
              <text>
                <reference value="#ProcedureText2" />
              </text>
              <statusCode code="completed" />
              <effectiveTime value="20090428" />
              <priorityCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.5.7" codeSystemName="ActPriority" />
              <targetSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMEDCT" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.19.1" extension="TEST" />
                    <id root="2.16.840.1.113883.19.2" extension="44" />
                    <id root="2.16.840.1.113883.19.3" extension="1346768794100600" />
                    <name>Union Plainfield Medical Associates PA</name>
                    <telecom value="tel:+1-330-130-0001" use="WP" />
                    <addr use="WP">
                      <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                      <city>richmond</city>
                      <state>NJ</state>
                      <postalCode>07123</postalCode>
                      <country>US</country>
                    </addr>
                  </representedOrganization>
                </assignedEntity>
              </performer>
              <author>
                <time value="20090428123414" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
            </procedure>
          </entry>
          <entry>
            <procedure classCode="PROC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.14" />
              <id root="1.2.840.113619.21.1.3164884235793924544.3.8" extension="1550747476350640" />
              <code xsi:type="CE" code="G8443" codeSystem="2.16.840.1.113883.6.12" codeSystemName="C4">
                <originalText>
                  <reference value="#Procedure3" />
                </originalText>
              </code>
              <text>
                <reference value="#ProcedureText3" />
              </text>
              <statusCode code="completed" />
              <effectiveTime value="20090220" />
              <priorityCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.5.7" codeSystemName="ActPriority" />
              <targetSiteCode nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMEDCT" />
              <performer typeCode="PRF">
                <assignedEntity classCode="ASSIGNED">
                  <id root="1.2.840.113619.21.1.3164884235793924544.2.2" extension="1346768794150600" />
                  <id root="2.16.840.1.113883.4.6" extension="1124081336" />
                  <addr use="WP">
                    <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                    <city>richmond</city>
                    <state>NJ</state>
                    <postalCode>07123</postalCode>
                    <country>US</country>
                  </addr>
                  <telecom value="tel:+1-330-130-0001" use="WP" />
                  <assignedPerson>
                    <name>
                      <given>Timothy</given>
                      <given>F</given>
                      <family>SEXton MD</family>
                    </name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.19.1" extension="TEST" />
                    <id root="2.16.840.1.113883.19.2" extension="44" />
                    <id root="2.16.840.1.113883.19.3" extension="1346768794100600" />
                    <name>Union Plainfield Medical Associates PA</name>
                    <telecom value="tel:+1-330-130-0001" use="WP" />
                    <addr use="WP">
                      <streetAddressLine>**** Union Plainfiel Street</streetAddressLine>
                      <city>richmond</city>
                      <state>NJ</state>
                      <postalCode>07123</postalCode>
                      <country>US</country>
                    </addr>
                  </representedOrganization>
                </assignedEntity>
              </performer>
              <author>
                <time value="20090220111205" />
                <assignedAuthor>
                  <id nullFlavor="NI" />
                </assignedAuthor>
              </author>
            </procedure>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.3.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.3" />
          <code code="30954-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Relevant diagnostic tests and/or laboratory data" />
          <title>Results</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Name</th>
                  <th>Value</th>
                  <th>Unit</th>
                  <th>Range</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc1">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result1">pH, urine, semiquantitative</td>
                  <td>6.0</td>
                  <td />
                  <td>(5.0-7.5)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc2">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result2">urea nitrogen, blood</td>
                  <td>21</td>
                  <td>mg/dL</td>
                  <td>(5-26)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result3">creatinine, serum</td>
                  <td>1.25</td>
                  <td>mg/dL</td>
                  <td>(0.76-1.27)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc3">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result4">mean corpuscular volume, RBC</td>
                  <td>88</td>
                  <td>fL</td>
                  <td>(80-98)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc4">Clinical Lists Update: UA-th - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result5">triglyceride, serum, fasting</td>
                  <td>75</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc5">Office Visit: MRI OR CT? - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/06/11</td>
                  <td ID="Result6">blood glucose</td>
                  <td>151</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc6">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result7">protein, total, serum</td>
                  <td>6.9</td>
                  <td>g/dL</td>
                  <td>(6.0-8.5)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result8">HDL cholesterol, serum</td>
                  <td>48</td>
                  <td>mg/dL</td>
                  <td>(&gt;39)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc7">Office Visit: MRI OR CT? - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/04/28</td>
                  <td ID="Result9">glucose, urine, semiquantitative</td>
                  <td>neg</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc8">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result10">triglycerides</td>
                  <td>78</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc9">Office Visit: MRI OR CT? - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/04/28</td>
                  <td ID="Result11">nitrite, urine, semiquantitative</td>
                  <td>neg</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc10">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result12">monocytes as percent of blood leukocytes</td>
                  <td>10</td>
                  <td>%</td>
                  <td>(4-13)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc11">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result13">lipoprotein (a), serum or plasma, cardiac marker</td>
                  <td>38</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result14">Sum total cholesterol</td>
                  <td>111</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc12">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/09/24</td>
                  <td ID="Result15">triglyceride, serum, random</td>
                  <td>71</td>
                  <td>mg/dL</td>
                  <td>(0-149)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result16">apolipoprotein A-1, serum</td>
                  <td>114</td>
                  <td>mg/dL</td>
                  <td>(110-180)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc13">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result17">bacteria, urine microscopy</td>
                  <td>Few</td>
                  <td />
                  <td>(None seen/Few)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc14">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result18">albumin, serum</td>
                  <td>4.4</td>
                  <td>g/dL</td>
                  <td>(3.5-4.8)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc15">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result19">urobilinogen, urine, semiquantitative (dipstick)</td>
                  <td>1.0</td>
                  <td />
                  <td>(0.0-1.9)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc16">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result20">calcium, serum</td>
                  <td>9.5</td>
                  <td>mg/dL</td>
                  <td>(8.6-10.2)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc17">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result21">WBC urine on microscopy</td>
                  <td>0-5 /hpf</td>
                  <td>{Cells}/[HPF]</td>
                  <td>(0 -  5)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc18">Clinical Lists Update: UA-th - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result22">LDL Size</td>
                  <td>22.5</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc19">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result23">lymphocytes as percent of blood leukocytes</td>
                  <td>22</td>
                  <td>%</td>
                  <td>(14-46)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc20">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result24">sodium, serum</td>
                  <td>139</td>
                  <td>mmol/L</td>
                  <td>(135-145)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result25">hemoglobin A1C, blood, as % of total hemoglobin</td>
                  <td>6.1</td>
                  <td>%</td>
                  <td>(4.8-5.6)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result26">phosphate, serum</td>
                  <td>2.5</td>
                  <td>mg/dL</td>
                  <td>(2.5-4.5)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result27">alkaline phosphatase, serum</td>
                  <td>37</td>
                  <td>U/L</td>
                  <td>(25-160)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc21">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result28">microalbumin/creatinine ratio, urine</td>
                  <td>1.9 MG/G CREAT</td>
                  <td>mg/g</td>
                  <td>(0.0-30.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc22">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/23</td>
                  <td ID="Result29">lipoprotein alpha</td>
                  <td>14</td>
                  <td>mg/dL</td>
                  <td>(0-30)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc23">Office Visit: Unknown - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2006/09/26</td>
                  <td ID="Result30">potassium, serum</td>
                  <td>4.3</td>
                  <td>meq/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc24">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result31">bilirubin, serum, total</td>
                  <td>0.6</td>
                  <td>mg/dL</td>
                  <td>(0.0-1.2)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc25">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result32">neutrophils as percent of blood leukocytes</td>
                  <td>65</td>
                  <td>%</td>
                  <td>(40-74)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc26">Office Visit: MRI OR CT? - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/06/11</td>
                  <td ID="Result33">microalbumin/creatinine ratio, urine</td>
                  <td>106.6</td>
                  <td>mg/mg{creat}</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td>2009/04/28</td>
                  <td ID="Result34">blood in urine (hemoglobin) by dipstick</td>
                  <td>neg</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc27">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result35">potassium, serum</td>
                  <td>4.3</td>
                  <td>mmol/L</td>
                  <td>(3.5-5.2)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result36">apolipoprotein B, serum</td>
                  <td>30</td>
                  <td>mg/dL</td>
                  <td>(60-140)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc28">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result37">urine color</td>
                  <td>Yellow</td>
                  <td />
                  <td>(Yellow)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc29">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result38">insulin, serum</td>
                  <td>6</td>
                  <td>u[iU]/mL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc30">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result39">epithelial cells, urine</td>
                  <td>None seen</td>
                  <td>/[LPF]</td>
                  <td>(0 - 10)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc31">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result40">lymphocyte count, blood, automated</td>
                  <td>1.0 X10E3/UL</td>
                  <td>10*3/mm3</td>
                  <td>(0.7-4.5)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc32">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result41">bilirubin, urine</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc33">Clinical Lists Update: UA-th - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result42">Small Low Density Lipoprotein Particle</td>
                  <td>26</td>
                  <td>nmol/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc34">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result43">chloride, serum</td>
                  <td>104</td>
                  <td>mmol/L</td>
                  <td>(97-108)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc35">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result44">erythrocyte (RBC) count</td>
                  <td>4.27 X10E6/UL</td>
                  <td>10*6/mm3</td>
                  <td>(4.10-5.60)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc36">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result45">appearance, urine</td>
                  <td>Clear</td>
                  <td />
                  <td>(Clear)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc37">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result46">platelet count</td>
                  <td>147 X10E3/UL</td>
                  <td>10*3/mm3</td>
                  <td>(140-415)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result47">red blood cell distribution width</td>
                  <td>14.4</td>
                  <td>%</td>
                  <td>(11.7-15.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc38">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result48">cholesterol, non-HDL, total</td>
                  <td>68</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc39">Office Visit: MRI OR CT? - Lab</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/06/11</td>
                  <td ID="Result49">LDL CHOLESTEROL</td>
                  <td>41</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc40">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result50">specific gravity, body fluid</td>
                  <td>1.026</td>
                  <td />
                  <td>(1.005-1.030)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc41">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result51">eosinophils as percent of blood leukocytes</td>
                  <td>2</td>
                  <td>%</td>
                  <td>(0-7)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc42">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result52">Absolute Neutrophils</td>
                  <td>2.9 X10E3/UL</td>
                  <td>10*3/uL</td>
                  <td>(1.8-7.8)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc43">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result53">basophil count, absolute</td>
                  <td>0.0 x10E3/uL</td>
                  <td />
                  <td>(0.0-0.2)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc44">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result54">alanine aminotransferase (SGPT), serum</td>
                  <td>13</td>
                  <td>U/L</td>
                  <td>(0-55)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/01/09</td>
                  <td ID="Result55">FK506  tacrolimus</td>
                  <td>2.9</td>
                  <td>ng/mL</td>
                  <td>(2.0-20.0)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result56">LDL cholesterol, serum</td>
                  <td>43</td>
                  <td>mg/dL</td>
                  <td>(0-99)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result57">bilirubin, serum, direct</td>
                  <td>0.22</td>
                  <td>mg/dL</td>
                  <td>(0.00-0.40)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result58">cholesterol, serum</td>
                  <td>112</td>
                  <td>mg/dL</td>
                  <td>(100-199)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result59">apolipoprotein B/apolipoprotein A-1 ratio, serum</td>
                  <td>0.3 ratio units</td>
                  <td />
                  <td>(0.0-0.7)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc45">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result60">mean corpuscular hemoglobin concentration, RBC</td>
                  <td>30.2 G/DL</td>
                  <td>%</td>
                  <td>(32.0-36.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc46">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result61">leukocyte esterase, urine, by dipstick</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc47">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result62">hemoglobin, blood</td>
                  <td>11.4</td>
                  <td>g/dL</td>
                  <td>(12.5-17.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc48">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result63">urinalysis, microscopic examination</td>
                  <td>See below:</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc49">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/12</td>
                  <td ID="Result64">cystatin c</td>
                  <td>0.99</td>
                  <td>mg/L</td>
                  <td>(0.53-0.95)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc50">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result65">leukocyte count, blood</td>
                  <td>4.4 X10E3/UL</td>
                  <td>10*3/mm3</td>
                  <td>(4.0-10.5)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc51">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result66">protein, urine, semiquantitative (dipstick)</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative/Trace)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result67">Crystal Type, Urine</td>
                  <td>Calcium Oxalate</td>
                  <td />
                  <td>(N/A)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc52">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result68">hematocrit, blood</td>
                  <td>37.7</td>
                  <td>%</td>
                  <td>(36.0-50.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc53">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result69">creatinine, urine</td>
                  <td>211.4 MG/DL</td>
                  <td>mL/min</td>
                  <td>(22.0-328.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc54">Office Visit: MRI OR CT? - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/04/28</td>
                  <td ID="Result70">globulin, serum</td>
                  <td>2.9</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc55">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result71">vitamin D 25-hydroxy, serum</td>
                  <td>36.7</td>
                  <td>ng/mL</td>
                  <td>(32.0-100.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc56">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result72">urine crystals, microscopic</td>
                  <td>Present</td>
                  <td>/[HPF]</td>
                  <td>(N/A)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc57">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result73">thyroid stimulating hormone, serum</td>
                  <td>1.57</td>
                  <td>u[iU]/mL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc58">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result74">glucose, urine</td>
                  <td>Negative</td>
                  <td>g/dL</td>
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc59">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result75">very low density lipoproteins</td>
                  <td>18</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc60">Office Visit: Unknown - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2006/09/26</td>
                  <td ID="Result76">Glomerular Filtration Rate Calculation</td>
                  <td>60</td>
                  <td>mL/min/1.73m2</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc61">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result77">uric acid, serum</td>
                  <td>5.5</td>
                  <td>mg/dL</td>
                  <td>(2.4-8.2)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc62">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result78">microalbumin, random, urine</td>
                  <td>0.41</td>
                  <td>mg/dL</td>
                  <td>Units converted. See lab report for original value.</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc63">Clinical Lists Update: UA-th - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result79">LDL particle number</td>
                  <td>513</td>
                  <td>nmol/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc64">Office Visit: Unknown - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2006/09/26</td>
                  <td ID="Result80">protein, total urine random</td>
                  <td>9.0</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc65">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result81">basophils as percent of blood leukocytes</td>
                  <td>1</td>
                  <td>%</td>
                  <td>(0-3)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc66">Office Visit: MRI OR CT? - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/09/08</td>
                  <td ID="Result82">microalbumin/total urine volume</td>
                  <td>36.5</td>
                  <td>mg/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc67">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result83">monocyte count, blood, automated</td>
                  <td>0.5 X10E3/UL</td>
                  <td />
                  <td>(0.1-1.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc68">Clinical Lists Update: UA-th - Lab</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result84">number of large High Density Lipoprotein particles</td>
                  <td>10.4</td>
                  <td>umol/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc69">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result85">urea nitrogen/creatinine ratio, serum</td>
                  <td>17</td>
                  <td />
                  <td>(8-27)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc70">Office Visit: Unknown - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2006/04/19</td>
                  <td ID="Result86">vitamin D 1,25-dihydroxy, serum</td>
                  <td>n/a</td>
                  <td />
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc71">Clinical Lists Update: UA-th - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/11/10</td>
                  <td ID="Result87">Large VLDL Particle</td>
                  <td>0.6</td>
                  <td>nmol/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc72">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result88">RBC, Urine</td>
                  <td>None seen /hpf</td>
                  <td>/[HPF]</td>
                  <td>(0 -  3)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result89">carbon dioxide, venous blood</td>
                  <td>25</td>
                  <td>mmol/L</td>
                  <td>(20-32)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/09/24</td>
                  <td ID="Result90">magnesium, serum</td>
                  <td>1.7</td>
                  <td>mg/dL</td>
                  <td>(1.6-2.6)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/06/29</td>
                  <td ID="Result91">parathormone, serum</td>
                  <td>40</td>
                  <td>pg/mL</td>
                  <td>(15-65)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc73">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result92">Total LDL-cholesterol direct</td>
                  <td>49</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc74">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result93">ketones, urine, by test strip</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc75">Office Visit: MRI OR CT? - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/04/28</td>
                  <td ID="Result94">creatine, serum</td>
                  <td>1.20</td>
                  <td>mg/dL</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc76">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result95">Eosinophil Absolute Count</td>
                  <td>0.1 X10E3/UL</td>
                  <td>10*3/uL</td>
                  <td>(0.0-0.4)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc77">Lab Report: renal, PTH, CBC - Urinalysis</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result96">hemoglobin, urine, by dipstick</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc78">Lab Report: renal, PTH, CBC - Hematology</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result97">mean corpuscular hemoglobin, RBC</td>
                  <td>26.7</td>
                  <td>pg</td>
                  <td>(27.0-34.0)</td>
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc79">Lab Report: Called Dr. Stryder Office to request medical records - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/06/28</td>
                  <td ID="Result98">creatine kinase, serum</td>
                  <td>65</td>
                  <td>U/L</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc80">Office Visit: MRI OR CT? - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2009/06/11</td>
                  <td ID="Result99">Glomerular Filtration Rate African American</td>
                  <td>&gt;59</td>
                  <td>mL/min/1.73m2</td>
                  <td />
                  <td />
                </tr>
                <tr>
                  <td colspan="6">
                    <content styleCode="Bold" ID="ResultsProc81">Lab Report: renal, PTH, CBC - Chemistry</content>
                  </td>
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result100">nitrate, urine</td>
                  <td>Negative</td>
                  <td />
                  <td>(Negative)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result101">blood glucose, random</td>
                  <td>99</td>
                  <td>mg/dL</td>
                  <td>(65-99)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result102">aspartate aminotransferase (SGOT), serum</td>
                  <td>18</td>
                  <td>U/L</td>
                  <td>(0-40)</td>
                  <td />
                </tr>
                <tr>
                  <td>2010/11/18</td>
                  <td ID="Result103">estimated glomerular filtration rate</td>
                  <td>56</td>
                  <td>mL/min</td>
                  <td>(    &gt;59)</td>
                  <td />
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="fee72dce-c65f-4d09-91db-9be5e7949a71" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="324-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result1" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="6.0" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(5.0-7.5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="be0d1c6a-7539-4b4a-b06d-a23c2727789e" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="9-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result2" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result2" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="21.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020045" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(5-26)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="18-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result3" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result3" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="1.25" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020045" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.76-1.27)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="325097c1-44c0-44cd-8cbe-128264edcd5d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="315-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result4" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result4" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="88.0" unit="fL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(80-98)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="c489a96d-57d3-4cf0-a089-d1f31ee61f4f" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="44-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result5" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result5" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="75.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115543" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="5bdc48f9-87e8-47a6-8edd-c473b5d67ef1" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3565-1244731487000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result6" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result6" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090611" />
                  <value xsi:type="PQ" value="151.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090611125709" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9e16fa2b-0220-4c6d-b900-5bb13b3f478d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="36-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result7" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result7" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="6.9" unit="g/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020052" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(6.0-8.5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="26-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result8" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result8" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="48.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(&gt;39)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="22e72b19-6849-4930-82bc-6f5d31d88bb7" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="123-1240933161000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result9" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result9" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090428" />
                  <value xsi:type="ST">neg</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090428114715" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="4252f389-fa0f-4a6e-b817-468aec9e3778" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="14750-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result10" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result10" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="78.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="658d210e-134e-4977-bf1f-27ec1718682d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="323-1240933161000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result11" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result11" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090428" />
                  <value xsi:type="ST">neg</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090428114715" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="4b5fa167-e4cf-485f-8d4b-50ec7ed760be" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2421-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result12" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result12" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="10.0" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(4-13)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="7f152b68-c28f-4145-a79f-1ebd9abdc1c0" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="5246-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result13" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result13" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="38.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="82491-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result14" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result14" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="111.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="affd5f96-fa5a-44ea-8d7d-1be26641f7fb" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3071-1285326240000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result15" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result15" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100924" />
                  <value xsi:type="PQ" value="71.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100927095407" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-149)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3924-1290082920000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result16" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result16" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="114.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020100" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(110-180)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="1bde9109-abe6-4da9-a3b1-8acaff8ed49d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2406-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result17" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result17" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Few</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020043" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(None seen/Few)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9da7ab3c-e0bf-4e99-884e-2d6938d9a092" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result18" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result18" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="4.4" unit="g/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020052" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(3.5-4.8)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="95911b09-5ed0-4923-be22-3f2202f23b76" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="326-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result19" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result19" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="1.0" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-1.9)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="4b7c4f2b-f0f5-4328-8fe0-e3d3803ce58b" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="11-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result20" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result20" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="9.5" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020051" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(8.6-10.2)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="c1704d09-f723-418d-9217-1abaea044fb8" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="1016-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result21" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result21" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">0-5 /hpf</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0 -  5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="5bdb3bba-3db7-4780-b95f-0d8721b3dc70" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="77872-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result22" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result22" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="22.5" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115544" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="aa9e4a02-42fa-4d96-b5c5-992d61c6a5a7" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="317-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result23" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result23" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="22.0" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(14-46)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="6fb705c6-7ce9-4675-ab5f-e7bbbff2a74a" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="159-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result24" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result24" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="139.0" unit="mmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020049" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(135-145)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="28-1290078360000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result25" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result25" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="6.1" unit="%" />
                  <interpretationCode code="H" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(4.8-5.6)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="34-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result26" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result26" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="2.5" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020051" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(2.5-4.5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result27" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result27" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="37.0" unit="U/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020054" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(25-160)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="c9137fa3-4cdf-493c-a781-23b284dd96b2" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="17242-1290085440000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result28" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result28" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">1.9 MG/G CREAT</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020057" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-30.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="8ad456f7-82d8-418f-ac12-261074b10a39" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3549-1290557100000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result29" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result29" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101123" />
                  <value xsi:type="PQ" value="14.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-30)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="fae36410-3ae8-4ca4-9946-41375e6ee5cb" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="14292-1159279447000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result30" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result30" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060926" />
                  <value xsi:type="PQ" value="4.3" unit="meq/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20061002100610" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="bd9421a4-a829-47e2-9520-1562785102eb" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="43-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result31" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result31" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="0.6" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020053" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-1.2)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="a729d12f-7da9-4fc9-9253-d2108867f678" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="316-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result32" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result32" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="65.0" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(40-74)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="5fba10d5-2f4b-4b94-a3c8-339c613a8a01" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="5699-1244731487000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result33" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result33" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090611" />
                  <value xsi:type="PQ" value="106.6" unit="mg/mg{creat}" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090611125709" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="4998-1240933161000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result34" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result34" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090428" />
                  <value xsi:type="ST">neg</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090428114715" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="c19f5de9-9493-4f87-b9bf-1964c7ea45bd" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="35-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result35" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result35" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="4.3" unit="mmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020050" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(3.5-5.2)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3926-1290082920000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result36" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result36" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="30.0" unit="mg/dL" />
                  <interpretationCode code="L" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020100" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(60-140)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="eb97c84f-ea43-40e3-a11e-2681168eefd4" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2751-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result37" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result37" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Yellow</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Yellow)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="b29e6bdd-4eb9-4bd6-8811-a1e318f05fe0" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="4570-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result38" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result38" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="6.0" unit="u[iU]/mL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="08453f33-68ca-41c7-bf64-a96255e85f29" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2416-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result39" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result39" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">None seen</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0 - 10)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="8c9370b3-ae26-4798-be17-1024aa8d6efb" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3074-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result40" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result40" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">1.0 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.7-4.5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="b7fd6c5c-742e-4db6-aa2a-b5a3924c87f0" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="319-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result41" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result41" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="78873648-b467-4ab4-ad24-1d7f42240ca2" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="99110-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result42" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result42" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="26.0" unit="nmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115544" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="00a212f8-ee85-4053-93b4-7b5262ffbff4" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="13-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result43" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result43" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="104.0" unit="mmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020050" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(97-108)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="3dacb00c-afa1-4f01-b14b-2ca23d5f699c" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="67-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result44" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result44" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">4.27 X10E6/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020031" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(4.10-5.60)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="fa16298b-4d70-4455-a8c1-2c2c4cf05e8a" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="328-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result45" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result45" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Clear</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Clear)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="d3adbc76-7d7e-4897-aa44-84193255dbc9" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="66-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result46" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result46" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">147 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(140-415)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="1030-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result47" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result47" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="14.4" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(11.7-15.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="63e133ac-098d-411b-b7d1-78af3a8a19f7" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="25274-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result48" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result48" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="68.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="8334fd0a-8f81-4b2a-b7e3-1f77e9808810" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="124542-1244731487000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result49" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result49" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090611" />
                  <value xsi:type="PQ" value="41.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090611125709" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="84658e0b-8027-4d4d-ac20-5bd0e7d365e7" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3512-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result50" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result50" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="1.026" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(1.005-1.030)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="07f94d44-0660-48eb-be87-dfc73c5c8c59" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="4170-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result51" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result51" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="2.0" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-7)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="0dce25a9-d702-4e3e-9460-1372c4d30392" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="67679-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result52" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result52" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">2.9 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(1.8-7.8)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="b8becfe5-5910-4628-bda5-92632efe1a90" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="71926-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result53" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result53" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">0.0 x10E3/uL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-0.2)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9977f458-1f7f-4aaf-a06b-f3f0f5f6ed74" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="40-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result54" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result54" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="13.0" unit="U/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020054" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-55)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2100046-1263040320000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result55" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result55" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100109" />
                  <value xsi:type="PQ" value="2.9" unit="ng/mL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100112102552" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(2.0-20.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="30-1290082920000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result56" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result56" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="43.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-99)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="21-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result57" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result57" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="0.22" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020053" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.00-0.40)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="14-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result58" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result58" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="112.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(100-199)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="5698-1290082920000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result59" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result59" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">0.3 ratio units</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020100" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-0.7)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="42c7525c-43f0-4082-8ec7-b9b093738ac5" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="1029-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result60" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result60" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">30.2 G/DL</value>
                  <interpretationCode code="L" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(32.0-36.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="53e935fc-2250-4d62-8a49-4aee8856afaa" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="327-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result61" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result61" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="2c51bd78-fff8-4af3-a064-76e3f153edf1" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="65-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result62" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result62" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="11.4" unit="g/dL" />
                  <interpretationCode code="L" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020031" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(12.5-17.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="83fa4d27-ba30-4aa8-8e30-1a184931089b" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2566-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result63" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result63" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">See below:</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="aa352b53-b1c6-4887-9a9c-7cbd74c43f02" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="88001-1258048380000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result64" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result64" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091112" />
                  <value xsi:type="PQ" value="0.99" unit="mg/L" />
                  <interpretationCode code="H" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091113011133" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.53-0.95)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9269b31e-f502-40b5-8529-6c8064e4a544" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="68-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result65" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result65" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">4.4 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020031" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(4.0-10.5)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="bf32cfa2-436a-41bf-b29c-861548b05ec1" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="118-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result66" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result66" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative/Trace)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="140610-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result67" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result67" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Calcium Oxalate</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020043" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(N/A)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="58262f02-ec48-41c4-842b-cb4c0308f64a" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="64-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result68" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result68" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="37.7" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(36.0-50.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="d0858ae2-0d47-4d1a-8381-119ec33e447a" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2448-1290085440000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result69" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result69" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">211.4 MG/DL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020054" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(22.0-328.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="e687b574-67a3-48d7-859e-70f778926649" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3059-1240933161000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result70" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result70" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090428" />
                  <value xsi:type="PQ" value="2.9" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090428114715" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="f82c1002-485d-4283-bd45-053164ea085d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="5875-1290114060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result71" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result71" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="36.7" unit="ng/mL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(32.0-100.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="4235d61e-240b-4c31-93bf-2b51e63584ab" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2543-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result72" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result72" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Present</value>
                  <interpretationCode code="A" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020037" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(N/A)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="d0960750-f60a-4fb6-985b-060c3f31966d" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="29-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result73" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result73" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="1.57" unit="u[iU]/mL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="cee2f861-4585-4ef1-ac6c-5b0c32e1e286" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3369-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result74" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result74" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="a1510155-a2c1-423d-a810-7f1cddba8a49" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2548-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result75" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result75" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="18.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="73f74205-069b-4402-9ee8-a182eb11c881" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="74017-1159279447000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result76" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result76" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060926" />
                  <value xsi:type="PQ" value="60.0" unit="mL/min/1.73m2" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20061002100610" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="32c8f1a0-1a64-4e2d-bdb4-a5c5c789f97b" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="46-1290083340000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result77" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result77" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="5.5" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020101" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(2.4-8.2)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="60dcb085-af28-4d1b-925e-bf2aa56404ce" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="21974-1290085440000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result78" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result78" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="0.41" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020055" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>Units converted. See lab report for original value.</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="5be37e29-2ce1-476d-977e-3d5d676afde5" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="79831-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result79" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result79" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="513.0" unit="nmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115544" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="7c8e34f8-5656-46b1-bb65-3abfb6ec6858" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3493-1159279447000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result80" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result80" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060926" />
                  <value xsi:type="PQ" value="9.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20061002100610" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="416dbfe5-e445-488a-a7b6-0389ee7ce33f" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2426-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result81" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result81" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="1.0" unit="%" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-3)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9ddabf7d-61d7-4975-bb47-3d7eba337fd5" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="330-1252419248000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result82" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result82" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090908" />
                  <value xsi:type="PQ" value="36.5" unit="mg/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090908103830" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="381d99a3-5da4-4704-9010-88310fa60dbc" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3076-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result83" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result83" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">0.5 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.1-1.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="7d5d8e15-9a7a-49d8-b986-63a6f264f023" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="114217-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result84" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result84" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="10.4" unit="umol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115544" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="36c19dcd-8f8a-4089-8400-ab0bb0a8c3bd" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="2462-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result85" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result85" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="17.0" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020049" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(8-27)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="de0098ca-93e3-43e4-94cf-311c02b02713" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="3537-1145468580000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result86" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result86" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060419" />
                  <value xsi:type="ST">n/a</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20060427142139" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="5e6d319a-2f07-46c3-98b2-6cb67e8e47f2" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="111010-1257872079000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result87" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result87" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20091110" />
                  <value xsi:type="PQ" value="0.6" unit="nmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20091119115544" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="1532009e-ef8b-474d-9671-dfde79264e8f" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="92287-1290082500000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result88" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result88" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">None seen /hpf</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0 -  3)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="15-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result89" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result89" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="25.0" unit="mmol/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020051" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(20-32)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="32-1285326240000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result90" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result90" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100924" />
                  <value xsi:type="PQ" value="1.7" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100927095407" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(1.6-2.6)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="38-1277827440000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result91" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result91" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100629" />
                  <value xsi:type="PQ" value="40.0" unit="pg/mL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100630090032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(15-65)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="fb42af2b-e5ad-41bd-a836-b4d34f9791aa" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="82488-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result92" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result92" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="49.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="a866fe33-7e55-4c58-adf7-9df315cab419" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="322-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result93" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result93" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="ee0da4ea-5cd8-4fdb-8293-4a77e8e1ff65" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="24941-1240933161000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result94" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result94" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090428" />
                  <value xsi:type="PQ" value="1.2" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090428114715" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="8dff8e92-3fd8-4960-b444-3c7ccb1256c4" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="103705-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result95" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result95" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">0.1 X10E3/UL</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020033" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0.0-0.4)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="6a2a0047-9de9-4f09-b3f4-53db69f8e895" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="320-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result96" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result96" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="84e14c46-7801-41e4-a83f-22e329c963f1" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="1031-1290075060000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result97" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result97" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="26.7" unit="pg" />
                  <interpretationCode code="L" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020032" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(27.0-34.0)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="9d5f4cf9-1465-4d27-bd42-392fa00845b0" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="16-1277757145000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result98" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result98" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100628" />
                  <value xsi:type="PQ" value="65.0" unit="U/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100715163529" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="97dd0f78-3471-40b7-b04b-168b07d5854a" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="88965-1244731487000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result99" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result99" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20090611" />
                  <value xsi:type="ST">&gt;59</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20090611125709" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="DRIV">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.1" />
              <id root="6b6024b2-4f60-4faf-9824-5ad7abaa1ee8" />
              <code xsi:type="CE" nullFlavor="NA" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Not Available" />
              <statusCode code="completed" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="5135-1290076740000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result100" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result100" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="ST">Negative</value>
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020034" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(Negative)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="8-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result101" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result101" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="99.0" unit="mg/dL" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020044" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(65-99)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="39-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result102" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result102" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="18.0" unit="U/L" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020054" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(0-40)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.2" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.6" extension="53598-1290081660000" />
                  <code nullFlavor="UNK" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#Result103" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#Result103" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20101118" />
                  <value xsi:type="PQ" value="56.0" unit="mL/min" />
                  <interpretationCode code="L" codeSystem="2.16.840.1.113883.1.11.78" codeSystemName="ObservationInterpretation" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20101124020047" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text>(    &gt;59)</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.17" />
          <code code="29762-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Social history" />
          <title>Social History</title>
          <text>No Known Social History</text>
          <entry>
            <observation nullFlavor="NI" classCode="OBS" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.78" />
              <templateId root="2.16.840.1.113883.10.20.22.4.85" />
              <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4" codeSystemName="HL7ActCode" displayName="Assertion" />
              <statusCode code="completed" />
              <effectiveTime>
                <low nullFlavor="UNK" />
              </effectiveTime>
              <value xsi:type="CD" nullFlavor="UNK" />
            </observation>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.4.1" />
          <templateId root="2.16.840.1.113883.10.20.22.2.4" />
          <code code="8716-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Vital Signs" />
          <title>Vital Signs</title>
          <text>
            <table border="1" width="100%">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Name</th>
                  <th>Value</th>
                  <th>Unit</th>
                  <th>Range</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign1">blood pressure, diastolic, left arm</td>
                  <td>78</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign2">blood pressure, diastolic, sitting</td>
                  <td>78</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign3">blood pressure, diastolic</td>
                  <td>70</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign4">blood pressure, systolic, left arm</td>
                  <td>120</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign5">blood pressure, systolic, sitting</td>
                  <td>110</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign6">blood pressure, systolic</td>
                  <td>110</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign7">height E&amp;M</td>
                  <td>72</td>
                  <td>[in_us]</td>
                  <td />
                  <td>Bdy height</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign8">pulse rate E&amp;M</td>
                  <td>78</td>
                  <td>/min</td>
                  <td />
                  <td>Heart rate</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign9">pulse rate, sitting</td>
                  <td>78</td>
                  <td>/min</td>
                  <td />
                  <td>Heart rate</td>
                </tr>
                <tr>
                  <td>2011/01/06</td>
                  <td ID="VitalSign10">weight E&amp;M</td>
                  <td>164</td>
                  <td>[lb_av]</td>
                  <td />
                  <td>Weight Measured</td>
                </tr>
                <tr>
                  <td>2010/01/07</td>
                  <td ID="VitalSign11">blood pressure, diastolic, standing</td>
                  <td>80</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2010/01/07</td>
                  <td ID="VitalSign12">blood pressure, systolic, standing</td>
                  <td>120</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2008/06/05</td>
                  <td ID="VitalSign13">blood pressure, diastolic, second observation</td>
                  <td>80</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2008/06/05</td>
                  <td ID="VitalSign14">blood pressure, systolic, second observation</td>
                  <td>114</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2008/06/05</td>
                  <td ID="VitalSign15">respiratory rate E&amp;M</td>
                  <td>16</td>
                  <td>/min</td>
                  <td />
                  <td>Respiratory rate</td>
                </tr>
                <tr>
                  <td>2006/07/13</td>
                  <td ID="VitalSign16">blood pressure, diastolic, third observation</td>
                  <td>80</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP dias</td>
                </tr>
                <tr>
                  <td>2006/07/13</td>
                  <td ID="VitalSign17">blood pressure, systolic, third observation</td>
                  <td>122</td>
                  <td>mm[Hg]</td>
                  <td />
                  <td>BP sys</td>
                </tr>
                <tr>
                  <td>2004/01/05</td>
                  <td ID="VitalSign18">temperature E&amp;M</td>
                  <td>98.0</td>
                  <td>[degF]</td>
                  <td />
                  <td>Bdy temp</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry>
            <organizer classCode="CLUSTER" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.26" />
              <id root="fed0234f-ea86-49e0-9ed4-12b8beedb3fc" />
              <code code="46680005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMEDCT" displayName="Vital signs" />
              <statusCode code="completed" />
              <effectiveTime value="20110106" />
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2880-1294328879000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign1" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="78.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110954" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2882-1294328879000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign2" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign2" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="78.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110944" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="53-1294328879000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign3" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign3" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="70.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110932" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2879-1294328879000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign4" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign4" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="120.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110952" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2881-1294328879000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign5" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign5" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="110.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110943" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="54-1294328879000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign6" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign6" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="110.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110927" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="55-1294328879000" />
                  <code xsi:type="CE" code="8302-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign7" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign7" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="72.0" unit="[in_us]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106104834" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="56-1294328879000" />
                  <code xsi:type="CE" code="8867-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign8" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign8" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="78.0" unit="/min" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110924" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2971-1294328879000" />
                  <code xsi:type="CE" code="8867-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign9" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign9" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="78.0" unit="/min" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106110947" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="61-1294328879000" />
                  <code xsi:type="CE" code="3141-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign10" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign10" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20110106" />
                  <value xsi:type="PQ" value="164.0" unit="[lb_av]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20110106104837" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2884-1262874433000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign11" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign11" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100107" />
                  <value xsi:type="PQ" value="80.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100107110631" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2883-1262874433000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign12" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign12" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20100107" />
                  <value xsi:type="PQ" value="120.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20100107110626" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="5248-1212680323000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign13" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign13" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20080605" />
                  <value xsi:type="PQ" value="80.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20080605120426" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="5247-1212680323000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign14" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign14" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20080605" />
                  <value xsi:type="PQ" value="114.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20080605120424" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="57-1212680323000" />
                  <code xsi:type="CE" code="9279-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign15" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign15" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20080605" />
                  <value xsi:type="PQ" value="16.0" unit="/min" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20080605120415" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                  <referenceRange>
                    <observationRange>
                      <text />
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="5250-1152800380000" />
                  <code xsi:type="CE" code="8462-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign16" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign16" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060713" />
                  <value xsi:type="PQ" value="80.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20060713113017" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="5249-1152800380000" />
                  <code xsi:type="CE" code="8480-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign17" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign17" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20060713" />
                  <value xsi:type="PQ" value="122.0" unit="mm[Hg]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                  <author>
                    <time value="20060713113014" />
                    <assignedAuthor>
                      <id nullFlavor="NI" />
                    </assignedAuthor>
                  </author>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" />
                  <id root="1.2.840.113619.21.1.3164884235793924544.3.7" extension="2641-1073327243000" />
                  <code xsi:type="CE" code="8310-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                    <originalText>
                      <reference value="#VitalSign18" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#VitalSign18" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20040105" />
                  <value xsi:type="PQ" value="98.0" unit="[degF]" />
                  <interpretationCode nullFlavor="NA" />
                  <methodCode nullFlavor="NA" />
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
    </structuredBody>
  </component>
</ClinicalDocument>