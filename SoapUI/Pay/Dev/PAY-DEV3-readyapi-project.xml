<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ee6764c2-8713-46be-8ba6-42998e99f423" created="2.8.2" activeEnvironment="Default environment" name="PAY DEV3" resourceRoot="" updated="2.8.2 2019-08-27T17:04:01Z" encryptionMode="Not encrypted" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite id="3662043f-b730-4237-82de-f31dae1d30ff" name="QBPAY Dev3"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="fba8e5ed-f0af-422a-a994-97ed9cf078dd" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Authorize" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8c4b5382-0f51-4f2e-9e01-15bec2f1c044"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"31846644923429--51"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"62-51764-7723484392642664"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EFKRIXDZAORZ"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="04588e21-4ad6-492a-8c24-18e752d813b3"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor" id="5a720066-668a-458e-ab8f-d297ad761542"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2890466-1fc3-453e-99e5-5d0cf31dd114" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Copy of Match content of [threadId]" id="0dc82351-49ec-475c-b166-73f204f77ed5"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Copy of Match content of [threadId]" id="8f165dd4-909e-4d8a-9e85-8885c31b1c2b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="e8dc5243-0e37-4dbf-aa5e-ee891a18752b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="41cadebc-c65f-4168-af50-876400a39490"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="1300f020-934c-4c1c-89a8-6ea8e9467e48"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="12d76c9a-7c24-4c8c-abf2-88bb52fac384"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="31357525-1dd4-43fc-b270-9f3b14dca07a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560791218</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="f0fb90bb-e167-44b4-9105-fcfdc3b01025"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="8cbad08a-e8b6-410d-bd81-35a0b41c21cc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3ef5ca01-84fa-413a-b5ff-08894b734b63"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="ea3bb74b-89db-4869-9063-fb96f6567a5b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="763e2306-1b95-45d3-8c4b-7821fd15f626"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- MORE THAN 10000" id="a72fb19a-bdd4-4df5-b030-11715ad7bb6c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3a49efa6-b407-4969-86ff-919f17647d57"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="5dc4b039-e60a-45ad-89e3-ab9198cae296"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86d4eed6-d650-4af9-8830-72606df380a7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 4" id="ff349f69-deb3-4af6-92f2-9408d6f80a3b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to modulator- MORE THAN 10000" id="e58ca2a1-5668-4730-83a0-b0d0b3ce558f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3a49efa6-b407-4969-86ff-919f17647d57"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="5dc4b039-e60a-45ad-89e3-ab9198cae296"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86d4eed6-d650-4af9-8830-72606df380a7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b0056877-bab6-48d3-b175-3e6807b0efa8"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- EXPIRED CARD" id="54b354cd-712b-4e33-b28b-410ebadacf23"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="0f01e39a-dc74-41a9-a32f-d98a010c0d65"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="4d85a164-ecb1-46d2-b15f-ce22a6991891"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 5" id="9bafcbde-88bc-4f92-aa86-f0137dc57676"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- EXPIRED CARD" id="05212a51-aee2-477e-9d6c-3176bfee9d43"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="0f01e39a-dc74-41a9-a32f-d98a010c0d65"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="4d85a164-ecb1-46d2-b15f-ce22a6991891"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="d68ab0ff-d0e9-4ec4-96bb-01ea042596b9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CARD" id="cead7246-9da3-44b8-9050-8dc899ab5294"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="a2d72fda-4689-4d8f-99a1-0e8139f9d9f1"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="f315a398-663b-4725-a894-4c0ae5cb91c7"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 6" id="064b9dd1-1b9c-4c21-805a-5f8ace8ad66a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="a3e74ee4-3c15-44c8-8b1c-858f0b0faf75"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="a2d72fda-4689-4d8f-99a1-0e8139f9d9f1"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="f315a398-663b-4725-a894-4c0ae5cb91c7"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06268f7a-8d3f-4e47-8498-9521d2ed1972" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="b04fde64-0b75-4536-bb7c-fe85be8c833d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CVV" id="4fd8072d-94d9-4a13-a4d9-97bbdec70ea0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3276cc2e-719e-417f-98d0-f6f11c9c3a32"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="b6ffef12-c16a-41fb-aa11-04e3d901fc1b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 8" id="5e6b421e-0419-4d00-bef8-fc47e34e0712"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="e5c57232-177d-4929-bfc5-22e6c893aae1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3276cc2e-719e-417f-98d0-f6f11c9c3a32"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="b6ffef12-c16a-41fb-aa11-04e3d901fc1b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="fefc75b8-c51c-4ce8-a22b-ef4260614e22"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="84050f5a-c509-42ef-8093-7afb150ccee8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="55c4de47-e0a3-4fb6-92dd-bec6e1ca0786"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="0ae1196e-a9c5-4a6e-8f6a-535cd743c55e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 9" id="709a073e-9f28-4a0e-9799-79553bda10d4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulaotr- AMEX" id="e70b325e-1b09-4721-801d-0d6b0a01efc7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulaotr- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="55c4de47-e0a3-4fb6-92dd-bec6e1ca0786"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="0ae1196e-a9c5-4a6e-8f6a-535cd743c55e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="27c9517c-7463-47b9-a612-3ff376434da8"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="fbec5ca9-a381-40f3-814c-6a66455e5ac7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="2fb93f45-47f3-4e61-8ef3-8adf85ce3a87"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="57632d27-49e9-4c0e-a556-c604a6d7d65d"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script" id="fc0d523c-0332-458e-baf3-5dbf157f1207"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-VALID AUTHORIZE" id="5f680e35-54ad-4693-a804-192bdc237d52"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
   "externalTransactionId":"ENHRYX0TI1NW",
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "CAPTURE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="faeaf23a-d4a1-490d-b6cb-49d0ef62990e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="6ed6a12a-0cab-4876-9453-168b3d16d39a"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="c4d47384-1076-44ac-b7e7-9d528154ae04"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )



import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST to  QBPAY processor-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST to  QBPAY processor-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID CAPTURE" id="0a29bc1a-3088-4a5f-a04b-a964de1af889"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="8a005a1c-5615-4df2-943f-a10466adda02"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="da65cc53-11b5-40e9-9f70-d4790dfe3b69"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ea160c2-8e32-409c-b68d-64aff7b234ff" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3a323fb5-6f58-48ba-9c6a-e5c95a42518e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ac6af74-bcee-454b-822c-2e0c30ef99dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c3e92c0-8c6f-401a-ab32-c5aef3498dce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5fee7a24-0d3a-4996-81bc-9f982aa74fdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c97cbedf-8a72-4107-a979-ecdc4404eacf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45535682-cb4f-4090-8b88-ca87fca024ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2049883-656a-4e1a-b398-4a881ef6e068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc75437f-320e-4519-b0b7-a0838638c245</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe5ab526-4153-4fc4-bdba-b41ae0875e63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3760d29-91e0-4853-b897-ac9884ef0504</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>358cec94-df71-4a19-8f82-ae4477064dd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0e955963-2a0d-4aef-88b3-2a7b7047b56b" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="348bb962-cb00-411a-8591-f0360f884b3a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"248164167912-21353"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="4102b5af-f1f9-4329-b8ba-6b5ae5786d49"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor" id="bde52e5b-bb31-467d-9860-1cb4a64eb101"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="637bd57f-501d-47a1-8e53-f20b27b90cb6"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="ce2ba146-6c96-45b0-a6c9-479e209335de"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="a269e67f-6d3b-4e23-a70b-002a732ada79"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="53975500-b9d5-41fe-ad92-1ec32ff12992"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="ace4d7e3-169a-4c28-aaeb-2e7cddfe59b5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant through modulator" id="fd813831-7d5c-4098-a1e1-440128239c82"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8d7afaf-d6e8-44d7-81a9-1d383a4d38ba" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b032eb9-ec8d-491e-a299-2f18681ecbc6" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="be160c87-8679-44d3-965c-3b49de389d13" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03290dfc-32eb-4e56-9271-73ef89dcc70b" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="b41bee79-555a-469c-9bbf-8ef432bee5f6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="426d466f-51a7-4f7a-8a5f-a0a23ecfb0bb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="09a6367b-0cd1-4426-a1e2-a0aa69a15507"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- MORE THAN 10000" id="4c33427a-bbfe-4287-8cb0-c2e42ad4cb4d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4930c70-6b68-41e2-aa3b-4636414aa0f6" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2371bde6-2057-47b9-8d2f-a2c1eb28cd27" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="db8f163b-ccb5-48b4-8067-b76d8cdffb40"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- EXPIRED CARD" id="0fabe539-41c7-4795-9fa6-0f2ee2ae68c6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="91bfbc22-c129-411f-98fc-45a6fc52abc4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CARD" id="9cac2f17-5490-40e4-a946-ded041b3372e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="f3564112-e403-4971-9e9b-a91e457afc0b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CVV" id="4ccaf19b-73b2-42ef-b992-29dd86a9c522"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="a08492a9-20f7-47c6-b19c-2f6514a687ea"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="124f0669-85e0-41b5-870b-9900e0637d50"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="22ac8d61-a3a6-467d-97a2-95263424f275"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="5486046b-998b-488c-aacb-03bcd05348ed"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="d3eb4043-65f3-4330-8d00-8341d13c71fb"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DUPLICATE CHARGE" id="8122d675-79e4-4893-98ef-4ac77387baf8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DUPLICATE CHARGE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="d747133a-b9fb-4b42-b8fa-07240ff6ce77"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor without cvv" id="f98c7a7b-20a9-4455-a98c-0f32056db755"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 13" id="ce7a5401-3de2-42ff-8fcc-ced837bc379b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator without cvv" id="a1468398-c87f-438f-972e-f87ad9ee9c55"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b511eed2-9c20-4d8e-a8d5-fc7b33421140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ef5c8b-97bc-4feb-8139-9b79014e3f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aaa1be1-79c2-4b16-95e0-1a5ceae23876</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c123c5d7-b29d-49d9-99f3-0279f221f9db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c2d18eee-1072-4ccc-9f52-45327dfcc21c" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Void a sale" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3b5ce022-12da-4b02-9265-10c2d0d85851"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"282-82177667182-7933-7829"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"ER89S3G5HLO7"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="b0e0f7df-3c4a-4401-9056-62915a4a8b1a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-SALE" id="548d32c6-d82f-4175-9264-268e4856f936"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Get transaction id" id="c7ab55a8-ce94-433e-922a-d97f774f9065"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VOID" id="224cacbb-d5e4-4452-aeee-dd1d8aea9622"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VOID" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="54924208-62e7-4ce6-a607-dc7434203862"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-sale" id="feb18f20-826a-4977-9489-4b49d2253336"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Get transaction id 2" id="4ccc9a1f-b5e5-4d01-9252-41f8e8f742dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VOID" id="d3927ddb-ed1a-48cc-9bd3-3a59d3ce15b7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VOID" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="f12fce74-6d4b-47ec-ad48-35542e5f4995"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to QBPAY for an already voided sale" id="dc8370f1-2275-4f3a-8159-628973d9bd56"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to QBPAY for an already voided sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b032eb9-ec8d-491e-a299-2f18681ecbc6" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="be160c87-8679-44d3-965c-3b49de389d13" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03290dfc-32eb-4e56-9271-73ef89dcc70b" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf352d6-c80d-4d8c-82d5-60b81678bda1" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="0af2330d-54c6-402c-bb13-02c64673a291"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="dc03ffe0-341b-4c3a-91f9-01751aaf99c7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id" id="963d5cff-2715-47b8-befb-62f24c9954a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- master card#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- master card"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Void master card" id="af3cbfe0-5aab-4d88-9929-2dfeed143bcb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Void master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="24da71b0-d28c-41b4-bb0c-53488911290f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="cfbec9a1-9b0c-44c1-b492-11605b1e8096"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for amex" id="8e574e06-2de5-4cde-bd2f-892dd43b8549"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- AMEX#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- AMEX"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Void amex" id="632abe78-8846-4220-983e-013664a43ecb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Void amex" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="a9a6b663-e173-4252-a76c-6bedba70410a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-DISC" id="f96cc4f8-9d2f-4ec5-8f9f-3e10a53f8b27"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for disc" id="35a21d04-f4ff-4985-9ff3-0efd942ebfeb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through the modulator-DISC#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through the modulator-DISC"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-DISC void" id="8c63f4ee-c6aa-4f62-8e69-3e9cfe96f95f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-DISC void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id 2" id="70e2acc7-6fc0-4766-98a6-c06e7a840545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through the modulator-DISC void#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through the modulator-DISC void"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-refund a void" id="f2ea435d-382f-40d8-99dd-8cc6f7bf8f44"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-refund a void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":"" ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b511eed2-9c20-4d8e-a8d5-fc7b33421140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ef5c8b-97bc-4feb-8139-9b79014e3f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aaa1be1-79c2-4b16-95e0-1a5ceae23876</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1401655-636f-46ee-9d82-3b31999cf786</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ad2cae3-8693-4e95-a06f-3414f67af9dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0060df79-6071-4157-ae97-135c6ebda444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb113116-e34a-403d-b1d7-c0cfbc0cc5a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1931b24c-8093-416e-955f-00395a0c2f1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6ed3540-911f-4cd3-8faf-e04a908a168f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c094c7a6-c84a-4d64-a5fc-4ce4ab7f5fff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6d79c52-322e-4e6a-84ae-68a79808cc5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26c6efde-6b26-44fc-84c3-671ec95c30e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ac9dcc0-a9bf-421f-b888-6246f93e09bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="454dfbe8-bbd2-4fe0-af6e-369fda4e69f9" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Authorize errors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="55a28ee3-9518-45cf-bab9-32487d4f463e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"3683584568943917878233-97"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d77b1fc6-37f4-45e4-9f54-f1be9ecbe85d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Valid authorize" id="9c5d56e7-53e9-42e3-94e2-4bfb9b4d5dec"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=0",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="0dbab70b-6d4a-4f19-bf6a-0217dab7357e"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-General decline" id="26c22ec6-687a-46c0-9d18-f5ee164abe0b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="993002e7-526b-4cb1-9ff4-caf770a41aaa"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="5e916301-ab62-4ff9-9076-c99e6887b1b1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17a03dbc-8a9c-46f7-a822-f87efec92596" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fdd5e1e-2d53-428d-a990-a81f1bc5cfab" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="d66678d4-2dc3-4ed3-bd81-9169ebd3b721"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="5f672764-89fd-40af-ba7a-eb4289c8db52"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- temporary error" id="3c030d13-ad87-42e3-8a44-4c4c86021e29"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="45fdfaa5-2e71-4120-8067-0b2109bc523b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- temporary error" id="591971d0-a05c-45f8-8ab4-8b7f581ed73e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="2cab7660-5ba3-4374-97ae-020411b84f3b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POSTthrough modulator- MORE THAN 10000" id="f4dede82-9161-4714-92ed-83423d03d0d5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POSTthrough modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac554ea-992c-4246-ab26-270362094640" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cda52a9-65b9-4765-b92f-8a46b2e734d7" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="740c5e25-b49c-4c3e-b9c8-ab6911658397"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Invalid card error" id="6aa540b3-351e-4b25-bd67-6007672544fe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="1a8ab564-8df8-4211-88b8-7061080a68c2"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Expired card" id="37a00a91-84e0-4d26-b049-e33a0f1f0dbd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Expired card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Albert",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e21ed4e7-a9de-4a6b-8fbe-e3f52bf861bb" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="3a2fa440-6243-465e-ae98-8a43174b4105"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="83479049-0d98-4e7f-8fb2-648ccf5746ec"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="8d57a624-7bd0-4b98-a39c-f259e6c4d333"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="cdefda26-0f7d-4a8f-9737-a3d4222a1b54"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="95fc057f-7c1c-4b0d-9a64-adfd791ca687"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcab8cd7-4ebf-473f-84d1-8f9ccf1ddd83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaefa7b2-e492-44a1-96b1-66725f4909ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5507a38-d39c-457b-a193-f0e9d8f1b30c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5332e73-29d9-4677-bb9c-ee03e89b771a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>beb30ebf-63c8-4977-bec8-bb60b58b39c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa9ad3f1-8c0c-4913-8773-58ca297f9f0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="42b4d2b8-e4cf-40bd-b7fb-f819998328a0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale errors" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="cd4b135d-1be5-4294-a9c8-e8bf8fba0334"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"6148898624-6474858"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="21437639-41fc-4946-a99b-a260bd74e9bd"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Valid sale" id="a0960582-1e14-4c54-b271-f470bb3daaa1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=0",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="40adfad7-8b33-4c0f-b403-6324a52eacd9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-General decline" id="ebc0b6a4-3942-4859-b598-ec0c23b4b6ef"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="ae20c1c9-b35e-4ee4-98dc-809532422bd4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="94dc81f3-f407-41de-a4fe-783d64deabe5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17a03dbc-8a9c-46f7-a822-f87efec92596" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fdd5e1e-2d53-428d-a990-a81f1bc5cfab" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="975e0a3e-ef1d-4ae8-801e-c048fb9c3857"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="82b5aaee-0be3-4494-b76a-1191bb444d7c"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- temporary error" id="89e1d689-6aac-4fcb-a557-db01f2b7ec0a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="ccf86a91-764d-4988-876f-a71c3aa89d3c"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- temporary error" id="938429a2-2700-46f6-82cd-60e9acb33d37"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="2c56cf87-37d9-4666-ba9d-129301d42ecf"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POSTthrough modulator- MORE THAN 10000" id="80012fa2-9563-4ab1-ae56-000ac97351e9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POSTthrough modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac554ea-992c-4246-ab26-270362094640" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cda52a9-65b9-4765-b92f-8a46b2e734d7" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="e8700b8c-7471-4208-a8cb-2803c980b2df"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Invalid card error" id="35cf0b16-4b44-42fb-a456-7357b5e3b657"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="9f31ab32-6637-4c3a-9ea1-727c0cb906d5"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Expired card" id="9449208e-6051-4708-870d-198c9dfcb08a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Expired card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Albert",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e21ed4e7-a9de-4a6b-8fbe-e3f52bf861bb" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="8c16ce22-41f4-46c5-8b8d-cd8d2b61b516"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="ff40f4d8-4fb9-49f5-a88b-cf3db401e0dc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="503855d2-a87b-4875-9c7b-c5c994b8937b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="c21e1f0d-6941-4959-abf4-f4bba7769efe"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="64819b17-5d27-487b-9118-967025fd74fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script 2" id="c0f40485-c454-4078-9b72-8475817210df"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="post through the modulator-General decline" id="f2d33ae0-1661-4a8c-ae14-3b24d3b91ae7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="post through the modulator-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3" id="50799661-a809-407b-b2e9-77fb73a6b0a6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator- temporary error" id="02f52a96-f450-4401-95c6-c979649f6715"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 5" id="d40f4fb3-db5b-4d75-b2e1-e6e8015efb9f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-Invalid card error" id="76ea67f7-662f-4f15-8b59-76d23d55a62b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcab8cd7-4ebf-473f-84d1-8f9ccf1ddd83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaefa7b2-e492-44a1-96b1-66725f4909ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5507a38-d39c-457b-a193-f0e9d8f1b30c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5332e73-29d9-4677-bb9c-ee03e89b771a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>beb30ebf-63c8-4977-bec8-bb60b58b39c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa9ad3f1-8c0c-4913-8773-58ca297f9f0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="83e8af85-9c86-441f-8990-ce5a0f47b172" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale and refund" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="d050dab4-fd92-4f88-8f31-b9ce3da3f08b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"4539-42474976497938414669"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EDWT2J7A31CD"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"-74-12684464-352126-47414"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="22121c59-02fe-405f-a85f-9c55df961460"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor--Sale" id="b10b0973-313e-43f2-873c-3d0320513cd4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor--Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5ba627e-2068-4991-8796-c24fb5531459" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="cd3e5eaa-c6c7-4167-832b-6ea586499cda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor--Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor--Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Full refund" id="8bcce55c-7d6c-4933-906a-51797a1501a9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Full refund" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
   "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="70f0af65-c107-4458-9d70-c7d6ac57b8c6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Sale" id="ecea9f7f-f6a0-470a-b6db-853797a6c95a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
     "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c48416d-59a9-4ca0-a083-62c739e434f7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 2" id="face3162-7fbe-4d69-a3a9-3a62127a474f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Full refund" id="166cb980-28d6-44b3-b6aa-52dd1647aa2a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Full refund" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
   "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="644752c7-3a1f-4682-a7f0-198f789fd03f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor--Sale 2" id="81990205-3eee-4980-967f-af6c2036dfd1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor--Sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 77799,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5ba627e-2068-4991-8796-c24fb5531459" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 3" id="c8f81f50-0add-4e43-a1b4-8d99562db61e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor--Sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor--Sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 1" id="65d6c238-9124-48fd-8010-db93446cbd3d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 1" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "10000",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="528032b3-cf02-4038-a129-84cf1687df9a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 2" id="35e909d0-cbe7-4acc-8b8e-377e9ab37652"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "10099",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3 2" id="71b6fc29-9c2c-4546-8d93-4a7457f22c44"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 3(exceeds)" id="01f8f6b8-5517-4a22-8fcb-a7122e98cd38"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 3(exceeds)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "70099",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ada96f3-71c8-4412-9a7e-1d86342a5695" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48646cd9-c5ae-4e3f-bb56-c1e52c662184" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="affced25-7c88-48eb-bcdb-33b6487cf0e0"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Sale" id="9b4a0d30-7a1f-416c-b64c-a935c54e3b3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2000,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c48416d-59a9-4ca0-a083-62c739e434f7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id 2" id="74c7d7f7-9aa4-4668-87b0-90cff04babd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- partial refund 1" id="03afc808-849d-4d80-a2a3-88ae10dd6b19"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- partial refund 1" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="43e391ef-17c4-45f8-9ace-b731694f1020"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- partial refund 2(exceeds)" id="c0ce0a6d-e062-44db-84af-e6aaf0e5776b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- partial refund 2(exceeds)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c3b0e01-4240-4c57-8249-fe2345804dec" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6143aab-fea5-45ac-968c-bb323b71393e" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c350f7b-e992-4442-966c-f1ad35489a1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e8731a8-3e20-4b15-8884-ee5cf8c9db28</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8ff43fe-c81e-4041-9673-dbd358063567</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aea82a2-0f14-407c-a2a3-77979624f4b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60dbc711-cabd-4d4b-b1e3-6f7c7b01c7fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f6b17ee-ad3b-41cd-a63d-b23e13883a60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5d03368-1ca9-4b0e-a4eb-36f13610f493</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7387b4bf-2b54-40dd-990e-023f88e56bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b51794ae-fe22-4720-95d2-07d461c3a252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c8b04f7-73eb-4896-aa4b-3231c2d71c44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95e850e4-fae5-402f-86b2-7a0de5df928a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f3b35-9857-4c74-9275-918193621a56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6817fff7-166b-4ba6-a62d-a6b795423aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>153544fd-5bc9-4873-b640-c2d5a4222c57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eccc3775-2a96-420d-b0d1-7ad8be10fad6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>250d1984-6a24-4488-8024-3d9cbd91d09e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3215cc2-839c-4a3b-8d3f-99b693cc4813</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0c52ab4-0829-451b-87aa-1ea1f31ee954</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>163005e0-684d-4425-85c8-02757a3d980e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2556646b-1952-439e-9e79-df04b3afdc5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>365b1abb-3fc4-4cca-965e-8d157d07909b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f8b65a5-c2e6-468e-a832-d8a486fd5cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3fe1f574-7a30-46ee-b4ac-3a3120263942" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Capture" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7d8669bb-d2a8-4454-8860-907cde5d84fe"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"6593724-41655952528984782"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EJHF5O6V3YZA"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="22f4303e-0b93-476c-b36d-38476ab33f3f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Authorize" id="bec0e387-5558-48ff-acc8-aeba88bd3b49"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="f66b8461-4f68-4e04-827f-2416d26163c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Capture" id="aed7e833-cab3-498e-9c70-41ae8d2fdfa6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="2af81fba-512e-4e3a-a270-673ee9188e97"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Authorize" id="edc7172b-72ca-4160-9b70-1774f77a0a9b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 2" id="0437536c-7614-4303-a8fd-b8409579151c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Capture" id="a821fe6a-44df-46f4-af8b-6b13d96b099b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="9abf90fa-b287-4fac-aae2-4f95e7722443"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- without authorization" id="8da2e263-6af9-438c-a4a3-95bd01ed47f0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- without authorization" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="10609d5c-4418-4004-819b-cfbfbdb9a067" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf5d883f-2ccc-4664-a215-e8be59c83541" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId cannot be empty or null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3" id="5a4041df-b93c-49e4-ab39-de3ee8185333"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- with an invalid auth transaction id" id="8dbf3462-54c5-487e-be94-e52d391ada53"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- with an invalid auth transaction id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
       "externalTransactionId":"EUIYUUFXSI6C9",
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="10609d5c-4418-4004-819b-cfbfbdb9a067" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19004ddf-cc7f-4284-8055-6274b10a2ed6" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="2358a25f-8f2f-48e2-aea6-2699a638d084"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- capture without authorization" id="76b1da38-a884-4815-9fad-66a77600b1d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- capture without authorization" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="d89b869b-538f-4fe7-85bb-57521789d1f7" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b6e403e8-618f-481c-ace8-96022c40fece"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="12526564-aa45-467e-bf3f-f706fff0c5f1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for amex" id="d8799dff-bc77-4a37-adff-9ad3e7aef864"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- AMEX#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- AMEX"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Capture Amex" id="d6e1a756-34c5-4849-9993-33422462d8a6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Capture Amex" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="3d325012-19be-4074-a1b5-12209b3d5e64"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="157aa239-f7f8-46ba-bfc7-e4f6b04a682f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get trans id for disc" id="c314a7ea-518b-4705-a9e8-73eaf4a69641"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-DISC#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-DISC"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Capture Disc" id="8f5a0a5c-f543-46ba-a436-3a47251941a2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Capture Disc" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script" id="095e3a41-6e94-4a59-ac10-bc6e2c3d4c38"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Authorize 2 for only track data" id="d1564ffe-496c-4347-91ac-1abd61ecf6d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Authorize 2 for only track data" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="48d424c6-d837-436f-8b81-21f469468727" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ed56ed4-be30-4b0c-a218-19c8cdbeae33" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${POST to  QBPAY processor-Authorize 2 for only track data#RawRequest#$['threadId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id" id="69d3ef88-bbc9-435e-b381-bea7f17a68fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-Authorize 2 for only track data#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-Authorize 2 for only track data"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor- Capture" id="c6428210-7264-4797-82f0-9445310049a5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": true
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="edf652ca-3048-497e-8de9-f5a9eea51766" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57bdda69-8a22-494c-ab58-77a4fa8741cf" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script -Get transaction id 2" id="3918d20b-1830-44b9-948c-5be70c61e4be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST to  QBPAY processor- Capture#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST to  QBPAY processor- Capture"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Void" id="a028a263-824e-4b77-8f7b-994a73e61545"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script" id="335b91eb-027b-48f9-9a9d-e9f785be46c9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Authorize 2 only track data" id="bcda548a-b7fb-49d1-8d73-a8db979958c0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Authorize 2 only track data" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="48d424c6-d837-436f-8b81-21f469468727" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ed56ed4-be30-4b0c-a218-19c8cdbeae33" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${POST to  QBPAY processor-Authorize 2 for only track data#RawRequest#$['threadId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="97c22217-d6c7-4612-99bf-06ec5cab28f5" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script -Get transaction id" id="a7bbdf68-15cd-4dcb-a95a-c473b9d154be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Authorize 2 only track data#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Authorize 2 only track data"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator - Capture" id="c2c4acf2-2fdc-4ee9-a863-33f5d58829fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator - Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": true
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="edf652ca-3048-497e-8de9-f5a9eea51766" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57bdda69-8a22-494c-ab58-77a4fa8741cf" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 4" id="cae36fb7-ab78-445f-83a6-ee4f1b427590"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Authorize" id="3455b331-1e6b-428b-bb3d-beb99dd5dd8b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id 2" id="03f380c8-34b0-4831-91ce-93ecfaf11ebf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Capture" id="4f434ec1-f033-4049-be4d-1fc92993e7dd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,

 "externalTransactionId":${Properties#externalTransactionId},




    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 3" id="c9fbf91a-3d84-4329-9dd0-6ea5710fbdc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-AuthorizeCopy of POST through modulator-Capture#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Capture"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Void" id="f04481f5-3f49-41f5-bef2-6bc97fb6bae6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c350f7b-e992-4442-966c-f1ad35489a1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e8731a8-3e20-4b15-8884-ee5cf8c9db28</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8ff43fe-c81e-4041-9673-dbd358063567</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aea82a2-0f14-407c-a2a3-77979624f4b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60dbc711-cabd-4d4b-b1e3-6f7c7b01c7fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f6b17ee-ad3b-41cd-a63d-b23e13883a60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5d03368-1ca9-4b0e-a4eb-36f13610f493</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7387b4bf-2b54-40dd-990e-023f88e56bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b51794ae-fe22-4720-95d2-07d461c3a252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e13493f-b3c5-423e-bbf8-d5d8f611e961</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1b61fbd1-5c33-468c-ab67-69c717811d18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5c835583-f2a6-4cb5-84cf-4161a91eb13d" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="2 step SALE + credit +void" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="fbfd54c8-5ab2-4fa5-924c-21c38bdba7d2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"56969615-34---551-2495486"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EF8FZSE7QD33"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 1" id="6bd3b4bf-7c56-496e-95d1-495a34559e39"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID AUTHORIZE" id="b68ac435-329f-4e7d-9b5e-8b251ee613d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 16600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id" id="7e293a04-a595-4080-a2b4-d3290abbf64c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID CAPTURE" id="82004f20-631e-4978-8d94-44ef918dbd84"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="820b6ec6-bf63-4a29-8c24-35618e7624e3" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale" id="a62db10e-2b27-4154-a4ba-067b17ed5c86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-VALID CAPTURE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-VALID CAPTURE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID SALE" id="13ff6890-5858-4a57-9b7d-66b786b55b48"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="6dc0e80d-ec5f-40bc-861d-cdd44241a0bf"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID AUTHORIZE" id="41f5b48d-1832-483e-99b7-bbc598b757b2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 163600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id 2" id="70eb6ab9-8d79-4e17-8e2e-4287f762e6dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID CAPTURE" id="7f001b43-0284-44af-bbab-4ff34ebec568"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-2" id="9b5ceb6d-5a3f-4fcc-931b-82f072642659"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID CAPTURE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID CAPTURE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID SALE" id="1619a616-9180-4bf1-a97e-8b52baeabfc3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for credit-3" id="3052ec98-ed92-4de7-bcea-cb86182617a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID credit" id="b87edf5c-7c18-40cf-ad94-f3eab1c36062"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":null,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-4" id="afea2cf6-4de7-4ec5-a40e-99831de172f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-void the sale after doing credit" id="2246c290-835e-4ddc-ac0b-43137a7ed4c0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-void the sale after doing credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId},
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ec65897-6b56-4f11-ba5f-7da3dc9e4de8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>request is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 1" id="b88276a4-991d-4cda-b8d9-f5182f0381dc"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-VALID SALE" id="cd812749-d7f2-4c14-b5b9-9b1d28e2a0f0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-5" id="80ac7c43-eb93-420a-80b1-7cc1a8c623f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-void the sale before doing credit" id="ef1658ad-f3a4-4c80-8e18-15deadeac681"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-void the sale before doing credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>88f53514-663f-4299-aeac-1bd3a68390d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab89491a-e9c4-438c-9bdc-b2aa379cb986</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="89877e3c-5699-4f20-a0a0-a4315ee4854e" name="CCOF"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="2159555f-f733-4a1e-b5ad-cfc1bf8c1253" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="VCS through the  modulator and directly" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="22642a44-5f69-4a26-a7e7-9f0c408a9a3d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"d8774c10-4d9c-44fc-addd-5"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"68396729-7691636977295114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"80537875"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="34107033-6bf6-425b-9092-383b7cdb9bc3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="1eaa4428-3247-4a91-aa8d-f21bb0402fe8" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="5f69df3f-0083-4f4e-bc90-a5d271c37f2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="3492785c-f2d6-4112-bfdd-3f89be6649af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="68a34104-f6bc-4f69-b678-dab344568206"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12f552fc-d7ae-475d-b6ac-f2523efe440a" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of capture" id="ddc29aee-53db-48fd-9215-9265abd18a7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of capture" id="acb7b37d-493b-4ca0-b440-a5857da92fd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment series" id="2d33049e-548a-4e8d-abf9-4b41ae22e513"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="b0b5e190-5369-47e3-8138-13c458352e3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="dba07c26-f34e-4172-a59e-2e8dc153eabe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="b1861c4c-cdc5-4ba1-a032-5cf458478816"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="1bba5090-c923-428e-8cc8-c446b932e249"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="ef27c28a-4579-489c-a9ac-cb4fc3594702"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 1" id="b3e502a4-ad3a-48d4-a608-c4a6af7f0067"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="dee2011f-5226-4053-8bb5-356d7cd61234"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="8a9345dc-bb8c-495e-acb0-cc44ebfb7493"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a19d59ed-c3b6-4db3-ac1d-1fb095b74b51"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="90aad804-c742-4746-944d-43fd9c5b2ec6"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="16c129d1-81ad-4ccf-86f5-06d578ad0972"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="0aa9bc12-9290-4d30-b9f8-9402b09332e5"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]1" id="76a19322-f3fa-4bfe-9c91-66096a408786"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]1" id="c617f491-8ddc-45cf-917a-1c921037907c"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="07099a6e-404e-41f5-8c49-00885646140a"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="931f6f81-562a-4097-9be5-494aa5751867"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="8db066e2-3e0c-4083-8349-601a20fe61a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="721eb325-418f-43b3-adeb-1dd213be0b0c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for sale" id="64e3d3ec-da4b-44a0-bfd0-885d2a262f15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post capture directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post capture directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="20715508-0ae4-44e4-bee5-b017ffdefc61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${Post capture directly#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post capture directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="4c94e4b4-d0cf-4ca3-9621-cdb3755b7c8b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="ead3c340-c33b-42f2-bccf-95f3d6f40130"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="48c71ff5-a7b1-4a68-8ec9-19106c54bf39"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="5e088507-21a4-47a8-bfc7-bd0197eb3a61"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="e253c585-3e18-4c4d-80a0-8c6484a1d012"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="edead76a-954d-426a-9a37-e0fd237cb3cb"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="27bb0a1a-678f-44b7-9cf2-223598f0ff04"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="fce70769-f858-4e82-b3b5-3d35260767c7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "2222",
        "type": "AX",
        "accountNumber": "341111597242000",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="f5a3b397-ac6c-42c6-bb6d-7c69bf9f3410"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="47283ebf-422f-486c-aa82-c7d4906450cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="5a2200df-de87-4c1a-8429-2e3ea39f1035"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "2222",
        "type": "AX",
        "accountNumber": "341111597242000",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non-initial payment" id="5c1e2724-4f47-48d2-9e88-45d09e302155"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "DI",
        "accountNumber": "6011000990911111",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST sale through the modulator-initial payment series" id="a4f3bbbd-ad62-4b69-9506-3a338403d325"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST sale through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560791218</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "paymentSource": "VCS"
  },
  "billToAddress": {
    "zipCode": "92075",
    "lastName": "Patient",
    "country": "US",
    "city": "SOLANA BEACH",
    "companyName": "Some company",
    "middleInitial": null,
    "phone": "",
    "name": "ACTIVEPREGNANCY, ANDREY ss",
    "addressLine1": "123 PATIENTFORSELENIUM TEST ST",
    "addressLine2": "",
    "addressLine3": null,
    "state": "CA",
    "email": ""
  },
  "transactionAmount": 92,
  "mfGatewayConsumer": {
    "accountNumber": "23345",
    "consumerName": "ACTIVEPREGNANCY, ANDREY ss"
  },
  "initialTransactionInSeries": false,
  "card": {
    "cvvNumber": "838",
    "bin": "496004",
    "type": "MC",
    "accountNumber": "4111111111111111",
    "trackData": null,
    "expirationDate": "1298",
    "cardPresent": false
  }
}
</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST sale through the modulator-initial payment series 2" id="fac1b820-821d-4f1f-8ac2-daa7bfe6cea9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST sale through the modulator-initial payment series 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="2339766a-dfec-465e-a947-b6c0b8971cb5" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="BDGB through the  modulator and directly" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="2e48f613-d29c-43cf-8f9b-56014965ab80"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"dc7ed0f5-619d-4c3a-84e3-e"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"9-5921618827934531-1-5114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"45831355"</con:value></con:property><con:property><con:name>externalTransactionSeriesId</con:name><con:value>"000090687490600"</con:value></con:property><con:property><con:name>expressNetworkTransactionId</con:name><con:value>"201060110549996"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="3a471084-01fc-4413-a1c9-30228b650e68"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aba19280-a57d-45e8-82fb-c15845c8bd3c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="c2b0e39f-22df-47d6-ba88-65fc039262ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="1ece87bb-0306-43ec-97dd-225e1bbe9c7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id for 2nd authorize" id="803c03aa-623d-41f1-8121-85b3f1010a37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="ba5a0af0-cde7-46f7-ab66-f528d3de3b78"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":true,
           
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="437c86a8-3365-4322-b58d-522af2916a6d" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 2nd set" id="7091a83e-0e24-401c-9177-ec1f293547b6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 2nd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da8b51d5-8ea3-4b25-adea-b3e1aa2eeef0" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="04844dc8-d84e-4f39-bb2a-0e1860d9ea65" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="fe4fb773-1b03-45cb-b601-77f78d7d3120" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585862411733</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>56a76065-0621-4adf-8bca-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44327296</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>976640</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585862411733</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>56a76065-0621-4adf-8bca-d</orderId>
   <externalTransactionId>44327296</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930162010376</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>976640</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of authorize" id="b2d79a27-b351-45d8-ba6c-e5db1e1322f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of authorize" id="4532fa51-1141-4417-a2ce-991375b10f81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 2" id="6bf6ec8a-57d2-4938-aac4-e234d5a4c41b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1b90e14-38c2-4973-86cd-daa749d96e38" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>${POST authorize through the modulator-initial payment series 2nd set#Response#$['externalTransactionSeriesId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="716c4df8-ed16-4236-a528-6d28190c6673" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 3rd set" id="527ae19f-145c-4719-b68a-7e6106a265df"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 3rd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 200000,
    "initialTransactionInSeries": false,
  
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b422ee3-ed62-4560-8783-c18b98699e8f" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="e5be35d2-6685-4e31-9b79-6153b1dbc347" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="52bb7c51-7ff0-4e7a-8174-0f176a6d01e6" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99b84e54-dfa0-4926-abb7-b76eb129b44c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id of authorize" id="76d6bc7a-e28b-49ea-9124-215c09537d06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get order id of authorize" id="9d36e4e7-69f0-4742-ba1c-f7799836879d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id" id="75fbeeaf-f070-4bfa-8926-6a09c81c41db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 3" id="7c036f4f-b354-4ee0-97d4-d3cc1b9d05d7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 200000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="bd4be054-5836-42be-912c-20b8055c98e2" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="12983460-8b8e-42e0-bbc9-cbe9adac84c8" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Invalid Transaction Status</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863697463</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>-1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637">
   <message>Invalid Transaction Status</message>
   <responseTime>1585863697463</responseTime>
   <responseCode>-1</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163352146</expressNetworkTransactionId>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="5e877381-57df-4087-8b1e-d0d4f54a47d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="06109012-526d-4403-8975-59c6e46f9ed4" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="503d9f51-9e37-412e-98f6-c52ef4f7054d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id for refund and void" id="b8bb4ede-5ed7-4f80-afc5-ebb6e0470093"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="5efa50fc-cb9a-4011-b32c-42f12d22a66b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="0ff1f9e5-442a-4813-9dae-a84c636d9fd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="4a2b6a77-1c50-4957-9057-0a9466232dcb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="57c26003-765a-4754-a166-e245fa2b22d3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non- initial payment" id="3061db17-08ea-4d85-9337-6700a51ce73a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non- initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aa70b174-ed4b-427c-86d5-a81390d94ce5" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="98888af8-751f-40d1-a9e8-c4d323fba683"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-non- initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-non- initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST refund through the modulator" id="bdd8070b-5283-4e11-bcbb-9e9c4cb4be4f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="10f86cae-e51b-4fd8-b86b-617e82cf20d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
      "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a2fb579a-d973-46cf-8fde-59e7a8a5774a" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="25075149-7793-449d-91df-3ff1ec054523"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="96fde025-dec4-44d1-8858-0b656e1b9c66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="5a824c78-8187-41f1-a59f-c87923c9fc4e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":true,
    "card": {
     "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="dc0986cf-7981-4624-83e6-d8e018731b5f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="bdca7c3a-d983-4992-9a42-b1796134dcc9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    
 
    "initialTransactionInSeries":true,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd228b94-1c48-4049-84d9-82aeb70e7e61" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5a6dca44-f27e-4cc5-9957-5ec8fa6ef342" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="3193f3dd-71f2-4601-92c5-326518350d85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="e5f17a92-6eb3-4ed4-a36f-822e117968bc"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="2f4dc883-b0c6-46b8-874a-a10bb6ba6718"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="3848163f-3674-446e-9664-527ed9cc7e18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="bdc64793-5764-4d28-865e-b405350dbad6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="d842e918-7c2f-4227-a55e-77e0fe133d1d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="1ed21725-3615-448d-9db8-895b16498396"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="35871613-3b60-4023-856a-be33229a0941" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="18d2e90a-33c9-49aa-9dcf-48d1db91513b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="6884a562-8336-4c10-a5e1-5e75687e6826"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id" id="98cecf45-be4e-450f-9600-4fc27b9a4ed5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="28ac4842-4122-4aab-a414-d1db13f5b932"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
      "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries": false,
    "card": {
         "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55c0eba4-af87-43da-8f5e-86766efd06bb" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan- 1 initial payment" id="9a37c859-b51e-4a93-be2f-8cb0b7580dd3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan- 1 initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 98800,
    "initialTransactionInSeries": true,
    "card": {
       "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="28226c5b-cf06-4af0-b34d-5b0d9fd5d8a0" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d957fa30-c03f-41cb-8821-8d30711160ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan- 1 initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan- 1 initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-2nd payment" id="f63128db-c10f-4ae7-bb85-2cd113f4094b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-2nd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 2000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="1d9bd45b-df48-4cc6-b28b-aa5ac5a55f1b" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="b2a2c620-e713-409a-8cbb-7fa29252e85b" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585865844873</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>6ad5b791-f7d3-484c-b968-6</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44332714</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15499A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585865844873</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>6ad5b791-f7d3-484c-b968-6</orderId>
   <externalTransactionId>44332714</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093802441377</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15499A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get network transaction id of previous series" id="e2ba9492-fd5b-4497-b31f-4a4003c54802"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan-2nd payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan-2nd payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-3rd payment" id="02ae5e37-420a-4f55-a5e6-003d52c2ad08"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-3rd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 4000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="4cc0b6d8-7eb2-47c0-a4e7-165a44246abe" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="c43deabf-4374-4db0-bec6-b22fe00fdc30" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan-2nd payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d67d5bf5-1a9e-404c-947f-1de8523c16dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d196dc48-e107-409e-ae08-571dd84b84ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9df84187-0e01-4cfc-bb5d-5a1971f05bcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad6e7be-859a-436e-b76b-ecf5ac332836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d25d1686-4b7d-4caf-8cae-05df7e4df210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcd8c55f-0234-4f67-aa01-7b8332f3f368</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35f3e719-7935-41af-bbfb-065e0d854d88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35846ab0-c797-4c51-9709-47333fcf1c35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d71e830-f4e5-4e35-b371-a12299e19cf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5baeafbf-734c-430c-b0ac-73aa5432af9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50786732-e251-4f19-bbdf-fa29599b709b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa4001c4-2027-4490-9dc2-a68afacad511</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8c5c650-74a6-42b0-a0a0-c0760a12664f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2ea3361-6808-4a10-bfdb-d2907d8c8c41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa40f52e-3f78-48fe-82f4-44e7ac098ce9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7be1daf0-97cb-42c3-887f-bc6e0b2b8062" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="OLBP through the  modulator and directly" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="59c5a092-55e1-45a5-b85a-f365968c4ef9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"66741509-cfe2-4afb-ae19-b"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"9-5921618827934531-1-5114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"44406820"</con:value></con:property><con:property><con:name>externalTransactionSeriesId</con:name><con:value>"000090687490600"</con:value></con:property><con:property><con:name>expressNetworkTransactionId</con:name><con:value>"201210104446776"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="03f1ecb9-a393-4a54-b6a5-606911ef48fd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aba19280-a57d-45e8-82fb-c15845c8bd3c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="cd75d766-032f-4f08-a370-d2db865bb852"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="0b967b37-230f-4c3e-b474-cba282da3ec2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id for 2nd authorize" id="52e97f88-8f13-47a9-ab28-9e23308f86ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="daa0f084-6fed-453a-a1c8-4888f941849c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":true,
           
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="437c86a8-3365-4322-b58d-522af2916a6d" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 2nd set" id="42061559-342a-42fb-b8d2-c14433914cca"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 2nd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da8b51d5-8ea3-4b25-adea-b3e1aa2eeef0" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="04844dc8-d84e-4f39-bb2a-0e1860d9ea65" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="fe4fb773-1b03-45cb-b601-77f78d7d3120" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585862411733</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>56a76065-0621-4adf-8bca-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44327296</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>976640</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585862411733</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>56a76065-0621-4adf-8bca-d</orderId>
   <externalTransactionId>44327296</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930162010376</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>976640</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of authorize" id="4348e9cc-ad82-4956-8854-0cb5c0e3bb25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of authorize" id="3f00620a-6747-433a-ae9b-87726e78d2b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 2" id="8fcc2eb0-710f-468b-95b0-fbb3594e7389"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1b90e14-38c2-4973-86cd-daa749d96e38" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>${POST authorize through the modulator-initial payment series 2nd set#Response#$['externalTransactionSeriesId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="716c4df8-ed16-4236-a528-6d28190c6673" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 3rd set" id="57990ff2-ed15-4e80-b75b-6af98f11fcb4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 3rd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 200000,
    "initialTransactionInSeries": false,
  
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b422ee3-ed62-4560-8783-c18b98699e8f" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="e5be35d2-6685-4e31-9b79-6153b1dbc347" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="52bb7c51-7ff0-4e7a-8174-0f176a6d01e6" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99b84e54-dfa0-4926-abb7-b76eb129b44c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id of authorize" id="f1e42e25-fdb4-4d6e-9374-a033c833b28b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get order id of authorize" id="57341461-3c04-4e73-a179-ebcf47103678"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id" id="203efac5-6d81-44c8-8999-58f67ae1546c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 3" id="8cf8c3e4-8b2f-4fbb-a3b2-681e5c246c52"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 200000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="bd4be054-5836-42be-912c-20b8055c98e2" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="12983460-8b8e-42e0-bbc9-cbe9adac84c8" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Invalid Transaction Status</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863697463</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>-1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637">
   <message>Invalid Transaction Status</message>
   <responseTime>1585863697463</responseTime>
   <responseCode>-1</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163352146</expressNetworkTransactionId>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="59628997-1fb8-4941-bb30-c12268f44c27"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="06109012-526d-4403-8975-59c6e46f9ed4" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="0e30b680-1251-472c-9d84-1e32fe37b279"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id for refund and void" id="80144ab3-106f-4d9e-a2b3-b3551cd258bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="6c8ea2f6-3776-462a-88ea-f79eda07bf91"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="740a58ac-7f79-438b-ab52-fe1ed694a6ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="91822f2d-96ea-49c9-a1ca-21ce3f9fd803"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="b30a5f9f-3474-4768-aa4a-5ec8b20ea459"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non- initial payment" id="0db6b910-4aa5-40ba-9c1b-377d251198aa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non- initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aa70b174-ed4b-427c-86d5-a81390d94ce5" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="06bf1336-2c35-47e8-9d84-147663617a0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-non- initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-non- initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST refund through the modulator" id="6ba89365-5397-4b88-aefe-a87509b4b779"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="1fd8891d-ffdc-4548-b864-15012fd71d86"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
      "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a2fb579a-d973-46cf-8fde-59e7a8a5774a" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="cde0322b-0673-48a3-8374-563604555cfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="a0979f3a-8c27-46bc-877b-73bffc5d7de3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="2e5c9bed-14c0-49c8-a9ee-02ef76369c0a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":true,
    "card": {
     "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="9c1997b8-e300-4a8a-b2f3-4e506d7617f7"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="0ae0c61e-a5ec-4851-9918-bbc19449b998"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    
 
    "initialTransactionInSeries":true,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd228b94-1c48-4049-84d9-82aeb70e7e61" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5a6dca44-f27e-4cc5-9957-5ec8fa6ef342" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="41434a32-5fec-415c-9b69-f001ef48273d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="c3d3ccbb-c89d-4840-a29c-b3242e6501ac"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="af915528-29d7-49f5-ba8b-2b50e0eda86d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="24d7f82a-1750-4e9e-b4af-2ed955473f4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="e8bda461-2010-4104-b777-79211057976d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="ec2822a4-0c97-467b-a591-03788da9c1ab"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="3889b040-958c-4001-8f02-539bd9bf3237"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="35871613-3b60-4023-856a-be33229a0941" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="c0ef3469-678d-49fc-b065-dce12a8d13a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="9c7b1a4e-b9f8-4f90-8c9f-3a49bc783020"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id" id="ad9e962e-5a1c-4efe-91cf-74d5869779c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="ac81d710-8c25-475c-b820-96f20eecfbf2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
    
    "initialTransactionInSeries": false,
    "card": {
         "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan- 1 initial payment" id="64359710-e361-4b41-bc02-d7d9d199ebb7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan- 1 initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 98800,
    "initialTransactionInSeries": true,
    "card": {
       "cvvNumber": "201",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="28226c5b-cf06-4af0-b34d-5b0d9fd5d8a0" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="ab782322-b5ca-4b63-b71e-0bad3acf521f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan- 1 initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan- 1 initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-2nd payment" id="ee79da56-e85a-42c3-a542-b0b3914cf705"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-2nd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 2000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "201",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="1d9bd45b-df48-4cc6-b28b-aa5ac5a55f1b" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="b2a2c620-e713-409a-8cbb-7fa29252e85b" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585865844873</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>6ad5b791-f7d3-484c-b968-6</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44332714</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15499A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585865844873</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>6ad5b791-f7d3-484c-b968-6</orderId>
   <externalTransactionId>44332714</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093802441377</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15499A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get network transaction id of previous series" id="dce004eb-0a02-4c9c-92db-bde98a5cba4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan-2nd payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan-2nd payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-3rd payment" id="3e958fb2-f8e8-4d0b-b488-aaa6224e2bcc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-3rd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 4000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="4cc0b6d8-7eb2-47c0-a4e7-165a44246abe" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="c43deabf-4374-4db0-bec6-b22fe00fdc30" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan-2nd payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d67d5bf5-1a9e-404c-947f-1de8523c16dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d196dc48-e107-409e-ae08-571dd84b84ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9df84187-0e01-4cfc-bb5d-5a1971f05bcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad6e7be-859a-436e-b76b-ecf5ac332836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d25d1686-4b7d-4caf-8cae-05df7e4df210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcd8c55f-0234-4f67-aa01-7b8332f3f368</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35f3e719-7935-41af-bbfb-065e0d854d88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35846ab0-c797-4c51-9709-47333fcf1c35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d71e830-f4e5-4e35-b371-a12299e19cf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5baeafbf-734c-430c-b0ac-73aa5432af9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50786732-e251-4f19-bbdf-fa29599b709b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa4001c4-2027-4490-9dc2-a68afacad511</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8c5c650-74a6-42b0-a0a0-c0760a12664f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2ea3361-6808-4a10-bfdb-d2907d8c8c41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa40f52e-3f78-48fe-82f4-44e7ac098ce9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="b9ce34ae-e73c-41a2-b587-bbf5a86f0ee1" name="Old Merchant provisioning endpoints"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="8e38ef0b-a536-4d34-8f19-c2aff2b1ef66" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Old merchant provisioning tests" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="httprequest" name="POST create merchant" id="ba10b0fb-039c-4640-86ac-887771bf5f02"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="POST create merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT Update merchant" id="5036e228-0cad-4231-8e22-9110ddb60adc"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT Update merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/${POST create merchant#Response#$['id']}</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Updated merchant name test 123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": "",
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": {
    	"address1":"remit address#233",
    	"address2":"address2",
    	"city":"Salem",
    	"state":"NC",
    	"zip":"34444"
    	},
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": 3446667676,
    "customerServicePhoneNumber": 3444334343,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"124444346",
  "accountNumber":"4344421",
  "federalTaxId":"123456789",
   "elementAccountId" : "143444",
      "elementAcceptorId" : "344344344",
      "elementTerminalId" : "235235g45",
      "elementAccountToken" : "245kj243jk524k5jk2454225",
      "vantivIbmMid" : "3434343434545",
      "routingNumber" : "12444434",
      "accountNumber" : "4344421",
      "accountType" : "C",
      "amexSid" : "42534546",
      "vantivLitleIbfMid" : "034878444356",
      "vantivLitlePbfMid" : "02495445",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "123456789"
     

 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"8021",
  "avgTicketPrice":"1000000",
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "1234567890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "4554554545",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@gmail.com",
  "principlePhoneNumber":"5555555555",
  "principleDateOfBirth":"04/05/1969",
 "principleAddress":{
 	"address1":"#788, Weston parkway",
 	"address2":"some landmark",
 	"city":"Orlando",
 	"state":"FL",
 	"zip":"34555"
 	}
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant" id="361e5560-a004-4e7a-a5d9-9b894ad380ae"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/${POST create merchant#Response#$['id']}</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f903419-e2cc-4c37-bc35-4a97f01ebad8" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${POST create merchant#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST add beneficial owners" id="f1bc3a96-db8e-4432-940d-41ee32912a5b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="POST add beneficial owners" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchant/${POST create merchant#Response#$['id']}/beneficialowner</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get beneficial owners for this merchant" id="1b7c2210-d1b2-4cdd-9393-543ea45563ec"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get beneficial owners for this merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchant/${POST create merchant#Response#$['id']}/beneficialowner</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get account details" id="4654b85a-7dfc-4563-8368-b6a5a4c420b2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get account details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218 </con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT account details" id="82d7866f-0cf0-4d89-a8a7-aa8d87001618"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT account details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218</con:endpoint><con:request>{
   "id" : 2560791218,
   "merchantName" : "Jakubs merchant 20624 2",
   "merchantLegalName" : "Legal name WWw",
   "doingBusinessAs" : "jakubs",
   "externalMerchantId" : 20624,
   "merchantAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074wewew",
      "country" : "US"
   },
   "remitToAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074",
      "country" : "US",
      "merchantName" : "Test"
   },
  
   "oauthToken" : null,
   "acceptedCreditCards" : [
      "AMEX",
      "DISCV",
      "MCARD",
      "VISA"
   ],
   "phoneNumber" : "1234567891",
   "customerServicePhoneNumber" : "1234567891",
   "maxTransactionLimit" : 59996,
   "accountDetails" : {
      "elementAccountId" : "1011643",
      "elementAcceptorId" : "874767013",
      "elementTerminalId" : "0060810007",
      "elementAccountToken" : "5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001",
      "vantivIbmMid" : "4445018686923",
      "routingNumber" : "545455112",
      "accountNumber" : "5156161",
      "accountType" : "C",
      "amexSid" : "555",
      "vantivLitleIbfMid" : "0123456",
      "vantivLitlePbfMid" : "01234566",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "200000000",
      "paypalCardNotPresentUsername" : null,
      "paypalCardNotPresentPassword" : "",
      "paypalCardPresentUsername" : null,
      "paypalCardPresentPassword" : "",
      "paypalPartner" : null,
      "qbmsMerchantTicket" : null,
      "qbmsBatchCloseTime" : null,
      "qbmsBatchCloseTimeOfDay" : null,
      "qbpayRealmId" : null,
      "qbpayRefreshToken" : null,
      "qbpayRefreshTokenExpiry" : null
   },
   "contractedRates" : {
      "perTransAuthFee" : 4,
      "perTransRefundFee" : 3,
      "qualifiedUpperBoundaryPercent" : 0.5,
      "qualifiedFeePercent" : 7.155,
      "midQualifiedUpperBoundaryPercent" : 2.0,
      "midQualifiedFeePercent" : 11.555,
      "nonQualifiedUpperBoundaryPercent" : 3.0,
      "nonQualifiedFeePercent" : 22.555,
      "amexPercent" : 5.0,
      "suppressFeeSettlement" : false
   },
   "status" : "ACTIVE",
   "vantivBoardingData" : {
      "merchantStatus" : "OPEN",
      "sicMccCode" : "8041",
      "avgTicketPrice" : 1900,
      "swipePercent" : null,
      "voucherFlag" : "MAG_STRIPE"
   },
   "fraudVars" : {
      "duplicateDollarTxCount" : 0,
      "duplicateDollarTxAmount" : 0,
      "excessiveVolumeIncreasePercent1vs90" : 100.0,
      "excessiveVolumeIncreaseAmount1vs90" : 0,
      "excessiveVolumeIncreasePercent1vs30" : 100.0,
      "excessiveVolumeIncreaseAmount1vs30" : 0,
      "excessiveVolumeIncreasePercent1vs7" : 100.0,
      "excessiveVolumeIncreaseAmount1vs7" : 0,
      "excessiveVolumeIncreasePercent7vs90" : 100.0,
      "excessiveVolumeIncreaseAmount7vs90" : 0,
      "dailyUnmatchedCreditsCount" : 0,
      "dailyUnmatchedCreditsAmount" : 0,
      "sameCardTxCount" : 0,
      "sameCardTxAmount" : 0,
      "totalDailyForeignCardCount" : 0,
      "totalDailyForeignCardTxAmount" : 0,
      "txLimitToAlert" : 0,
      "singleForcedTxAmount" : 0,
      "aggregateForcedTxAmount" : 0,
      "staleTxDays" : 0
   },
   "deactivatedDate" : null,
   "customerAccountNumber" : "",
   "alsoKnownAsName" : "",
   "primaryContactName" : "twst",
   "primaryContactEmail" : "test@gmail.com",
   "primaryContactPhoneNumber" : "3878377373",
   "legalEntityAddress" : {
      "address1" : null,
      "address2" : null,
      "city" : null,
      "state" : null,
      "zip" : null,
      "country" : "US"
   },
   "legalEntityPhoneNumber" : "",
   "principleDetails" : {
      "principleName" : "",
      "principleTitle" : "",
      "principleSocialSecurityNumber" : "",
      "principleDateOfBirth" : "",
      "principleEmail" : "",
      "principlePhoneNumber" : "",
      "principleAddress" : {
         "address1" : null,
         "address2" : null,
         "city" : null,
         "state" : null,
         "zip" : null,
         "country" : "US"
      }
   }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="send mbf" id="4cdd0bd8-ec9d-4979-a992-7658fea6b36b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="send mbf" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v2/application/rcm/merchants/2560805677/vantiv/mbf</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get account details as implementation" id="517e5d88-382a-4d0f-b9e8-b1855f585398"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get account details as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218 </con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT account details as implementation" id="4f7d3234-ed29-44e6-aeeb-a8f6587f2916"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT account details as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218</con:endpoint><con:request>{
   "id" : 2560791218,
   "merchantName" : "Jakubs merchant 20624 2",
   "merchantLegalName" : "Legal name WWw",
   "doingBusinessAs" : "jakubs",
   "externalMerchantId" : 20624,
   "merchantAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074wewew",
      "country" : "US"
   },
   "remitToAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074",
      "country" : "US",
      "merchantName" : "Test"
   },
  
   "oauthToken" : null,
   "acceptedCreditCards" : [
      "AMEX",
      "DISCV",
      "MCARD",
      "VISA"
   ],
   "phoneNumber" : "1234567891",
   "customerServicePhoneNumber" : "1234567891",
   "maxTransactionLimit" : 59996,
   "accountDetails" : {
      "elementAccountId" : "1011643",
      "elementAcceptorId" : "874767013",
      "elementTerminalId" : "0060810007",
      "elementAccountToken" : "5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001",
      "vantivIbmMid" : "",
      "routingNumber" : "",
      "accountNumber" : "***6161",
      "accountType" : "",
      "amexSid" : "555",
      "vantivLitleIbfMid" : "",
      "vantivLitlePbfMid" : "",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "200000000",
      "paypalCardNotPresentUsername" : null,
      "paypalCardNotPresentPassword" : "",
      "paypalCardPresentUsername" : null,
      "paypalCardPresentPassword" : "",
      "paypalPartner" : null,
      "qbmsMerchantTicket" : null,
      "qbmsBatchCloseTime" : null,
      "qbmsBatchCloseTimeOfDay" : null,
      "qbpayRealmId" : "3498394",
      "qbpayRefreshToken" : "23948043",
      "qbpayRefreshTokenExpiry" : null
   },
   "contractedRates" : {
      "perTransAuthFee" : 4,
      "perTransRefundFee" : 3,
      "qualifiedUpperBoundaryPercent" : null,
      "qualifiedFeePercent" : 7.155,
      "midQualifiedUpperBoundaryPercent" : null,
      "midQualifiedFeePercent" : 11.555,
      "nonQualifiedUpperBoundaryPercent" : null,
      "nonQualifiedFeePercent" : 22.555,
      "amexPercent" : 5.0,
      "suppressFeeSettlement" : false
   },
   "status" : "ACTIVE",
   "vantivBoardingData" : {
      "merchantStatus" : "OPEN",
      "sicMccCode" : "8041",
      "avgTicketPrice" : 1900,
      "swipePercent" : null,
      "voucherFlag" : "MAG_STRIPE"
   },
   "fraudVars" : {
      "duplicateDollarTxCount" : 0,
      "duplicateDollarTxAmount" : 0,
      "excessiveVolumeIncreasePercent1vs90" : 100.0,
      "excessiveVolumeIncreaseAmount1vs90" : 0,
      "excessiveVolumeIncreasePercent1vs30" : 100.0,
      "excessiveVolumeIncreaseAmount1vs30" : 0,
      "excessiveVolumeIncreasePercent1vs7" : 100.0,
      "excessiveVolumeIncreaseAmount1vs7" : 0,
      "excessiveVolumeIncreasePercent7vs90" : 100.0,
      "excessiveVolumeIncreaseAmount7vs90" : 0,
      "dailyUnmatchedCreditsCount" : 0,
      "dailyUnmatchedCreditsAmount" : 0,
      "sameCardTxCount" : 0,
      "sameCardTxAmount" : 0,
      "totalDailyForeignCardCount" : 0,
      "totalDailyForeignCardTxAmount" : 0,
      "txLimitToAlert" : 0,
      "singleForcedTxAmount" : 0,
      "aggregateForcedTxAmount" : 0,
      "staleTxDays" : 0
   },
   "deactivatedDate" : null,
   "customerAccountNumber" : "",
   "alsoKnownAsName" : "",
   "primaryContactName" : "twst",
   "primaryContactEmail" : "test@gmail.com",
   "primaryContactPhoneNumber" : "3878377373",
   "legalEntityAddress" : {
      "address1" : null,
      "address2" : null,
      "city" : null,
      "state" : null,
      "zip" : null,
      "country" : "US"
   },
   "legalEntityPhoneNumber" : "",
   "principleDetails" : {
      "principleName" : "",
      "principleTitle" : "",
      "principleSocialSecurityNumber" : null,
      "principleDateOfBirth" : "",
      "principleEmail" : "",
      "principlePhoneNumber" : "",
      "principleAddress" : null
   }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>6848a849-0135-4043-81f6-b30a2688b76c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="ef720d84-bd78-4fc8-9f7a-155729b89a49" name="gateway proxy"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="1d65619d-c509-4957-a77b-2614d71eaf2d" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="dev NGO transactions" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="09d7d283-6d57-492f-933e-0026d7926afc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"f6932a2a-f61e-4efa-97de-3"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"80537549"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST token-NGO" id="9298031c-03f9-446f-9488-82ab57d86e26"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"PayApiClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize" id="f3c87f48-c3ab-4dae-b589-b3a9ba035282"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4de54c-a086-4ed9-941b-8214ee65e918" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Authorized without security" id="51cc7e45-533c-4644-addd-202c01a4d6ee"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Authorized without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get order id of authorize" id="852e4e9c-b273-496f-bc14-a4ccc75f75d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id of authorize" id="bfdb42a8-e0d5-43d7-b869-4eb70f5ea2a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Valid capture" id="ee550e74-f01b-4d95-b5f9-b76f27ba7f1a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 9000,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f1e7bb97-3502-41b2-84e9-721a0dd53397" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b276d0fe-5bf3-490a-8f35-f84da6eedcf1" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16708a3f-01f7-45f1-b7b5-2f7045e4a724" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize 2" id="4a41e70e-168a-43d1-91aa-6653ed186fc1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be398119-2f44-48b6-a484-3dd6126b7852" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get order id of authorize" id="b3689d43-0a99-4db0-b626-89a8cfdb55c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id of authorize" id="474dea1a-9c3a-4a97-bffb-8543989586c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Capture without security" id="a1eb4aff-4944-47e5-80ff-1102f09c9667"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Capture without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true,

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12ac81c2-45ba-4286-9bd2-d7352157aa3a" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Partial valid capture" id="e874df69-1de1-4666-ba26-9bdd9247eb63"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c57968cd-9a93-4dd2-b13b-60bc36a69af0" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale" id="86184344-de39-4404-aaca-e9bd7e54fc10"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d65cf776-4445-4f84-9037-79e3441f8595" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="224ce780-a887-4fd8-83a2-d10f7bdb2b80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Sale without security" id="68b4debc-851f-4418-95b9-380591c725db"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Sale without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1660b026-ebce-4a9a-a3f7-058a869c79f8" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Unauthorized capture" id="8c3eb002-01de-4f39-b632-971e34f5fd37"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Unauthorized capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/capture</con:endpoint><con:request>{
"orderId":"29349093204-jh9324-adj",
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":"928459045",
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void without security" id="d0cc9368-5d5e-4b5b-bdcd-c8340be62799"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/void</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"externalTransactionId":${Properties#externalTransactionId}

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48f45075-f221-4c79-8e2d-b548ea260b9b" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id" id="d29b7e37-adab-4b8e-943c-363c77e2b177"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale" id="42fe435e-9507-4054-83e7-e541275b5410"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98e34ee8-8b02-4b1d-9192-ca3eefed5004" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale again" id="4c53d8b5-e530-422c-8224-1fa1706269a5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale again" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7ca7118-c256-4e09-b423-7603655f5b02" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a585977-42be-44d5-89c1-d66508f76a84" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b0108ef-f3a3-48ed-ba45-c14da64bb88a" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6dbccaa3-e95c-4a61-bf8e-12eb5a0206cf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 2" id="b166d75c-03ab-44cf-94f1-eec08f659fdb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7900,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea3c095a-0b49-474d-b9bc-d674f75d057f" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id for refund" id="90bd53f9-77b8-4aef-b4db-f486c9784d07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="7384a688-58f6-4109-9fea-29bb91996e70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Credit without security" id="a99c1380-08d1-42d0-ac4f-a9c32fd4ee67"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Credit without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"transactionAmount":7900,
"externalTransactionId":${Properties#externalTransactionId}
}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c17c62d1-5ceb-41d4-a3ba-1b57754c0db8" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Full credit" id="0c520ed5-729f-47b1-9183-f6587e130e4b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Full credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 7900
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67829a5a-7b18-45d6-93a2-5b18139c4bb8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90e55cbd-4c6d-4fcd-8b7c-7908cfb4b516" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 3" id="838cef83-d266-42a6-818c-31dd58afabe4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4111111111111111",
"expirationDate": "1219",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43b8347f-32b2-4789-a1da-ef7efa65fdaf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get  sale order id for refund" id="b19a7b56-10a7-4b9e-92ef-01d0d3064446"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="63f37b91-645c-4365-8a70-56934fe03a3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Refund more than the payment" id="9f8e10b6-165c-4d95-9218-da6a6c55c56c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Refund more than the payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 8200
  
  }</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cde80728-e465-4185-8b60-ee579febfa10" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df0413e3-7c00-420d-9d66-0104029a34e4" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75d5de10-e902-46dd-9379-abe481af5b55" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ae7c79-815e-4e0b-a122-aac4cd64e501" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 4" id="ce8f69e9-c358-4109-a727-4f3985fbdf2f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 4" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 1000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="388a07f5-5828-4cbc-bc12-1d4993425456" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get  sale order id for refund" id="56813240-a62c-4554-a6f1-9c7552eea9e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Get transaction id for credit" id="003fdc18-d108-4630-bdc4-200b1db5bd4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Partial credit" id="3a9f57d4-1bba-4751-88da-125268245ebe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 700
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0af713d2-edcc-4c1e-be95-48c9ddad30b4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Notify" id="a7e0ae25-f757-4c65-8db7-e64d968989d3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="1e9e2140-8d94-4661-b348-c052746b4375" name="Notify" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/notify</con:endpoint><con:request>{
  "applicationID": "83984",
  "applicationName": "terminal",
  "approvalNumber": "aid90",
  
  "card": {
    "accountNumber": "4111111111111111",
    "bin": "411111",
    "cardPresent": true,
    "cvvNumber": "string",
    "expirationDate": "string",
    "trackData": ";4111111111111111=17081014764094900000?",
    "type": "MC"
  },

  "customerId": 20624,
  "emvTags": "0",
"hostResponseMessage": "Approved",
  "initialTransactionInSeries": true,
  "message": "This is a POS payment",
  "mfGatewayConsumer": {
    "accountNumber": "KJHK890",
    "consumerId": "8990",
    "consumerName": "JANE"
  },
  "mfGatewayMerchant": {
   
    "paymentSource": "TRML"

  },
  
  
  "paymentMethod": "POS",
  "paymentType": "SALE",
  "pinVerified": "true",
  "requestType": "string",
  
  "transactionAmount": 22,
  "transactionType": "SALE"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="691010fe-0705-4673-94ee-3eaaa7bf8664" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c12b785-9f2c-4fe2-a035-a26d710e06bd" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"This is a POS payment"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token for plus client" id="5ee11827-c2fa-4bc3-bd03-959047aef3d0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="6286a290-6751-4f05-bd7d-ec264c4302b6" name="POST token for plus client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/d1fe81f0-b057-493f-b320-0c681726aad4/tokens</con:endpoint><con:request>{
  "clientId": "TestAPICustomerClient2V1",
  "clientSecret":"vSZXXyILiWIbAJXOIyeUBofQqC2Ga0BwMqprb7YAuizfpFCphmKANV37eowGcDPW",
  "scope": "api:plus"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="0742591b-4990-4887-8b58-1e58d49d243a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale for a non-pay client" id="88d6a138-d45b-4dc9-84a0-98d4a9c4fbb1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale for a non-pay client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token for plus client#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token for plus client#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST sale with an invalid token" id="d7198a4c-2a7b-4b8f-9d23-9385f2a551bf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale with an invalid token" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-Pay Customer" id="34180b63-fbc9-4b21-a730-13100d6926f2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-Pay Customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"NGPayTeamTestClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for Pay Customer using secret for NGO" id="8cc0f59b-b9d8-48ef-a0b9-901d8909859a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for Pay Customer using secret for NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for NGO using secret of pay customer" id="a5a970c1-191d-41e6-a1f5-b2843170d6c6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for NGO using secret of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for Pay Customer using NGO uuid" id="46188e20-639c-460d-b845-9c7238e03c3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for Pay Customer using NGO uuid" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url for ngo" id="bac96b59-71e5-4e4b-8fbc-70202babb652"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url for ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://webhook.site/bb85d28a-cd86-4108-8e0f-caee0b5b1ba8"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  for ngo using token of pay customer" id="efd0b355-6d7b-408d-bfe5-fc524af0b9fe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  for ngo using token of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  with ngo's token for pay customer" id="c589d6eb-77e1-42b9-9c18-a33686648a9e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  with ngo's token for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for NGO" id="0d181a90-4a6f-4465-bac8-3493cd160557"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="e2a25cfd-4047-477c-8e52-8d20d4617bfe" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>${Store callback url for ngo#RawRequest#$['callbackURL']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for ngo using token of pay customer" id="4bda39f8-be5d-479b-8ed5-df98ff970e1f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for ngo using token of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url with ngo's token for pay customer" id="4b2bece0-1cd6-4ea5-87cb-d43290c9d7b2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url with ngo's token for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token as system" id="724470f1-0dc7-44df-b52b-7fd33f1e59f3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="02a5443f-0904-4c6f-9554-65e988e5d51f" name="POST token as system" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://d1-ping-01.dev.medfusion.net/as/token.oauth2?grant_type=client_credentials&amp;client_id=SystemJwtValidationClientV1&amp;client_secret=lWiNlRcD1snTlSNXmi0GfGFYRHmNtf1iFoawSKAL4M1kICsALm1pF4gwwvEddpIF</con:endpoint><con:request/><con:assertion type="JsonPath Existence Match" id="82450bed-afbf-4f77-b5cc-1007e8f73650" name="Check for existence of [access_token]"><con:configuration><path>$['access_token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="986a8037-d7d4-416b-8cc4-ad0bf0e7c214" name="Match content of [token_type]"><con:configuration><path>$['token_type']</path><content>"Bearer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="48a26895-5e2a-4443-a85a-ddde15b0626c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get callback url in MP as system user" id="32f2fb8c-688c-4f42-8cd7-e5b15c38ef40"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="97a030c4-d043-44af-93c9-a9b75d85443a" name="Get callback url in MP as system user" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/apiCustomer/87b7e73a-ddab-4849-9af9-467b32c95ef2/getCallback</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="b9aa6c43-3679-4f05-bc58-bb45a12457f0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="6f14b396-cd57-49bf-bfe5-e23a4f5002f9" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>${Store callback url for ngo#RawRequest#$['callbackURL']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get customeruuid for ngpay merchant" id="9c7c9f8d-5c0e-4922-a02c-b676f5919836"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="14f3c0c9-cb85-4542-a0e7-1a500170fe28" name="Get customeruuid for ngpay merchant" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/merchants/2560791218/apiCustomer</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="13d7007a-c304-499c-9997-dd71be41dac2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get customeruuid for ngo merchant" id="8c95f212-f951-4180-a08c-6e5283e46764"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="14f3c0c9-cb85-4542-a0e7-1a500170fe28" name="Get customeruuid for ngo merchant" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/merchants/2560807838/apiCustomer</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="13d7007a-c304-499c-9997-dd71be41dac2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="6d16b107-20da-4503-94d9-72b8317d112b" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>87b7e73a-ddab-4849-9af9-467b32c95ef2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get customeruuid for pay customer merchant" id="2ea5acaf-e199-42f3-8445-dc12feb603ef"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="14f3c0c9-cb85-4542-a0e7-1a500170fe28" name="Get customeruuid for pay customer merchant" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/merchants/2560807797/apiCustomer</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="13d7007a-c304-499c-9997-dd71be41dac2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="9cdddc4a-9efc-4577-a749-f287c98773b3" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>75164da9-5747-449f-be45-c2e28f3ff77b</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize-2nd merchant" id="d9676303-b054-4243-a2c5-02f0231af16f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize-2nd merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807877/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4de54c-a086-4ed9-941b-8214ee65e918" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale-2nd merchant" id="2add87d8-cfa6-41d5-b7e9-3fc52d934094"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale-2nd merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807877/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4de54c-a086-4ed9-941b-8214ee65e918" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Copy of Valid authorize" id="68fe8532-8078-429a-9c29-16db43532187"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Copy of Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "paymentSource": "VCS"
  },
  "billToAddress": {
    "zipCode": "92075",
    "lastName": "Patient",
    "country": "US",
    "city": "SOLANA BEACH",
    "companyName": "Some company",
    "middleInitial": null,
    "phone": "",
    "name": "ACTIVEPREGNANCY, ANDREY ss",
    "addressLine1": "123 PATIENTFORSELENIUM TEST ST",
    "addressLine2": "",
    "addressLine3": null,
    "state": "CA",
    "email": ""
  },
  "transactionAmount": 10,
  "mfGatewayConsumer": {
    "accountNumber": "23345",
    "consumerName": "ACTIVEPREGNANCY, ANDREY ss"
  },
  "initialTransactionInSeries": false,
  "card": {
    "cvvNumber": "231",
    "bin": "496004",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData": null,
    "expirationDate": "1225",
    "cardPresent": false
  }
}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4de54c-a086-4ed9-941b-8214ee65e918" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>e751e354-df4c-40c2-b898-79249a214ecd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59461958-95ff-41df-9aab-20aa5ca695c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0309204-dd7c-4775-9019-33c379cb347e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8028b69c-e770-46c5-9911-a3c276444d76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320019ee-2d3a-45d5-aa28-3673c751c9ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39ab582d-9063-4464-8173-f48c8d3c02da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e1afe42-fac6-40ee-9ec9-fd3eca680aef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e793bcc6-d14d-4830-b497-f5ae1a3244d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d29b7e37-adab-4b8e-943c-363c77e2b177</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c53d8b5-e530-422c-8224-1fa1706269a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90bd53f9-77b8-4aef-b4db-f486c9784d07</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b19a7b56-10a7-4b9e-92ef-01d0d3064446</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce8f69e9-c358-4109-a727-4f3985fbdf2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56813240-a62c-4554-a6f1-9c7552eea9e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>003fdc18-d108-4630-bdc4-200b1db5bd4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee550e74-f01b-4d95-b5f9-b76f27ba7f1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bfdb42a8-e0d5-43d7-b869-4eb70f5ea2a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c589d6eb-77e1-42b9-9c18-a33686648a9e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>724470f1-0dc7-44df-b52b-7fd33f1e59f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e9d8d3fb-4f87-474d-8825-631642219825" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="dev Pay Customer" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="55f091ed-7d6b-4175-85ef-7ec1c77ced39"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"d2937b41-b43a-478e-90fb-c"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"63276399"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST token-Pay customer" id="1e63627a-67c4-4e67-882b-960521eb4504"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-Pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"NGPayTeamTestClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize" id="7bfe6880-f5b6-43a3-8c60-08a9013c0219"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4de54c-a086-4ed9-941b-8214ee65e918" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Authorized without security" id="ba469d25-1edb-4d26-addc-2f989bf6aea6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Authorized without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get order id of authorize" id="55381639-950c-4339-9087-2277d7c825d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id of authorize" id="6f23f77f-a1a4-4025-86ba-ce42d571efca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Valid capture" id="40764402-22e3-435f-9f92-342fc8d87569"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 9000,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f1e7bb97-3502-41b2-84e9-721a0dd53397" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b276d0fe-5bf3-490a-8f35-f84da6eedcf1" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16708a3f-01f7-45f1-b7b5-2f7045e4a724" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize 2" id="ecccf656-e96b-4712-98c4-570a1306d15d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be398119-2f44-48b6-a484-3dd6126b7852" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get order id of authorize" id="62b81ca2-5464-4e15-bfa4-f7108ff80d80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id of authorize" id="300eb7fe-73b8-4bff-9ec1-30a54d9b6310"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Capture without security" id="cb2e59c0-08ed-46cb-ab64-b68ee2dddaf2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Capture without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true,

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12ac81c2-45ba-4286-9bd2-d7352157aa3a" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Partial valid capture" id="1c4ea0a0-4e6a-4bc4-9a40-3e960d6a8aa7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c57968cd-9a93-4dd2-b13b-60bc36a69af0" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale" id="342f1f87-fe3a-4a21-9f5b-293eafeb2dd1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d65cf776-4445-4f84-9037-79e3441f8595" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="d7ae6819-0a79-4168-ac76-0cf7017d826b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Sale without security" id="820fa96d-17b1-491e-9b1d-68103087aa2c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Sale without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1660b026-ebce-4a9a-a3f7-058a869c79f8" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Unauthorized capture" id="87dc17f3-ce05-4679-ab8d-77f0609456d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Unauthorized capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/capture</con:endpoint><con:request>{
"orderId":"29349093204-jh9324-adj",
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":"928459045",
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void without security" id="d32e45b7-1d6a-4d16-9766-12d930a4405b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/void</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"externalTransactionId":${Properties#externalTransactionId}

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48f45075-f221-4c79-8e2d-b548ea260b9b" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id" id="606701a1-8f6e-48b3-84ac-c7048aa7c740"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale" id="523586bd-95a3-458a-b312-71d5dbbae0f2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98e34ee8-8b02-4b1d-9192-ca3eefed5004" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale again" id="bd4a4377-49e9-43ec-97ad-69a5e78b6dcc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale again" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7ca7118-c256-4e09-b423-7603655f5b02" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a585977-42be-44d5-89c1-d66508f76a84" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b0108ef-f3a3-48ed-ba45-c14da64bb88a" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6dbccaa3-e95c-4a61-bf8e-12eb5a0206cf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 2" id="78176656-6fe9-4062-8928-e9f2090b9fdb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7900,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea3c095a-0b49-474d-b9bc-d674f75d057f" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id for refund" id="398c9843-d781-4212-a7a3-5ed29fe19dd4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="b5ba830d-2922-4498-8d4e-369cb74c1241"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Credit without security" id="4191aec9-f2ee-45ec-9f9a-989b6115a37e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Credit without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/credit</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"transactionAmount":7900,
"externalTransactionId":${Properties#externalTransactionId}
}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c17c62d1-5ceb-41d4-a3ba-1b57754c0db8" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Full credit" id="b07e2bd3-3b61-43ec-bd37-5233936c3119"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Full credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 7900
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67829a5a-7b18-45d6-93a2-5b18139c4bb8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90e55cbd-4c6d-4fcd-8b7c-7908cfb4b516" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 3" id="7c4ef95b-e92e-483a-8e89-430103a0db72"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43b8347f-32b2-4789-a1da-ef7efa65fdaf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get  sale order id for refund" id="1c038323-b8cb-42ea-b547-6306e059ddb3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="64166d1d-35c1-4d81-b3b2-8b1bec4be91f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Refund more than the payment" id="741d8109-61c7-483a-9554-7610126b6af9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Refund more than the payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 8200
  
  }</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cde80728-e465-4185-8b60-ee579febfa10" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df0413e3-7c00-420d-9d66-0104029a34e4" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75d5de10-e902-46dd-9379-abe481af5b55" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ae7c79-815e-4e0b-a122-aac4cd64e501" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 4" id="2659b6be-4278-48a2-9829-ecf08ff15a12"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 4" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="388a07f5-5828-4cbc-bc12-1d4993425456" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get  sale order id for refund" id="a2897767-efc9-4529-b774-dab2fd9d08e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Get transaction id for credit" id="47bb37af-a77c-42a1-90bd-cf8352adba93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Partial credit" id="7fdebc3f-85b2-4113-8de1-14af0eaa6f76"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 700
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0af713d2-edcc-4c1e-be95-48c9ddad30b4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Notify" id="fb89918c-5383-4131-a3c0-8136599da881"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="1e9e2140-8d94-4661-b348-c052746b4375" name="Notify" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/notify</con:endpoint><con:request>{
  "applicationID": "83984",
  "applicationName": "terminal",
  "approvalNumber": "aid90",
  
  "card": {
    "accountNumber": "4111111111111111",
    "bin": "411111",
    "cardPresent": true,
    "cvvNumber": "string",
    "expirationDate": "string",
    "trackData": ";4111111111111111=17081014764094900000?",
    "type": "MC"
  },

  "customerId": 20624,
  "emvTags": "0",
"hostResponseMessage": "Approved",
  "initialTransactionInSeries": true,
  "message": "This is a POS payment",
  "mfGatewayConsumer": {
    "accountNumber": "KJHK890",
    "consumerId": "8990",
    "consumerName": "JANE"
  },
  "mfGatewayMerchant": {
   
    "paymentSource": "TRML"

  },
  
  
  "paymentMethod": "POS",
  "paymentType": "SALE",
  "pinVerified": "true",
  "requestType": "string",
  
  "transactionAmount": 22,
  "transactionType": "SALE"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="691010fe-0705-4673-94ee-3eaaa7bf8664" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c12b785-9f2c-4fe2-a035-a26d710e06bd" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"This is a POS payment"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token for plus client" id="1481db57-3a55-48fd-b97b-6adde66bb629"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="6286a290-6751-4f05-bd7d-ec264c4302b6" name="POST token for plus client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/d1fe81f0-b057-493f-b320-0c681726aad4/tokens</con:endpoint><con:request>{
  "clientId": "TestAPICustomerClient2V1",
  "clientSecret":"vSZXXyILiWIbAJXOIyeUBofQqC2Ga0BwMqprb7YAuizfpFCphmKANV37eowGcDPW",
  "scope": "api:plus"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="0742591b-4990-4887-8b58-1e58d49d243a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale for a non-pay client" id="c61f2d44-7a61-4feb-b883-a3cf711305fc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale for a non-pay client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token for plus client#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token for plus client#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST sale with an invalid token" id="546b00ac-23d9-489b-abea-fdc9e6d56620"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale with an invalid token" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/merchant/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-NGO" id="65d2c634-29c0-45ae-8482-aa1ff9829dac"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>PayApiClient</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST token for Pay Customer using secret for NGO" id="39ab903e-6e80-4758-93a1-e254bb1030a7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="Copy of POST token for Pay Customer using secret for NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST token for NGO using secret of pay customer" id="baf167d2-3832-4899-b335-b4e3132e4429"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="Copy of POST token for NGO using secret of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST token for Pay Customer using NGO uuid" id="5f19ceb5-487d-4088-8a18-5951ade21680"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="Copy of POST token for Pay Customer using NGO uuid" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url for Pay Customer" id="5b2f7296-6e87-4277-b9bd-a0676e61d5d8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url for Pay Customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://lalala-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  for pay customer using token of ngo" id="3445f78b-e8fe-43ea-befe-d1fdc374d577"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  for pay customer using token of ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  with pay customer token for ngo" id="d8762745-c36c-4689-902f-4bbc95238359"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  with pay customer token for ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for pay customer" id="045ca83d-3324-4e11-ae30-b51ecde0d235"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="224777da-4c6c-466b-9be1-7130613d8eea" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>${Store callback url for Pay Customer#RawRequest#$['callbackURL']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for pay customer using token of ngo" id="16aa4051-0e72-49e9-81ab-45d1d2457af2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for pay customer using token of ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url with pay customer token for ngo" id="9da2e89e-c1a7-4ffe-8bb5-ec8d20eb335b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url with pay customer token for ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>e751e354-df4c-40c2-b898-79249a214ecd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59461958-95ff-41df-9aab-20aa5ca695c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0309204-dd7c-4775-9019-33c379cb347e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8028b69c-e770-46c5-9911-a3c276444d76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320019ee-2d3a-45d5-aa28-3673c751c9ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39ab582d-9063-4464-8173-f48c8d3c02da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e1afe42-fac6-40ee-9ec9-fd3eca680aef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e793bcc6-d14d-4830-b497-f5ae1a3244d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d29b7e37-adab-4b8e-943c-363c77e2b177</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c53d8b5-e530-422c-8224-1fa1706269a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90bd53f9-77b8-4aef-b4db-f486c9784d07</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b19a7b56-10a7-4b9e-92ef-01d0d3064446</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce8f69e9-c358-4109-a727-4f3985fbdf2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56813240-a62c-4554-a6f1-9c7552eea9e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>003fdc18-d108-4630-bdc4-200b1db5bd4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee550e74-f01b-4d95-b5f9-b76f27ba7f1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bfdb42a8-e0d5-43d7-b869-4eb70f5ea2a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="fb7b0628-b11f-4fea-892b-4636d451de8d" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Dev ngpay" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="61ef8c6c-61a2-403c-9c11-cd354b44d9fc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"c497b3c2-4679-454d-b134-e"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"63274643"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST token-NGO" id="838b93fa-9d5e-49ff-a47f-d79a1e881c34"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"PayApiClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize" id="5973d581-7a95-4a92-bb37-056013128754"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale" id="925a32e3-a6c7-464c-8b80-30e42fd7d003"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale" id="435dde54-193c-49d9-9a15-49ffc0356353"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/256/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98e34ee8-8b02-4b1d-9192-ca3eefed5004" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale again" id="24f7ecf9-af5e-45b4-907e-589981c6358a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale again" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7ca7118-c256-4e09-b423-7603655f5b02" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a585977-42be-44d5-89c1-d66508f76a84" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b0108ef-f3a3-48ed-ba45-c14da64bb88a" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6dbccaa3-e95c-4a61-bf8e-12eb5a0206cf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 2" id="27f38d70-f659-41d5-925e-7fbc072bb343"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7900,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea3c095a-0b49-474d-b9bc-d674f75d057f" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id for refund" id="a0e8e06c-b96b-4df0-aa7c-d7c2ca65d63d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="8b90788e-a74e-47be-96ae-1f4ca4f3fab9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Credit without security" id="1decd137-5b88-4fdc-9b0e-acd04d1ce58d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Credit without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"transactionAmount":7900,
"externalTransactionId":${Properties#externalTransactionId}
}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c17c62d1-5ceb-41d4-a3ba-1b57754c0db8" name="Match content of [error]"><con:configuration><path>$['error']</path><content>"Unauthorized"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Full credit" id="f0d3683f-9a99-46a4-90cb-c4f6be636ab3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Full credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 7900
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67829a5a-7b18-45d6-93a2-5b18139c4bb8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90e55cbd-4c6d-4fcd-8b7c-7908cfb4b516" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 3" id="1b7fa0f0-03da-4724-97b5-804b7cd1da43"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43b8347f-32b2-4789-a1da-ef7efa65fdaf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get  sale order id for refund" id="0fb8c595-a65a-41b4-a65c-4aa18753cbbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="22fb4861-0dfb-4b36-bc1c-d0f207af5735"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Refund more than the payment" id="ec12eb42-7211-4b20-81e9-50c016dff55a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Refund more than the payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 8200
  
  }</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cde80728-e465-4185-8b60-ee579febfa10" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df0413e3-7c00-420d-9d66-0104029a34e4" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75d5de10-e902-46dd-9379-abe481af5b55" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ae7c79-815e-4e0b-a122-aac4cd64e501" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 4" id="81e52947-f69b-447d-a5ff-57f3d6e97748"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 4" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="388a07f5-5828-4cbc-bc12-1d4993425456" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get  sale order id for refund" id="5f4f76e4-85bf-4dd0-b8bb-c2e45114634e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Get transaction id for credit" id="bcd7faf4-e749-4027-983c-51ad2cb85be4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Partial credit" id="c946e53e-fd62-43de-b926-7138fe668ed9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 700
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0af713d2-edcc-4c1e-be95-48c9ddad30b4" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Notify" id="fe0e3883-1460-4f14-89a6-c8a5581abccf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="1e9e2140-8d94-4661-b348-c052746b4375" name="Notify" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/notify</con:endpoint><con:request>{
  "applicationID": "83984",
  "applicationName": "terminal",
  "approvalNumber": "aid90",
  
  "card": {
    "accountNumber": "4111111111111111",
    "bin": "411111",
    "cardPresent": true,
    "cvvNumber": "string",
    "expirationDate": "string",
    "trackData": ";4111111111111111=17081014764094900000?",
    "type": "MC"
  },

  "customerId": 20624,
  "emvTags": "0",
"hostResponseMessage": "Approved",
  "initialTransactionInSeries": true,
  "message": "This is a POS payment",
  "mfGatewayConsumer": {
    "accountNumber": "KJHK890",
    "consumerId": "8990",
    "consumerName": "JANE"
  },
  "mfGatewayMerchant": {
   
    "paymentSource": "TRML"

  },
  
  
  "paymentMethod": "POS",
  "paymentType": "SALE",
  "pinVerified": "true",
  "requestType": "string",
  
  "transactionAmount": 22,
  "transactionType": "SALE"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="691010fe-0705-4673-94ee-3eaaa7bf8664" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c12b785-9f2c-4fe2-a035-a26d710e06bd" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"This is a POS payment"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token for plus client" id="c2f7e6ef-6141-4430-989d-486d4b3e8764"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="6286a290-6751-4f05-bd7d-ec264c4302b6" name="POST token for plus client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/d1fe81f0-b057-493f-b320-0c681726aad4/tokens</con:endpoint><con:request>{
  "clientId": "TestAPICustomerClient2V1",
  "clientSecret":"vSZXXyILiWIbAJXOIyeUBofQqC2Ga0BwMqprb7YAuizfpFCphmKANV37eowGcDPW",
  "scope": "api:plus"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="0742591b-4990-4887-8b58-1e58d49d243a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale for a non-pay client" id="50648116-9caf-4ba9-8eba-a4621b3a471f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale for a non-pay client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token for plus client#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token for plus client#Response#$['token']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST sale with an invalid token" id="956a921d-fb89-4c40-a3c9-538cc934cf86"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale with an invalid token" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI2OTA0MjYsInNjb3BlIjpbImFwaTpwYXkiXX0.Gu0C_00rE2bvAmqaxPpIwrGA8nH-e0FmkjmLOvPaEGA</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-Pay Customer" id="f00f7269-38c8-4dd4-aac5-3806ced00bd7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-Pay Customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"NGPayTeamTestClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for Pay Customer using secret for NGO" id="2a76c47b-e692-49d6-aac2-01bbeb2fb5ad"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for Pay Customer using secret for NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for NGO using secret of pay customer" id="01705a9f-23ac-4869-9ebe-cedc90a2edce"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for NGO using secret of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST token for Pay Customer using NGO uuid" id="a2997479-cf3a-4a96-a9ec-5b023486b338"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token for Pay Customer using NGO uuid" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>e751e354-df4c-40c2-b898-79249a214ecd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59461958-95ff-41df-9aab-20aa5ca695c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0309204-dd7c-4775-9019-33c379cb347e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8028b69c-e770-46c5-9911-a3c276444d76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320019ee-2d3a-45d5-aa28-3673c751c9ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39ab582d-9063-4464-8173-f48c8d3c02da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e1afe42-fac6-40ee-9ec9-fd3eca680aef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e793bcc6-d14d-4830-b497-f5ae1a3244d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d29b7e37-adab-4b8e-943c-363c77e2b177</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c53d8b5-e530-422c-8224-1fa1706269a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90bd53f9-77b8-4aef-b4db-f486c9784d07</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b19a7b56-10a7-4b9e-92ef-01d0d3064446</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce8f69e9-c358-4109-a727-4f3985fbdf2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56813240-a62c-4554-a6f1-9c7552eea9e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>003fdc18-d108-4630-bdc4-200b1db5bd4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee550e74-f01b-4d95-b5f9-b76f27ba7f1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bfdb42a8-e0d5-43d7-b869-4eb70f5ea2a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7c4489d8-ddfa-46d4-8834-77a6057a4046" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Dev3 AWS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="9d63c736-1088-4a06-bf0e-0c322b2aa133"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"4c506f4e-0917-49b2-b309-0"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"64312506"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST token-NGO" id="ec6959be-8a7e-4b39-b9d5-844d914a5ada"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"PayApiClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize" id="9b6019ff-2ca0-4a66-ba47-8ecc45fa27d5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1358407-1a78-41ff-96d5-fc41c28ba959" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Authorized without security" id="d19c5564-b46c-4df2-99f9-b4a9aa33710f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Authorized without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c82ee59e-a2e0-494f-8767-189219e35186" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Unauthorized request"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJUZXN0QVBJQ3VzdG9tZXJDbGllbnQyVjEiLCJleHAiOjE2MDI3MDkwOTUsInNjb3BlIjpbImFwaTpwYXRpZW50LWNsaW5pY2FsLWRhdGEiXX0.DYSZwvl4jJYcyxEJBLv-94ZjOSctM9egK4iIoHMoQuY</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJUZXN0QVBJQ3VzdG9tZXJDbGllbnQyVjEiLCJleHAiOjE2MDI3MDkwOTUsInNjb3BlIjpbImFwaTpwYXRpZW50LWNsaW5pY2FsLWRhdGEiXX0.DYSZwvl4jJYcyxEJBLv-94ZjOSctM9egK4iIoHMoQuY</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get order id of authorize" id="9d71e6e4-693a-4363-8c5f-a299779b40ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id of authorize" id="c43deeec-0c8c-4ebd-a028-50e2fc7ff6eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Valid capture" id="9f25779b-924d-4162-9292-0dafd9d9e423"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 9000,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f1e7bb97-3502-41b2-84e9-721a0dd53397" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="615afdc6-e90f-4503-92e0-3761e576398b" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize 2" id="a2c77751-67f2-4dbb-a23f-5ea82d1e0bb2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d09ab603-0dcf-4abb-bfbd-35de6d8c88a2" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get order id of authorize" id="e63a345a-8ab7-4083-9e6d-a992392fa20d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id of authorize" id="a835b2b6-1d70-4601-bcbf-b1191c5b63fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid authorize 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid authorize 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Capture without security" id="a8276496-661d-433f-94f6-3c9fbf6bea0d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Capture without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true,

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f2c40b2-2ea9-4761-8b70-f0c6c57f32be" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Unauthorized request"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Partial valid capture" id="57804e44-529a-428b-b161-12b763e55bb0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial valid capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/merchant/2560807838/capture</con:endpoint><con:request>{
"orderId":${Properties#orderId},
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":${Properties#externalTransactionId},
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac2bd26a-0030-4501-a8ce-07edf6127bea" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale" id="57c14f6a-cd81-44b9-912c-0361305560a6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44a5fffa-907a-4061-9880-55fde7e2f264" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="df0e1322-3bed-4241-9b70-22363efd882f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Sale without security" id="df913c63-9b57-436a-88f6-ff422518edf4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Sale without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c06c8d7a-db2a-42c8-a09b-ec447a80a0bf" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Unauthorized request"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Unauthorized capture" id="3fac4e54-a501-4dde-a6c1-47e3fb1958c7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Unauthorized capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/capture</con:endpoint><con:request>{
"orderId":"29349093204-jh9324-adj",
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"amount": 900,
"externalTransactionId":"928459045",
"initialTransactionInSeries":true

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void without security" id="43c718d3-4a66-4d95-a2c4-db4d1c9f157d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/void</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"externalTransactionId":${Properties#externalTransactionId}

}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f3ef910-a343-4e88-9718-bfd8650ff49e" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Unauthorized request"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id" id="d5564f1f-0a4c-40c2-baa8-85650a3d85ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale" id="59f6d09f-1ef6-41e3-9d18-b0c11923927c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b71fd9e-a796-4de2-8723-0380d29aaba9" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Void the sale again" id="c85c010d-afc5-44ff-b44a-e77e915ca77c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Void the sale again" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/void</con:endpoint><con:request>{
  "comment": "Voiding original transaction",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7ca7118-c256-4e09-b423-7603655f5b02" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a585977-42be-44d5-89c1-d66508f76a84" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b1ab2f8-098d-4c24-b876-e9e68b819e5d" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Invalid Transaction Status"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 2" id="a0612b13-50ea-49d6-af10-55f396ee7a18"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7900,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28cbde4b-cd98-48b2-8f3e-27a09b5ad09c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get original sale order id for refund" id="8636538c-7cc1-4478-941a-355407c2e401"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="1ca91637-63d3-4193-955f-8e789773b3a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Credit without security" id="bb7b1da3-80e5-44ed-9545-4bd892c4893a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Credit without security" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/credit</con:endpoint><con:request>{
"orderId": null,
"threadId":null,
"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"comment1": "hello",
"comment2": " Test",
"transactionAmount":7900,
"externalTransactionId":${Properties#externalTransactionId}
}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="030bf297-cd5d-4a8d-b5c1-bea3a9a5b9bd" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Unauthorized request"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter><con:parameter><con:name>Authorization</con:name><con:value>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:value><con:style>HEADER</con:style><con:default>Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6InBhcnRuZXJKd3RTeW1tZXRyaWNLZXkifQ.eyJjbGllbnRfaWQiOiJQYXlBcGlDbGllbnQiLCJleHAiOjE2MDI3NzY0MTMsInNjb3BlIjpbImFwaTpwYXkiXX0._DOWOv0f12uMiCA6n50Q1FWHHpYgeybvBLWydQ7RIs</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Full credit" id="49835758-934f-48dd-b945-d43579401fb8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Full credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 7900
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67829a5a-7b18-45d6-93a2-5b18139c4bb8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c64180c3-51d2-4ee6-8b8e-ef36774d1c53" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 3" id="338c8aab-0272-49bd-b0b7-4d541ce12287"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba5e8774-c500-42f7-9bc3-08ce959dee4c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Get  sale order id for refund" id="641edc2b-09c6-43ed-9d4b-2a1a86605ced"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="f6575a6e-a90a-4782-bed7-b196d096ceed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 3#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 3"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Refund more than the payment" id="33379ca9-4497-485c-b0f1-c1f45be45b36"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Refund more than the payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 8200
  
  }</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cde80728-e465-4185-8b60-ee579febfa10" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df0413e3-7c00-420d-9d66-0104029a34e4" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"-1"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="753343a9-cede-441f-a2cc-6da77652c9e0" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"RETURN AMOUNT EXCEEDS ORIGINAL TRANSACTION AMOUNT"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale 4" id="c4cd5fda-8eee-4775-8b56-5407b134cc15"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale 4" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac8c51ed-906b-4f15-b3e2-74a7a8a51def" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get  sale order id for refund" id="1f0c965f-9226-4835-a4da-53ed795ff669"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Get transaction id for credit" id="97ac71a5-3fe8-4a2f-9f0d-4211a3b14de5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Valid sale 4#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Valid sale 4"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="Partial credit" id="64c6d7e2-1b17-44f3-8b31-fb254267ec03"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Partial credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/credit</con:endpoint><con:request>{
  "comment": "Amount to be refunded",
  "customerId": 20624,
  "externalTransactionId":${Properties#externalTransactionId},
  "originalOrderId": ${Properties#orderId},
  "transactionAmount": 700
}</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8daf546a-3554-4d07-b2f5-0482e0594d6a" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Notify" id="1834ebf0-ef81-4920-8eca-20c0461b136d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="1e9e2140-8d94-4661-b348-c052746b4375" name="Notify" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/notify</con:endpoint><con:request>{
  "applicationID": "83984",
  "applicationName": "terminal",
  "approvalNumber": "aid90",
  
  "card": {
    "accountNumber": "4111111111111111",
    "bin": "411111",
    "cardPresent": true,
    "cvvNumber": "string",
    "expirationDate": "string",
    "trackData": ";4111111111111111=17081014764094900000?",
    "type": "MC"
  },

  "customerId": 20624,
  "emvTags": "0",
"hostResponseMessage": "Approved",
  "initialTransactionInSeries": true,
  "message": "This is a POS payment",
  "mfGatewayConsumer": {
    "accountNumber": "KJHK890",
    "consumerId": "8990",
    "consumerName": "JANE"
  },
  "mfGatewayMerchant": {
   
    "paymentSource": "TRML"

  },
  
  
  "paymentMethod": "POS",
  "paymentType": "SALE",
  "pinVerified": "true",
  "requestType": "string",
  
  "transactionAmount": 22,
  "transactionType": "SALE"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="691010fe-0705-4673-94ee-3eaaa7bf8664" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token for plus client" id="ea51a51d-a29b-4403-a8e7-e53d08363eac"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="6286a290-6751-4f05-bd7d-ec264c4302b6" name="POST token for plus client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/d1fe81f0-b057-493f-b320-0c681726aad4/tokens</con:endpoint><con:request>{
  "clientId": "TestAPICustomerClient2V1",
  "clientSecret":"vSZXXyILiWIbAJXOIyeUBofQqC2Ga0BwMqprb7YAuizfpFCphmKANV37eowGcDPW",
  "scope": "api:plus"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="0742591b-4990-4887-8b58-1e58d49d243a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale for a non-pay client" id="bbede3b3-afb7-44a8-9144-20c577f6d625"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="POST sale for a non-pay client" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560807838/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token for plus client#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token for plus client#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Sale against a PAY Customer with NGO token" id="19313105-9d1e-4327-8989-35623d59c9a5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Sale against a PAY Customer with NGO token" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/pay/merchants/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Sale against a ngpay merchant with NGO token" id="6597ec4b-a14e-48a3-9c29-29c09f3120c1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Sale against a ngpay merchant with NGO token" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/merchants/2560791218/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 8100,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-Pay Customer" id="6cf4693f-6b69-4470-ae4d-dcd5e1706567"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-Pay Customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>NGPayTeamTestClient</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url for ngo" id="815b336c-ca08-43ac-a6e4-8d4189180da4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url for ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "http://buhahad3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  for ngo using token of pay customer" id="de066970-0bbd-4470-8be6-829b49d7d93d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  for ngo using token of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url  with ngo's token for pay customer" id="526e8002-e2a5-4a86-99dc-446c55a5bd1a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url  with ngo's token for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for NGO" id="c448cca3-c09b-41ab-937c-6905305125c6"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url for ngo using token of pay customer" id="8662821a-3c0a-4e90-b646-01c69ba55569"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url for ngo using token of pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6cb5c2ae-c3de-4d2d-821a-2e0b8fc9b56d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay Cusomer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="View callback url with ngo's token for pay customer" id="b7c024bf-5b24-4016-8a4c-849677319621"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="View callback url with ngo's token for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/pay/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://d3-splunkm01.dev.medfusion.net/en-GB/app/search/search?q=search%20index%3D%22demo_mfgateway%22%20source%3D%22%2Fapp%2Fmfpay-gateway-reporting_demo%2Flog%2Fserver.log%22%20&amp;sid=1602707364.1004777&amp;display.page.search.mode=smart&amp;dispatch.sample_ratio=1&amp;earliest=&amp;latest="
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid authorize for pay customer" id="3b4dab75-80aa-483e-acfd-87d91fffceda"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid authorize for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/pay/merchants/2560807797/authorize</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 9000,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1358407-1a78-41ff-96d5-fc41c28ba959" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Valid sale for pay customer" id="0b38e1a9-066a-421d-a851-ad727b9be751"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="eb58b763-c20a-449c-b9aa-306d8349bbdc" name="Valid sale for pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mefpungnx2.execute-api.us-east-2.amazonaws.com/Development/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/pay/merchants/2560807797/sale</con:endpoint><con:request>{
	"mfGatewayConsumer": {
"accountNumber": "23345",
"consumerName": "Test patient"
},
"mfGatewayMerchant": {
"paymentSource": "VCS"
},
"transactionAmount": 7800,
"initialTransactionInSeries": true,
"card": {
"cvvNumber": "901",
"type": "VI",
"accountNumber": "4960049010100011",
"expirationDate": "1225",
"trackData": null,
"bin": "496004",
"cardPresent": false
},
"billToAddress": {
"name": "Test",
"zipCode": "87239",
"middleInitial": null,
"lastName": "Patient",
"companyName": "Some company",
"addressLine1": "123 Rainbow dr",
"addressLine2": "",
"addressLine3": null,
"city": "cary",
"state": "NC",
"country": "US",
"zipCode": "27518",
"email": "",
"phone": ""
}
	}
</con:request><con:assertion type="Valid HTTP Status Codes" id="c893f517-bdff-470b-84e9-059ab6cef232" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44a5fffa-907a-4061-9880-55fde7e2f264" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay Customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>x-api-key</con:name><con:value>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:value><con:style>HEADER</con:style><con:default>4lhEFOWcWba5WvhpoLJnyaypV3yjaEu8vhJ2Zqti</con:default></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>e751e354-df4c-40c2-b898-79249a214ecd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59461958-95ff-41df-9aab-20aa5ca695c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0309204-dd7c-4775-9019-33c379cb347e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8028b69c-e770-46c5-9911-a3c276444d76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>320019ee-2d3a-45d5-aa28-3673c751c9ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39ab582d-9063-4464-8173-f48c8d3c02da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e1afe42-fac6-40ee-9ec9-fd3eca680aef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e793bcc6-d14d-4830-b497-f5ae1a3244d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d29b7e37-adab-4b8e-943c-363c77e2b177</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c53d8b5-e530-422c-8224-1fa1706269a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>90bd53f9-77b8-4aef-b4db-f486c9784d07</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b19a7b56-10a7-4b9e-92ef-01d0d3064446</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce8f69e9-c358-4109-a727-4f3985fbdf2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56813240-a62c-4554-a6f1-9c7552eea9e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>003fdc18-d108-4630-bdc4-200b1db5bd4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee550e74-f01b-4d95-b5f9-b76f27ba7f1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c43deeec-0c8c-4ebd-a028-50e2fc7ff6eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19313105-9d1e-4327-8989-35623d59c9a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6597ec4b-a14e-48a3-9c29-29c09f3120c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6cf4693f-6b69-4470-ae4d-dcd5e1706567</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="b04acfc7-cf72-4fc7-b952-19a66edec342" name="PAY EXTERNAL API"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="063057c1-c76a-44ed-bd83-c2251e752965" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="EXTERNAL API DEV3" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="92044f3b-a216-4aa3-aef7-800af02ea97c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>mmid</con:name><con:value>2560791218</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Create partner credentials- as finance" id="c374f7f2-6fa2-4f76-ab13-1a35432b9b32"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Create partner credentials- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername456"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="254185d8-3647-4293-b23d-56f7b64c568f" name="Match content of [username]"><con:configuration><path>$['username']</path><content>${Create partner credentials- as finance#RawRequest#$['username']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="9daca940-01c1-4edb-a129-f92d9ab87953" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="3c3b7cc6-d8bd-4dbe-a1e1-8ca431e5ca03" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>40090</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:username[1]</con:xpath><con:element>username</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>testusername123</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:password[1]</con:xpath><con:element>password</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>testusername123</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners">
   <id>40090</id>
   <username>testusername123</username>
   <password>c5ZYPLfus18wKyC</password>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET partner credentials- as finance" id="a1c151eb-f57d-4dca-81f7-583837df4167"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="GET partner credentials- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Check GET partner credentials- as finance" id="fe225d8f-d021-4568-b52b-36edc08d35f8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Check GET partner credentials- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/check</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>${Create partner credentials- as finance#Response#$['username']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as finance#Response#$['username']}</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>${Create partner credentials- as finance#Response#$['password']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as finance#Response#$['password']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update partner credentials- as finance" id="81d654b1-46e7-49dd-8b8c-72587f1d5471"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Update partner credentials- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as finance#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a523843c-b0b5-4781-b62c-94e659645a0c" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Create partner credentials- as finance#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c213617-58c0-45e9-a130-f28bb5dce295" name="Match content of [username]"><con:configuration><path>$['username']</path><content>"Nextgenuser123"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f94496ec-e2cf-4bd4-9db4-0f836d23334a" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>Nextgenuser123</con:value><con:style>QUERY</con:style><con:default>Nextgenuser123</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>Nextgenpassword</con:value><con:style>QUERY</con:style><con:default>Nextgenpassword</con:default></con:parameter><con:parameter><con:name>id</con:name><con:value>${Create partner credentials- as finance#Response#$['id']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as finance#Response#$['id']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Reset partner credentials- as finance" id="b3ada6e4-c037-4f37-8933-b7713413562c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Reset partner credentials- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as finance#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a523843c-b0b5-4781-b62c-94e659645a0c" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Create partner credentials- as finance#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c213617-58c0-45e9-a130-f28bb5dce295" name="Match content of [username]"><con:configuration><path>$['username']</path><content>"Nextgenuser123"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f94496ec-e2cf-4bd4-9db4-0f836d23334a" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Delete partner - as finance" id="e0bdd0dc-1f6e-482b-bf24-66736d51271e"><con:settings/><con:config method="DELETE" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Delete partner - as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as finance#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET partner after delete- as finance" id="a0f19b23-c32a-453b-ac15-1a51806180ce"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="GET partner after delete- as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/check</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>${Update partner credentials- as finance#Response#$['username']}</con:value><con:style>QUERY</con:style><con:default>${Update partner credentials- as finance#Response#$['username']}</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>nextgenpassword</con:value><con:style>QUERY</con:style><con:default>nextgenpassword</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Create partner credentials- as implementation" id="253571fc-c000-4390-933a-331302f4e061"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Create partner credentials- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername1567"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="254185d8-3647-4293-b23d-56f7b64c568f" name="Match content of [username]"><con:configuration><path>$['username']</path><content>${Create partner credentials- as implementation#RawRequest#$['username']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="9daca940-01c1-4edb-a129-f92d9ab87953" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="3c3b7cc6-d8bd-4dbe-a1e1-8ca431e5ca03" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>40090</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:username[1]</con:xpath><con:element>username</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>testusername123</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners';
//ns1:Response[1]/ns1:password[1]</con:xpath><con:element>password</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>testusername123</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/v6/application/rcm/merchants/2560791218/partners">
   <id>40090</id>
   <username>testusername123</username>
   <password>c5ZYPLfus18wKyC</password>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET partner credentials- as implementation" id="27121cae-1a6e-47ea-bc6a-2d990eec380a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="GET partner credentials- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Check GET partner credentials- as implementation" id="daed3e34-8c3e-4db4-a7ee-17c7ad888d7c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Check GET partner credentials- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/check</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>${Create partner credentials- as implementation#Response#$['username']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as implementation#Response#$['username']}</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>${Create partner credentials- as implementation#Response#$['password']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as implementation#Response#$['password']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update partner credentials- as implementation" id="f24e852e-f9f8-4e36-889f-bcdfd266cac3"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Update partner credentials- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as implementation#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a523843c-b0b5-4781-b62c-94e659645a0c" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Create partner credentials- as implementation#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c213617-58c0-45e9-a130-f28bb5dce295" name="Match content of [username]"><con:configuration><path>$['username']</path><content>"Nextgenuser3456"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f94496ec-e2cf-4bd4-9db4-0f836d23334a" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>Nextgenuser3456</con:value><con:style>QUERY</con:style><con:default>Nextgenuser3456</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>Nextgenpassword</con:value><con:style>QUERY</con:style><con:default>Nextgenpassword</con:default></con:parameter><con:parameter><con:name>id</con:name><con:value>${Create partner credentials- as implementation#Response#$['id']}</con:value><con:style>QUERY</con:style><con:default>${Create partner credentials- as implementation#Response#$['id']}</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Reset partner credentials- as implementation" id="cb8bd551-0fa1-43f2-9173-4317b8349bbe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Reset partner credentials- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as implementation#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a523843c-b0b5-4781-b62c-94e659645a0c" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Create partner credentials- as implementation#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c213617-58c0-45e9-a130-f28bb5dce295" name="Match content of [username]"><con:configuration><path>$['username']</path><content>"Nextgenuser3456"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="f94496ec-e2cf-4bd4-9db4-0f836d23334a" name="Check for existence of [password]"><con:configuration><path>$['password']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Delete partner - as implementation" id="daf13da3-5d79-49df-a4c9-8dc9cfabe8be"><con:settings/><con:config method="DELETE" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="Delete partner - as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/${Create partner credentials- as implementation#Response#$['id']}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET partner after delete- as implementation" id="8c3b1f83-9a4d-46b4-bf16-30958fc95b36"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="605f4115-9831-43f2-97db-811bf93c1305" name="GET partner after delete- as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v6/application/rcm/merchants/${Properties#mmid}/partners/check</con:endpoint><con:request>{
  
  "password": "testpassword",
  "username": "testusername123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="6025613a-ecee-4a05-9936-7ef1fe1be451" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>${Update partner credentials- as implementation#Response#$['username']}</con:value><con:style>QUERY</con:style><con:default>${Update partner credentials- as implementation#Response#$['username']}</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>nextgenpassword</con:value><con:style>QUERY</con:style><con:default>nextgenpassword</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="HTTP POST sale" id="4885f1fc-bf88-460b-ae5b-ede9562258f2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="7cdacece-972a-41fe-8cde-0a808ace0548" name="HTTP POST sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8106/mfpay/services/mfgateway/v1/merchants/2560791218/sales</con:endpoint><con:request>{
  "transactionAmount": 32,
  "card": {
    "type": "VI",
    "accountNumber": "4111111111111111",
    "expirationDate": "1225",
    "trackData": "",
    "ccvNumber": "233",
    "bin": "411111",
    "cardPresent": false
  },
  "billToAddress": {
    "name": "Jane test",
    "firstName": "jane",
    "middleInitial": "",
    "lastName": "test",
    "addressLine1": "123 Rainbow dr",
    "addressLine2": "",
    "city": "cary",
    "state": "nc",
    "country": "United states",
    "zipCode": "27539"
  },
  "orderId": "",
  "customerId": "20624",
  "mfGatewayConsumer": {
    "accountNumber": "accountkjd03",
    "consumerName": "jane",
    "consumerId": "3434"
  },
  "mfGatewayMerchant": {
    "merchantLocation": "",
    "merchantLocationId": "",
    "merchantName": "Jakub's 20624 2",
    "staffId": "",
    "staffName": "Gilbert",
    "paymentSource": ""
  }
}</con:request><con:assertion type="JsonPath Existence Match" id="e9f129dd-d73e-4230-83e7-8ee12bc4b371" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d42e743a-a2b4-462c-8e76-16b8b940b6b1" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="2c3fb280-5215-4426-aae7-8409c50faea9" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5aaf2ccb-d4a2-47bd-b261-38c2c276c6d0" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="904d9fdd-1ede-4009-a491-4a1426c136ae" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic SkFORTo4ekVrR0RvWk0ya3ZYQ3Q=</con:value><con:style>HEADER</con:style><con:default>Basic SkFORTo4ekVrR0RvWk0ya3ZYQ3Q=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>92044f3b-a216-4aa3-aef7-800af02ea97c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="f2bb951e-51e3-4bf0-9624-41e0724afbf2" name="New Merchant provisioning"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="864c0455-0bea-4643-a22e-4011d56f7a88" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Internal- dev3" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="httprequest" name="Provision a new merchant as finance without infi id" id="1f4cfe3b-b05e-499f-afaf-e9693207d49f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance without infi id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint xsi:nil="true"/><con:request>{
  "merchantName": "Test BE merchant",
  "merchantLegalName": "BE merchant",
  "doingBusinessAs": "Tester",
  "externalMerchantId": "12345",
  "customerAccountNumber":"34889",
  "phoneNumber":8778778787,
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "021000021",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 1000000,
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update account details for payments" id="0ac296a3-e6ab-4cfe-b92b-d3f77c1a6564"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Update account details for payments" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance without infi id#Response#$['id']}</con:endpoint><con:request>{
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
    
  ],
  "accountDetails": {
    "accountNumber": "394898",
    "accountType": "C",
    "amexSid": null,
    "elementAcceptorId": "874767013",
    "elementAccountId": "1011643",
    "elementAccountToken": "5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001",
    "elementTerminalId": "0N3859",
    "federalTaxId": "237373737",
    "preferredProcessor": "ELEMENT",
    "routingNumber": "021000021"
   
  },
  "contractedRates": {
    "midQualifiedFeePercent": 2,
    "midQualifiedUpperBoundaryPercent": 2,
    "nonQualifiedFeePercent": 1,
    "nonQualifiedUpperBoundaryPercent": 1,
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedFeePercent": 2,
    "qualifiedUpperBoundaryPercent": 2,
    "amexPercent":2,
    "suppressFeeSettlement": true
  },
  "phoneNumber": "2398",
  "doingBusinessAs": "dba name test",
  "externalMerchantId": 12345,

 
  "maxTransactionLimit": 100000,
  "merchantAddress": {
    "address1": "123 Rainbow dr",
    "address2": "string",
    "city": "cary",
    "country": "United States of America",
    "state": "NC",
    "zip": "23982"
  },
  "merchantLegalName": "Merchant legal name test ",
  "merchantName": "Merchant name test",
  
  "statementOptions": {},
  "status": "ACTIVE",
  "vantivBoardingData": {
    "avgTicketPrice": 0,
    "merchantStatus": "OPEN",
    "sicMccCode": "8021",
    "swipePercent":5,
    "voucherFlag": "SUPERMARKET"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get a merchant without infinicept id" id="7a3f34b3-fad1-484f-9a04-07dc75b0a8c9"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get a merchant without infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/2560807043</con:endpoint><con:request>
{
  "merchantName": "WP Test merchant 3",
  "merchantLegalName": "WP Test merchant inc",
  "doingBusinessAs": "WP Test merchant 3",
  "externalMerchantId": "39484",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Berea",
      "state": "OH",
      "zip": 44017,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD", 
"AMEX",
"DISCV"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "06/05/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1948",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100000,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Matt",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "infiniceptMerchantApplicationId":"1111"
}


</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="176a773c-e5eb-4f00-9fa7-a5eac285eca9" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Edit  merchant as finance without infi id" id="d066b100-4a43-40e7-9ea7-6c5a3a9878ba"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Edit  merchant as finance without infi id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance without infi id#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
  "merchantName": "Di da merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance with infinicept id" id="928a62be-c736-49a1-ad7e-73fc677a8fec"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance with infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "98898900"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77a4b0-0b85-4e4a-8f0a-91924608292c" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07a00f40-7660-4950-88f2-4650f0567066" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant created" id="083778b9-f110-414b-a1e7-672eeb14a7ee"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant created" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}</con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "98898900"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77a4b0-0b85-4e4a-8f0a-91924608292c" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3adcc3a7-9eaa-4647-8c5b-b56937e16090" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Edit general merchant details" id="02303d20-da1d-48a0-8cee-39ffb0d33229"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Edit general merchant details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
	"id":${Provision a new merchant as finance with infinicept id#Response#$['id']},
	"merchantName":"provisioning merchant test",
	"doingBusinessAs":"MEDFUSION",
	"alsoKnownAsName":"MP merchant",
	"externalMerchantId":38949,
	 "infiniceptMerchantApplicationId": "12344",
	"customerAccountNumber":"93844454",
	"phoneNumber":"1234567891",
	"maxTransactionLimit":59996,
	"primaryContactFirstName":"Nia",
	"primaryContactLastName":"Lahi",
	"primaryContactEmail":"test@gmail.com",
	"primaryContactPhoneNumber":"3878377373",
	"merchantAddress":{
		"address1":"5501 DILLARD DR",
		"address2":null,
		"city":"Cary",
		"zip":"27518",
		"country":"US",
		"state":"NC"
		},
		"remitToAddress":{
			"address1":"address1",
			"address2":"address2",
			"city":"city",
			"zip":"276074",
			"country":"US",
			"state":"NC",
			"merchantName":"Test"
			},
			"merchantLegalName":"MedFusion, Inc.",
			"legalEntityPhoneNumber":"",
			"legalEntityAddress":{},
			"acceptedCreditCards":["VISA","MCARD","AMEX","DISCV"],
			"accountDetails":{
				"accountType":"C",
				"routingNumber":"042000314",
				"accountNumber":"7027485577",
				"federalTaxId":"562224713",
				"preferredProcessor":"ELEMENT",
				"checkingDepositType":"PrivateChecking",
				"worldPayAccountDetails":{
					"chainCode":"0N3859",
					"billingDescriptor":"PFA*SM",
					"businessEstablishedDate":"12/12/1990",
					"businessType":"ECommerce",
					"ownershipType":"PublicCorporation",
					"websiteURL":"www.bkj@example.orfg",
					"mccCode":"8011",
					"beneficialOwners":[]
					}
					},
					"contractedRates":null
					}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77a4b0-0b85-4e4a-8f0a-91924608292c" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Edit general merchant details#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07a00f40-7660-4950-88f2-4650f0567066" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get edited merchant" id="628ac0f6-e785-4e86-a6d4-41d5dea0e65e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get edited merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Edit general merchant details#Response#$['id']}</con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "98898900"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77a4b0-0b85-4e4a-8f0a-91924608292c" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3adcc3a7-9eaa-4647-8c5b-b56937e16090" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Deactivate merchant" id="6c254e75-f7f8-4511-bf45-5ef721144dfe"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Deactivate merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/status</con:endpoint><con:request>{"status":"INACTIVE"}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9626b59-4a22-4d63-8201-dad0c535b88b" name="Match content of [status]"><con:configuration><path>$['status']</path><content>"INACTIVE"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="b04f9e38-f6f5-4712-a359-a973c6fac559" name="Check for existence of [deactivatedDate]"><con:configuration><path>$['deactivatedDate']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Reactivate merchant" id="cc794ff7-477d-4098-959c-36a633a0d9b3"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Reactivate merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/status</con:endpoint><con:request>{"status":"ACTIVE"}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9626b59-4a22-4d63-8201-dad0c535b88b" name="Match content of [status]"><con:configuration><path>$['status']</path><content>"ACTIVE"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="b04f9e38-f6f5-4712-a359-a973c6fac559" name="Check for existence of [deactivatedDate]"><con:configuration><path>$['deactivatedDate']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Set status to TEST" id="06764493-7023-41d0-81a9-141320384bd9"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Set status to TEST" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/status</con:endpoint><con:request>{"status":"TEST"}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9626b59-4a22-4d63-8201-dad0c535b88b" name="Match content of [status]"><con:configuration><path>$['status']</path><content>"TEST"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="b04f9e38-f6f5-4712-a359-a973c6fac559" name="Check for existence of [deactivatedDate]"><con:configuration><path>$['deactivatedDate']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="WP health check" id="e8f2835c-0b76-4087-9a72-02233e0a9cae"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="WP health check" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/wphealthcheck</con:endpoint><con:request>{"status":"TEST"}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9626b59-4a22-4d63-8201-dad0c535b88b" name="Match content of [status]"><con:configuration><path>$['status']</path><content>"UP"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get underwriting status" id="3396af89-074f-4a53-9bb5-8315532dccfd"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get underwriting status" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/status</con:endpoint><con:request>{"status":"TEST"}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="6bd2ec01-666b-4c30-a2a8-819633d762a8" name="Check for existence of [status]"><con:configuration><path>$['status']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="89cf1bd5-b171-4120-9048-8e2caa2183b3" name="Check for existence of [reason]"><con:configuration><path>$['reason']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Edit customer contact details" id="fc5ebc1b-8720-4b18-b190-c3102ef17446"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Edit customer contact details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}/wpSubMerchant?updateType=CONTACTS</con:endpoint><con:request>{
	"id":${Provision a new merchant as finance with infinicept id#Response#$['id']},
	"merchantName":"provisioning merchant test",
	"doingBusinessAs":"MEDFUSION test",
	"alsoKnownAsName":"MP merchant",
	"externalMerchantId":38949,
	"customerAccountNumber":"93844454",
	"phoneNumber":"1234567891",
	"maxTransactionLimit":59996,
	"primaryContactFirstName":"Nate",
	"primaryContactLastName":"Lahi",
	"primaryContactEmail":"testnate@gmail.com",
	"primaryContactPhoneNumber":"3878377373",
	"merchantAddress":{
		"address1":"5501 DILLARD DR",
		"address2":null,
		"city":"Cary",
		"zip":"27518",
		"country":"US",
		"state":"NC"
		},
		"remitToAddress":{
			"address1":"address1",
			"address2":"address2",
			"city":"city",
			"zip":"276074",
			"country":"US",
			"state":"NC",
			"merchantName":"Test"
			},
			"merchantLegalName":"MedFusion, Inc.",
			"legalEntityPhoneNumber":"",
			"legalEntityAddress":{},
			"acceptedCreditCards":["VISA","MCARD","AMEX","DISCV"],
			"accountDetails":{
				"accountType":"C",
				"routingNumber":"042000314",
				"accountNumber":"7027485577",
				"federalTaxId":"562224713",
				"preferredProcessor":"ELEMENT",
				"checkingDepositType":"PrivateChecking",
				"worldPayAccountDetails":{
					"chainCode":"0N3859",
					"billingDescriptor":"PFA*SM",
					"businessEstablishedDate":"12/12/1990",
					"businessType":"AutoRental",
					"ownershipType":"PublicCorporation",
					"websiteURL":"www.bkj@example.orfg",
					"mccCode":"8011",
					"beneficialOwners":[]
					}
					},
					"contractedRates":null
					}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77a4b0-0b85-4e4a-8f0a-91924608292c" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07a00f40-7660-4950-88f2-4650f0567066" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as implementation with infinicept id" id="1e359a69-f03a-48a8-a17e-e2435653a894"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as implementation with infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "98898900"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant with infinicept id as implementation" id="04fa1101-8770-4e2b-ba45-844fef689c49"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant with infinicept id as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance with infinicept id#Response#$['id']}</con:endpoint><con:request>
{
  "merchantName": "WP Test merchant 3",
  "merchantLegalName": "WP Test merchant inc",
  "doingBusinessAs": "WP Test merchant 3",
  "externalMerchantId": "39484",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Berea",
      "state": "OH",
      "zip": 44017,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD", 
"AMEX",
"DISCV"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "06/05/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1948",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100000,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Matt",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "infiniceptMerchantApplicationId":"1111"
}


</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="176a773c-e5eb-4f00-9fa7-a5eac285eca9" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="050286c1-99c0-464c-ae18-46a0682d03fd" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${Provision a new merchant as finance with infinicept id#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance with alpha numeric infinicept id" id="ffe80016-9cce-4c24-b2d0-380ba16232cf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance with alpha numeric infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test alpha numeric",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "98898900jhe9k03924_ajd893498203_masd09"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="7765aa56-7498-41d8-9b17-9aa7cdf9e99d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="ddd7bc93-5183-4dbc-ad8c-4d458d6f0cb5" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d39a070-07f7-41b7-90a8-44701b55d0ee" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with alpha numeric infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance with  infinicept id starting with zero" id="3cabad6f-d20c-4ba9-ae01-cb9d1934a8e0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance with  infinicept id starting with zero" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test alpha numeric",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": "082374"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="7765aa56-7498-41d8-9b17-9aa7cdf9e99d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="ddd7bc93-5183-4dbc-ad8c-4d458d6f0cb5" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d39a070-07f7-41b7-90a8-44701b55d0ee" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${Provision a new merchant as finance with  infinicept id starting with zero#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="provision a new merchant as finance with a null infinicept id" id="44ae7cc4-8a6b-4adf-9d29-67721f7db53a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="provision a new merchant as finance with a null infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test alpha numeric",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId": null
}</con:request><con:assertion type="Valid HTTP Status Codes" id="7765aa56-7498-41d8-9b17-9aa7cdf9e99d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="ddd7bc93-5183-4dbc-ad8c-4d458d6f0cb5" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d39a070-07f7-41b7-90a8-44701b55d0ee" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content>${provision a new merchant as finance with a null infinicept id#RawRequest#$['infiniceptMerchantApplicationId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="provision a new merchant as finance with an empty string infinicept id" id="737eaf56-fbab-459f-ad19-b73b0954a52b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="provision a new merchant as finance with an empty string infinicept id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  
  "merchantName": "provisioning merchant test alpha numeric",
  "merchantLegalName": "MedFusion, Inc.",
  "doingBusinessAs": "MEDFUSION",
  "externalMerchantId": 38949,
  "merchantAddress": {
    "address1": "5501 DILLARD DR",
    "address2": null,
    "city": "Cary",
    "state": "NC",
    "zip": "27518",
    "country": "US"
  },
  "remitToAddress": {
    "address1": "address1",
    "address2": "address2",
    "city": "city",
    "state": "NC",
    "zip": "276074",
    "country": "US",
    "merchantName": "Test"
  },
  "statementOptions": {
    "BILLQUERYHOURS": "23",
    "DISPLAYDETACHRETURNBYMAIL": "true",
    "STMTDUEDATELEADDAYS": "2",
    "PAYBYPHONENO": "2882882828",
    "DISPLAYSTMTDETAIL": "true",
    "PAYBYPHONEHOURS": "2",
    "PAYBYCHECKOK": "true",
    "DISPLAYINSAGEBRACKETS": "false",
    "BILLQUERYPHONENO": "22229292929",
    "MERCHANTTAGLINE": "blop",
    "STMTTESTMODE": "false",
    "DISPLAYMERCHANTNAME": "true",
    "DISPLAYGUARAGEBRACKETS": "true",
    "PAYBYMONEYORDEROK": "true"
  },
  "acceptedCreditCards": [
    "AMEX",
    "DISCV",
    "MCARD",
    "VISA"
  ],
  "phoneNumber": "1234567891",
  "maxTransactionLimit": 59996,
  "accountDetails": {
    "routingNumber": "042000314",
    "accountNumber": "7027485577",
    "accountType": "C",
    "checkingDepositType": "PrivateChecking",
    "amexSid": "555",
    "preferredProcessor": "ELEMENT",
    "federalTaxId": "562224713",
    "worldPayAccountDetails": {

      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "mccCode": "8011",
      "businessEstablishedDate": "12/12/1990",
      "websiteURL": "www.bkj@example.orfg",
      "beneficialOwners": [],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
}
      
    },
    
  "contractedRates": {
    "perTransAuthFee": 30,
    "perTransRefundFee": 30,
    "qualifiedUpperBoundaryPercent": 0.5,
    "qualifiedFeePercent": 50,
    "midQualifiedUpperBoundaryPercent": 2,
    "midQualifiedFeePercent": 50,
    "nonQualifiedUpperBoundaryPercent": 3,
    "nonQualifiedFeePercent": 50,
    "amexPercent": 5,
    "suppressFeeSettlement": false
  },
  "status": "TEST",
  "fraudVars": {
    "duplicateDollarTxCount": 0,
    "duplicateDollarTxAmount": 0,
    "excessiveVolumeIncreasePercent1vs90": 100,
    "excessiveVolumeIncreaseAmount1vs90": 0,
    "excessiveVolumeIncreasePercent1vs30": 100,
    "excessiveVolumeIncreaseAmount1vs30": 0,
    "excessiveVolumeIncreasePercent1vs7": 100,
    "excessiveVolumeIncreaseAmount1vs7": 0,
    "excessiveVolumeIncreasePercent7vs90": 100,
    "excessiveVolumeIncreaseAmount7vs90": 0,
    "dailyUnmatchedCreditsCount": 0,
    "dailyUnmatchedCreditsAmount": 0,
    "sameCardTxCount": 0,
    "sameCardTxAmount": 0,
    "totalDailyForeignCardCount": 0,
    "totalDailyForeignCardTxAmount": 0,
    "txLimitToAlert": 0,
    "singleForcedTxAmount": 0,
    "aggregateForcedTxAmount": 0,
    "staleTxDays": 0
  },
  
  "customerAccountNumber": "93844",
  "alsoKnownAsName": "",

  "primaryContactFirstName": "Nia",
  "primaryContactLastName": "Lahi",
  "primaryContactEmail": "test@gmail.com",
  "primaryContactPhoneNumber": "3878377373",
  
  "legalEntityPhoneNumber": "",
  "infiniceptMerchantApplicationId":""
}</con:request><con:assertion type="Valid HTTP Status Codes" id="7765aa56-7498-41d8-9b17-9aa7cdf9e99d" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="ddd7bc93-5183-4dbc-ad8c-4d458d6f0cb5" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d39a070-07f7-41b7-90a8-44701b55d0ee" name="Match content of [infiniceptMerchantApplicationId]"><con:configuration><path>$['infiniceptMerchantApplicationId']</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer" id="c5ebf1b6-0b22-4792-9fbe-69d3d46bc514"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo with invalid customer id" id="40869619-8aad-46d3-bbb5-4328f9a8c4d6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo with invalid customer id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "Testing invalid customer type",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":1009,"customerName":"NG Office"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c790bf1f-5490-4ac9-a267-cd055a058123" name="Match content of [payAPICustomer]"><con:configuration><path>$['payAPICustomer']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as Test pay customer" id="38d90e46-cb44-4a32-9a45-c1b2b6691168"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as Test pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngpay" id="7d9da7f3-5e35-4019-ac3f-41db059ac9eb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngpay" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
	
  "merchantName": "Test ngpay merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  }
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5fad19ba-2337-41be-a42c-c33e2e7d1b64" name="Match content of [payAPICustomer]"><con:configuration><path>$['payAPICustomer']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update merchant as ngpay(implementation)" id="e1dacaab-7652-4546-8bb5-071cfe3f1062"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Update merchant as ngpay(implementation)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance as ngo customer#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
	"id":${Provision a new merchant as finance as ngo customer#Response#$['id']},
  "merchantName": "nGpay Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
 "payAPICustomer":{"id":0,"customerName":"NG Pay"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ba5e933-6ca5-4acf-b4c7-ab810c166df2" name="Match content of [payAPICustomer]"><con:configuration><path>$['payAPICustomer']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance with a customer not in the customer table" id="ec4ee1ec-673d-47c9-b568-5d8e3684ba7a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance with a customer not in the customer table" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "I am not a customer",
  "merchantLegalName": "firstAutoProvisionTestLegalName",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  "infiniceptMerchantApplicationId" : "9876543241",
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 10000,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":3425,"customerName":"NG Office"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with invalid reference arribute type" id="a5a80a6e-44ec-4a02-8b21-320fc30f07d4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with invalid reference arribute type" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "BLAH",
      "attributeValue": "H_6878_6579890"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with reference id" id="6d3847f8-45ca-415c-88f0-fb0039666f43"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with reference id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "NGO Team dev merchant",
  "merchantLegalName": "NGO Team dev merchant",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  "customerAccountNumber":94859,
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "H_6878_6579890"
     
    },
    {
     "attributeName": "external_reference_id",
      "attributeType": "REFERENCE_ID",
       "attributeValue": "38409jk3094"
    },
    {
     "attributeName": "SAP ID",
      "attributeType": "REFERENCE_ID",
       "attributeValue": "7349bj39840"
    },
     {
     "attributeName": "Provider_id",
      "attributeType": "REFERENCE_ID",
       "attributeValue": "hj3948034k19384-139849"
    },
    {
     "attributeName": "Location_id",
      "attributeType": "REFERENCE_ID",
       "attributeValue": "3948930491000000"
    }
    
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e73c2c2-1818-4c5e-a70e-9f00963c8020" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a61d890b-8fe6-43c9-9e87-708598762b3d" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="664b393e-a756-42c1-a99f-bde4b1bde048" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67990de8-2388-4f58-b1a8-1154a1e0f972" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb674b1b-aab5-4596-9233-437159ee9185" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant as finance as ngo customer with reference ids" id="836e066a-4d0f-47c1-b306-94f05ce7ebd3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant as finance as ngo customer with reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance as ngo customer with reference id#Response#$['id']}</con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "Reference_id_test_attribute_name",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "3948394_kjhkjdakf3940-!@#$%^&amp;()"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="2c6cf260-fb4e-4a3e-aebb-4c2be06169a7" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2560807923</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantName[1]</con:xpath><con:element>merchantName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>nGO Test merchant</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantLegalName[1]</con:xpath><con:element>merchantLegalName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>infi merchant testing 2</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:doingBusinessAs[1]</con:xpath><con:element>doingBusinessAs</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Robert Pine Realty</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12345</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address1[1]</con:xpath><con:element>address1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100 West St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]</con:xpath><con:element>address2</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:zip[1]</con:xpath><con:element>zip</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]</con:xpath><con:element>remitToAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]</con:xpath><con:element>statementOptions</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[1]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>VISA</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[2]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>MCARD</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:maxTransactionLimit[1]</con:xpath><con:element>maxTransactionLimit</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:routingNumber[1]</con:xpath><con:element>routingNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>064103707</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountNumber[1]</con:xpath><con:element>accountNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4344421</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountType[1]</con:xpath><con:element>accountType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>C</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:checkingDepositType[1]</con:xpath><con:element>checkingDepositType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>CommercialChecking</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]</con:xpath><con:element>amexSid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:preferredProcessor[1]</con:xpath><con:element>preferredProcessor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>element</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:federalTaxId[1]</con:xpath><con:element>federalTaxId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:backingWPMerchantExists[1]</con:xpath><con:element>backingWPMerchantExists</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]</con:xpath><con:element>merchantUUID</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]</con:xpath><con:element>worldpayUnderwritingStatus</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:chainCode[1]</con:xpath><con:element>chainCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>0N3859</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:billingDescriptor[1]</con:xpath><con:element>billingDescriptor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PFA*SM</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:ownershipType[1]</con:xpath><con:element>ownershipType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PublicCorporation</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessType[1]</con:xpath><con:element>businessType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ECommerce</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:mccCode[1]</con:xpath><con:element>mccCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>8021</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessEstablishedDate[1]</con:xpath><con:element>businessEstablishedDate</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>03/16/2020</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:websiteURL[1]</con:xpath><con:element>websiteURL</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>https://payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]</con:xpath><con:element>beneficialOwnerId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:firstName[1]</con:xpath><con:element>firstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>John</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:lastName[1]</con:xpath><con:element>lastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Smith</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:middleInitial[1]</con:xpath><con:element>middleInitial</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>S</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:title[1]</con:xpath><con:element>title</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>President</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine1[1]</con:xpath><con:element>addressLine1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123 South St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine2[1]</con:xpath><con:element>addressLine2</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Apt 500</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:zipCode[1]</con:xpath><con:element>zipCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5135551234</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ssn[1]</con:xpath><con:element>ssn</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:percentOwned[1]</con:xpath><con:element>percentOwned</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>51</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:dateOfBirth[1]</con:xpath><con:element>dateOfBirth</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12/05/1989</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:email[1]</con:xpath><con:element>email</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>jsmith@payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ownerType[1]</con:xpath><con:element>ownerType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ControlOwner</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]</con:xpath><con:element>contacts</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountId[1]</con:xpath><con:element>elementAccountId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1011643</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAcceptorId[1]</con:xpath><con:element>elementAcceptorId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementTerminalId[1]</con:xpath><con:element>elementTerminalId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>N3859505801</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountToken[1]</con:xpath><con:element>elementAccountToken</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivIbmMid[1]</con:xpath><con:element>vantivIbmMid</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]</con:xpath><con:element>vantivLitleIbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]</con:xpath><con:element>vantivLitlePbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:subMerchantId[1]</con:xpath><con:element>subMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>750497267</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]</con:xpath><con:element>paypalAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]</con:xpath><con:element>qbPayAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransAuthFee[1]</con:xpath><con:element>perTransAuthFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransRefundFee[1]</con:xpath><con:element>perTransRefundFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedUpperBoundaryPercent[1]</con:xpath><con:element>qualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedFeePercent[1]</con:xpath><con:element>qualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>midQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedFeePercent[1]</con:xpath><con:element>midQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>nonQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedFeePercent[1]</con:xpath><con:element>nonQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:amexPercent[1]</con:xpath><con:element>amexPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:suppressFeeSettlement[1]</con:xpath><con:element>suppressFeeSettlement</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]</con:xpath><con:element>status</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]</con:xpath><con:element>fraudVars</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]</con:xpath><con:element>deactivatedDate</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]</con:xpath><con:element>customerAccountNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]</con:xpath><con:element>alsoKnownAsName</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactFirstName[1]</con:xpath><con:element>primaryContactFirstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Ken</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactLastName[1]</con:xpath><con:element>primaryContactLastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Jennings</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactEmail[1]</con:xpath><con:element>primaryContactEmail</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>dudeBro75@hotmail.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactPhoneNumber[1]</con:xpath><con:element>primaryContactPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2521543586</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]</con:xpath><con:element>legalEntityAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]</con:xpath><con:element>legalEntityPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]</con:xpath><con:element>infiniceptMerchantApplicationId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:customerName[1]</con:xpath><con:element>customerName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>NG Office</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['externalMerchantId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:extras[1]</con:xpath><con:element>extras</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['extras']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:customer_reference_id1[1]</con:xpath><con:element>customer_reference_id1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['customer_reference_id1']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:practice_customer_type[1]</con:xpath><con:element>practice_customer_type</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['practice_customer_type']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]</con:xpath><con:element>notifiedPayCustomerProvisioning</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants">
   <id>2560807923</id>
   <merchantName>nGO Test merchant</merchantName>
   <merchantLegalName>infi merchant testing 2</merchantLegalName>
   <doingBusinessAs>Robert Pine Realty</doingBusinessAs>
   <externalMerchantId>12345</externalMerchantId>
   <merchantAddress>
      <address1>100 West St</address1>
      <address2 null="true"/>
      <city>Anchorage</city>
      <state>AK</state>
      <zip>99501</zip>
      <country>US</country>
   </merchantAddress>
   <remitToAddress null="true"/>
   <statementOptions null="true"/>
   <acceptedCreditCards>
      <e>VISA</e>
      <e>MCARD</e>
   </acceptedCreditCards>
   <phoneNumber null="true"/>
   <maxTransactionLimit>100</maxTransactionLimit>
   <accountDetails>
      <routingNumber>064103707</routingNumber>
      <accountNumber>4344421</accountNumber>
      <accountType>C</accountType>
      <checkingDepositType>CommercialChecking</checkingDepositType>
      <amexSid null="true"/>
      <preferredProcessor>element</preferredProcessor>
      <federalTaxId>123456789</federalTaxId>
      <worldPayAccountDetails>
         <backingWPMerchantExists>true</backingWPMerchantExists>
         <merchantUUID null="true"/>
         <worldpayUnderwritingStatus null="true"/>
         <chainCode>0N3859</chainCode>
         <billingDescriptor>PFA*SM</billingDescriptor>
         <ownershipType>PublicCorporation</ownershipType>
         <businessType>ECommerce</businessType>
         <mccCode>8021</mccCode>
         <businessEstablishedDate>03/16/2020</businessEstablishedDate>
         <websiteURL>https://payfacsm.com</websiteURL>
         <beneficialOwners>
            <e>
               <beneficialOwnerId null="true"/>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <middleInitial>S</middleInitial>
               <title>President</title>
               <addressLine1>123 South St</addressLine1>
               <addressLine2>Apt 500</addressLine2>
               <city>Anchorage</city>
               <state>AK</state>
               <zipCode>99501</zipCode>
               <country>US</country>
               <phoneNumber>5135551234</phoneNumber>
               <ssn>123456789</ssn>
               <percentOwned>51</percentOwned>
               <dateOfBirth>12/05/1989</dateOfBirth>
               <email>jsmith@payfacsm.com</email>
               <ownerType>ControlOwner</ownerType>
            </e>
         </beneficialOwners>
         <contacts null="true"/>
         <elementAccountId>1011643</elementAccountId>
         <elementAcceptorId>4445600505192</elementAcceptorId>
         <elementTerminalId>N3859505801</elementTerminalId>
         <elementAccountToken>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</elementAccountToken>
         <vantivIbmMid>4445600505192</vantivIbmMid>
         <vantivLitleIbfMid null="true"/>
         <vantivLitlePbfMid null="true"/>
         <subMerchantId>750497267</subMerchantId>
      </worldPayAccountDetails>
      <paypalAccountDetails null="true"/>
      <qbPayAccountDetails null="true"/>
   </accountDetails>
   <contractedRates>
      <perTransAuthFee>1</perTransAuthFee>
      <perTransRefundFee>1</perTransRefundFee>
      <qualifiedUpperBoundaryPercent>1.0</qualifiedUpperBoundaryPercent>
      <qualifiedFeePercent>1.0</qualifiedFeePercent>
      <midQualifiedUpperBoundaryPercent>1.0</midQualifiedUpperBoundaryPercent>
      <midQualifiedFeePercent>1.0</midQualifiedFeePercent>
      <nonQualifiedUpperBoundaryPercent>1.0</nonQualifiedUpperBoundaryPercent>
      <nonQualifiedFeePercent>1.0</nonQualifiedFeePercent>
      <amexPercent>1.0</amexPercent>
      <suppressFeeSettlement>false</suppressFeeSettlement>
   </contractedRates>
   <status null="true"/>
   <fraudVars null="true"/>
   <deactivatedDate null="true"/>
   <customerAccountNumber null="true"/>
   <alsoKnownAsName null="true"/>
   <primaryContactFirstName>Ken</primaryContactFirstName>
   <primaryContactLastName>Jennings</primaryContactLastName>
   <primaryContactEmail>dudeBro75@hotmail.com</primaryContactEmail>
   <primaryContactPhoneNumber>2521543586</primaryContactPhoneNumber>
   <legalEntityAddress null="true"/>
   <legalEntityPhoneNumber null="true"/>
   <infiniceptMerchantApplicationId null="true"/>
   <payAPICustomer>
      <id>4001</id>
      <customerName>NG Office</customerName>
   </payAPICustomer>
   <payAPICustomerReferenceIds>
      <externalMerchantId>9834</externalMerchantId>
      <extras>jane's test</extras>
      <customer_reference_id1>9389HKJK</customer_reference_id1>
      <practice_customer_type>NGO Clientts</practice_customer_type>
   </payAPICustomerReferenceIds>
   <notifiedPayCustomerProvisioning null="true"/>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b6a2669-7802-4645-b273-badd99c94711" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="38813cae-9016-4c7d-84b6-c629fd4441f4" name="Check for existence of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44f5d4cd-d20c-460b-bdaa-5a616d2a5034" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a0c76e2b-d59e-4f93-9ec0-b32f58669577" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3deb45ee-6be8-4150-9dd5-8dedefd9ebde" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with empty reference id name and value" id="4e175ab3-59fb-4478-8aad-b7216430c82b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with empty reference id name and value" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "",
      "attributeType": "REFERENCE_ID",
      "attributeValue": ""
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with empty reference id value" id="f7f55d44-d64a-431f-b78f-4861b31a2264"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with empty reference id value" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "NGO_PracticeID_1234",
      "attributeType": "REFERENCE_ID",
      "attributeValue": ""
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with null reference id" id="a4a0136a-bbf5-4473-8c93-47dfae7a9b56"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with null reference id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": null,
      "attributeType": "REFERENCE_ID",
      "attributeValue": null
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer with special chars" id="d5ddb2e5-7f0c-4b3e-9d81-3404bdfb4355"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer with special chars" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "Godzilla,340904",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "Special_chars_test!@#$%^&amp;*()"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac5cd686-cae7-4e57-959e-4386b7937c26" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>"Special_chars_test!@#$%^&amp;*()"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37f0407e-3adc-4da0-b230-d47435264719" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a15f1ba-d0d3-4be8-b9e5-75f6ddd2d5d8" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>"Godzilla,340904"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update reference ids for the ngo merchant" id="e9b8d9e4-b26e-412f-aa83-e09d3f356118"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Update reference ids for the ngo merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance as ngo customer with reference id#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
	"id":${Provision a new merchant as finance as ngo customer with reference id#Response#$['id']},
  "merchantName": "nGpay Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
       "merchantAttributes": [
    {
      "attributeName": "Updated attribute name",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "Updated reference id value_9329489"
    }
  ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>NG Office</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fde35288-2ca1-4c07-b201-f4382cf0a8b8" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant as finance as ngo customer with reference id after update" id="92c89a33-3005-49b9-b789-0e9e9aa61b90"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant as finance as ngo customer with reference id after update" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Update reference ids for the ngo merchant#Response#$['id']}</con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "Reference_id_test_attribute_name",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "3948394_kjhkjdakf3940-!@#$%^&amp;()"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>NG Office</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="2c6cf260-fb4e-4a3e-aebb-4c2be06169a7" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2560807923</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantName[1]</con:xpath><con:element>merchantName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>nGO Test merchant</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantLegalName[1]</con:xpath><con:element>merchantLegalName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>infi merchant testing 2</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:doingBusinessAs[1]</con:xpath><con:element>doingBusinessAs</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Robert Pine Realty</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12345</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address1[1]</con:xpath><con:element>address1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100 West St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]</con:xpath><con:element>address2</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:zip[1]</con:xpath><con:element>zip</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]</con:xpath><con:element>remitToAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]</con:xpath><con:element>statementOptions</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[1]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>VISA</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[2]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>MCARD</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:maxTransactionLimit[1]</con:xpath><con:element>maxTransactionLimit</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:routingNumber[1]</con:xpath><con:element>routingNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>064103707</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountNumber[1]</con:xpath><con:element>accountNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4344421</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountType[1]</con:xpath><con:element>accountType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>C</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:checkingDepositType[1]</con:xpath><con:element>checkingDepositType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>CommercialChecking</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]</con:xpath><con:element>amexSid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:preferredProcessor[1]</con:xpath><con:element>preferredProcessor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>element</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:federalTaxId[1]</con:xpath><con:element>federalTaxId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:backingWPMerchantExists[1]</con:xpath><con:element>backingWPMerchantExists</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]</con:xpath><con:element>merchantUUID</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]</con:xpath><con:element>worldpayUnderwritingStatus</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:chainCode[1]</con:xpath><con:element>chainCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>0N3859</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:billingDescriptor[1]</con:xpath><con:element>billingDescriptor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PFA*SM</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:ownershipType[1]</con:xpath><con:element>ownershipType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PublicCorporation</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessType[1]</con:xpath><con:element>businessType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ECommerce</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:mccCode[1]</con:xpath><con:element>mccCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>8021</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessEstablishedDate[1]</con:xpath><con:element>businessEstablishedDate</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>03/16/2020</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:websiteURL[1]</con:xpath><con:element>websiteURL</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>https://payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]</con:xpath><con:element>beneficialOwnerId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:firstName[1]</con:xpath><con:element>firstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>John</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:lastName[1]</con:xpath><con:element>lastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Smith</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:middleInitial[1]</con:xpath><con:element>middleInitial</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>S</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:title[1]</con:xpath><con:element>title</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>President</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine1[1]</con:xpath><con:element>addressLine1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123 South St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine2[1]</con:xpath><con:element>addressLine2</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Apt 500</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:zipCode[1]</con:xpath><con:element>zipCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5135551234</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ssn[1]</con:xpath><con:element>ssn</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:percentOwned[1]</con:xpath><con:element>percentOwned</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>51</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:dateOfBirth[1]</con:xpath><con:element>dateOfBirth</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12/05/1989</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:email[1]</con:xpath><con:element>email</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>jsmith@payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ownerType[1]</con:xpath><con:element>ownerType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ControlOwner</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]</con:xpath><con:element>contacts</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountId[1]</con:xpath><con:element>elementAccountId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1011643</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAcceptorId[1]</con:xpath><con:element>elementAcceptorId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementTerminalId[1]</con:xpath><con:element>elementTerminalId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>N3859505801</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountToken[1]</con:xpath><con:element>elementAccountToken</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivIbmMid[1]</con:xpath><con:element>vantivIbmMid</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]</con:xpath><con:element>vantivLitleIbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]</con:xpath><con:element>vantivLitlePbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:subMerchantId[1]</con:xpath><con:element>subMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>750497267</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]</con:xpath><con:element>paypalAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]</con:xpath><con:element>qbPayAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransAuthFee[1]</con:xpath><con:element>perTransAuthFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransRefundFee[1]</con:xpath><con:element>perTransRefundFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedUpperBoundaryPercent[1]</con:xpath><con:element>qualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedFeePercent[1]</con:xpath><con:element>qualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>midQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedFeePercent[1]</con:xpath><con:element>midQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>nonQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedFeePercent[1]</con:xpath><con:element>nonQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:amexPercent[1]</con:xpath><con:element>amexPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:suppressFeeSettlement[1]</con:xpath><con:element>suppressFeeSettlement</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]</con:xpath><con:element>status</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]</con:xpath><con:element>fraudVars</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]</con:xpath><con:element>deactivatedDate</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]</con:xpath><con:element>customerAccountNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]</con:xpath><con:element>alsoKnownAsName</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactFirstName[1]</con:xpath><con:element>primaryContactFirstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Ken</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactLastName[1]</con:xpath><con:element>primaryContactLastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Jennings</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactEmail[1]</con:xpath><con:element>primaryContactEmail</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>dudeBro75@hotmail.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactPhoneNumber[1]</con:xpath><con:element>primaryContactPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2521543586</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]</con:xpath><con:element>legalEntityAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]</con:xpath><con:element>legalEntityPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]</con:xpath><con:element>infiniceptMerchantApplicationId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:customerName[1]</con:xpath><con:element>customerName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>NG Office</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['externalMerchantId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:extras[1]</con:xpath><con:element>extras</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['extras']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:customer_reference_id1[1]</con:xpath><con:element>customer_reference_id1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['customer_reference_id1']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:practice_customer_type[1]</con:xpath><con:element>practice_customer_type</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['practice_customer_type']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]</con:xpath><con:element>notifiedPayCustomerProvisioning</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants">
   <id>2560807923</id>
   <merchantName>nGO Test merchant</merchantName>
   <merchantLegalName>infi merchant testing 2</merchantLegalName>
   <doingBusinessAs>Robert Pine Realty</doingBusinessAs>
   <externalMerchantId>12345</externalMerchantId>
   <merchantAddress>
      <address1>100 West St</address1>
      <address2 null="true"/>
      <city>Anchorage</city>
      <state>AK</state>
      <zip>99501</zip>
      <country>US</country>
   </merchantAddress>
   <remitToAddress null="true"/>
   <statementOptions null="true"/>
   <acceptedCreditCards>
      <e>VISA</e>
      <e>MCARD</e>
   </acceptedCreditCards>
   <phoneNumber null="true"/>
   <maxTransactionLimit>100</maxTransactionLimit>
   <accountDetails>
      <routingNumber>064103707</routingNumber>
      <accountNumber>4344421</accountNumber>
      <accountType>C</accountType>
      <checkingDepositType>CommercialChecking</checkingDepositType>
      <amexSid null="true"/>
      <preferredProcessor>element</preferredProcessor>
      <federalTaxId>123456789</federalTaxId>
      <worldPayAccountDetails>
         <backingWPMerchantExists>true</backingWPMerchantExists>
         <merchantUUID null="true"/>
         <worldpayUnderwritingStatus null="true"/>
         <chainCode>0N3859</chainCode>
         <billingDescriptor>PFA*SM</billingDescriptor>
         <ownershipType>PublicCorporation</ownershipType>
         <businessType>ECommerce</businessType>
         <mccCode>8021</mccCode>
         <businessEstablishedDate>03/16/2020</businessEstablishedDate>
         <websiteURL>https://payfacsm.com</websiteURL>
         <beneficialOwners>
            <e>
               <beneficialOwnerId null="true"/>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <middleInitial>S</middleInitial>
               <title>President</title>
               <addressLine1>123 South St</addressLine1>
               <addressLine2>Apt 500</addressLine2>
               <city>Anchorage</city>
               <state>AK</state>
               <zipCode>99501</zipCode>
               <country>US</country>
               <phoneNumber>5135551234</phoneNumber>
               <ssn>123456789</ssn>
               <percentOwned>51</percentOwned>
               <dateOfBirth>12/05/1989</dateOfBirth>
               <email>jsmith@payfacsm.com</email>
               <ownerType>ControlOwner</ownerType>
            </e>
         </beneficialOwners>
         <contacts null="true"/>
         <elementAccountId>1011643</elementAccountId>
         <elementAcceptorId>4445600505192</elementAcceptorId>
         <elementTerminalId>N3859505801</elementTerminalId>
         <elementAccountToken>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</elementAccountToken>
         <vantivIbmMid>4445600505192</vantivIbmMid>
         <vantivLitleIbfMid null="true"/>
         <vantivLitlePbfMid null="true"/>
         <subMerchantId>750497267</subMerchantId>
      </worldPayAccountDetails>
      <paypalAccountDetails null="true"/>
      <qbPayAccountDetails null="true"/>
   </accountDetails>
   <contractedRates>
      <perTransAuthFee>1</perTransAuthFee>
      <perTransRefundFee>1</perTransRefundFee>
      <qualifiedUpperBoundaryPercent>1.0</qualifiedUpperBoundaryPercent>
      <qualifiedFeePercent>1.0</qualifiedFeePercent>
      <midQualifiedUpperBoundaryPercent>1.0</midQualifiedUpperBoundaryPercent>
      <midQualifiedFeePercent>1.0</midQualifiedFeePercent>
      <nonQualifiedUpperBoundaryPercent>1.0</nonQualifiedUpperBoundaryPercent>
      <nonQualifiedFeePercent>1.0</nonQualifiedFeePercent>
      <amexPercent>1.0</amexPercent>
      <suppressFeeSettlement>false</suppressFeeSettlement>
   </contractedRates>
   <status null="true"/>
   <fraudVars null="true"/>
   <deactivatedDate null="true"/>
   <customerAccountNumber null="true"/>
   <alsoKnownAsName null="true"/>
   <primaryContactFirstName>Ken</primaryContactFirstName>
   <primaryContactLastName>Jennings</primaryContactLastName>
   <primaryContactEmail>dudeBro75@hotmail.com</primaryContactEmail>
   <primaryContactPhoneNumber>2521543586</primaryContactPhoneNumber>
   <legalEntityAddress null="true"/>
   <legalEntityPhoneNumber null="true"/>
   <infiniceptMerchantApplicationId null="true"/>
   <payAPICustomer>
      <id>4001</id>
      <customerName>NG Office</customerName>
   </payAPICustomer>
   <payAPICustomerReferenceIds>
      <externalMerchantId>9834</externalMerchantId>
      <extras>jane's test</extras>
      <customer_reference_id1>9389HKJK</customer_reference_id1>
      <practice_customer_type>NGO Clientts</practice_customer_type>
   </payAPICustomerReferenceIds>
   <notifiedPayCustomerProvisioning null="true"/>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b69ec7e-308b-4bc3-ab16-9a3e29bcc4f3" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Copy of Provision a new merchant as finance as ngo customer with reference id" id="4fde65ee-32d3-4269-8e4a-1e686afd2879"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Copy of Provision a new merchant as finance as ngo customer with reference id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "08799"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e73c2c2-1818-4c5e-a70e-9f00963c8020" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a61d890b-8fe6-43c9-9e87-708598762b3d" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="664b393e-a756-42c1-a99f-bde4b1bde048" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67990de8-2388-4f58-b1a8-1154a1e0f972" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb674b1b-aab5-4596-9233-437159ee9185" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Copy of Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Change customer type for this merchant" id="e0aa07c3-4873-495e-bdc4-b4defcff331b"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Change customer type for this merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Copy of Provision a new merchant as finance as ngo customer with reference id#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
	"id":${Copy of Provision a new merchant as finance as ngo customer with reference id#Response#$['id']},
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "test pay customer id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "kj039434kj034"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e73c2c2-1818-4c5e-a70e-9f00963c8020" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>2000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a61d890b-8fe6-43c9-9e87-708598762b3d" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>Test Pay Customer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="664b393e-a756-42c1-a99f-bde4b1bde048" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant as finance as ngo customer with reference id after updating customer" id="ea90abfa-9cf9-459e-a97a-385daf0b218d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant as finance as ngo customer with reference id after updating customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Change customer type for this merchant#Response#$['id']}</con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "Reference_id_test_attribute_name",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "3948394_kjhkjdakf3940-!@#$%^&amp;()"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>Test Pay Customer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="2c6cf260-fb4e-4a3e-aebb-4c2be06169a7" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2560807923</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantName[1]</con:xpath><con:element>merchantName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>nGO Test merchant</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantLegalName[1]</con:xpath><con:element>merchantLegalName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>infi merchant testing 2</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:doingBusinessAs[1]</con:xpath><con:element>doingBusinessAs</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Robert Pine Realty</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12345</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address1[1]</con:xpath><con:element>address1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100 West St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]</con:xpath><con:element>address2</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:zip[1]</con:xpath><con:element>zip</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]</con:xpath><con:element>remitToAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]</con:xpath><con:element>statementOptions</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[1]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>VISA</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[2]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>MCARD</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:maxTransactionLimit[1]</con:xpath><con:element>maxTransactionLimit</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:routingNumber[1]</con:xpath><con:element>routingNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>064103707</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountNumber[1]</con:xpath><con:element>accountNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4344421</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountType[1]</con:xpath><con:element>accountType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>C</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:checkingDepositType[1]</con:xpath><con:element>checkingDepositType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>CommercialChecking</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]</con:xpath><con:element>amexSid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:preferredProcessor[1]</con:xpath><con:element>preferredProcessor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>element</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:federalTaxId[1]</con:xpath><con:element>federalTaxId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:backingWPMerchantExists[1]</con:xpath><con:element>backingWPMerchantExists</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]</con:xpath><con:element>merchantUUID</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]</con:xpath><con:element>worldpayUnderwritingStatus</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:chainCode[1]</con:xpath><con:element>chainCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>0N3859</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:billingDescriptor[1]</con:xpath><con:element>billingDescriptor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PFA*SM</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:ownershipType[1]</con:xpath><con:element>ownershipType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PublicCorporation</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessType[1]</con:xpath><con:element>businessType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ECommerce</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:mccCode[1]</con:xpath><con:element>mccCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>8021</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessEstablishedDate[1]</con:xpath><con:element>businessEstablishedDate</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>03/16/2020</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:websiteURL[1]</con:xpath><con:element>websiteURL</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>https://payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]</con:xpath><con:element>beneficialOwnerId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:firstName[1]</con:xpath><con:element>firstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>John</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:lastName[1]</con:xpath><con:element>lastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Smith</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:middleInitial[1]</con:xpath><con:element>middleInitial</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>S</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:title[1]</con:xpath><con:element>title</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>President</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine1[1]</con:xpath><con:element>addressLine1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123 South St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine2[1]</con:xpath><con:element>addressLine2</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Apt 500</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:zipCode[1]</con:xpath><con:element>zipCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5135551234</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ssn[1]</con:xpath><con:element>ssn</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:percentOwned[1]</con:xpath><con:element>percentOwned</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>51</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:dateOfBirth[1]</con:xpath><con:element>dateOfBirth</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12/05/1989</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:email[1]</con:xpath><con:element>email</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>jsmith@payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ownerType[1]</con:xpath><con:element>ownerType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ControlOwner</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]</con:xpath><con:element>contacts</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountId[1]</con:xpath><con:element>elementAccountId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1011643</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAcceptorId[1]</con:xpath><con:element>elementAcceptorId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementTerminalId[1]</con:xpath><con:element>elementTerminalId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>N3859505801</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountToken[1]</con:xpath><con:element>elementAccountToken</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivIbmMid[1]</con:xpath><con:element>vantivIbmMid</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]</con:xpath><con:element>vantivLitleIbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]</con:xpath><con:element>vantivLitlePbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:subMerchantId[1]</con:xpath><con:element>subMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>750497267</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]</con:xpath><con:element>paypalAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]</con:xpath><con:element>qbPayAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransAuthFee[1]</con:xpath><con:element>perTransAuthFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransRefundFee[1]</con:xpath><con:element>perTransRefundFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedUpperBoundaryPercent[1]</con:xpath><con:element>qualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedFeePercent[1]</con:xpath><con:element>qualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>midQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedFeePercent[1]</con:xpath><con:element>midQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>nonQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedFeePercent[1]</con:xpath><con:element>nonQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:amexPercent[1]</con:xpath><con:element>amexPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:suppressFeeSettlement[1]</con:xpath><con:element>suppressFeeSettlement</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]</con:xpath><con:element>status</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]</con:xpath><con:element>fraudVars</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]</con:xpath><con:element>deactivatedDate</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]</con:xpath><con:element>customerAccountNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]</con:xpath><con:element>alsoKnownAsName</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactFirstName[1]</con:xpath><con:element>primaryContactFirstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Ken</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactLastName[1]</con:xpath><con:element>primaryContactLastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Jennings</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactEmail[1]</con:xpath><con:element>primaryContactEmail</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>dudeBro75@hotmail.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactPhoneNumber[1]</con:xpath><con:element>primaryContactPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2521543586</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]</con:xpath><con:element>legalEntityAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]</con:xpath><con:element>legalEntityPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]</con:xpath><con:element>infiniceptMerchantApplicationId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:customerName[1]</con:xpath><con:element>customerName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>NG Office</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['externalMerchantId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:extras[1]</con:xpath><con:element>extras</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['extras']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:customer_reference_id1[1]</con:xpath><con:element>customer_reference_id1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['customer_reference_id1']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:practice_customer_type[1]</con:xpath><con:element>practice_customer_type</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as ngo customer with invalid reference arribute type#RawRequest#$['payAPICustomerReferenceIds']['practice_customer_type']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]</con:xpath><con:element>notifiedPayCustomerProvisioning</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants">
   <id>2560807923</id>
   <merchantName>nGO Test merchant</merchantName>
   <merchantLegalName>infi merchant testing 2</merchantLegalName>
   <doingBusinessAs>Robert Pine Realty</doingBusinessAs>
   <externalMerchantId>12345</externalMerchantId>
   <merchantAddress>
      <address1>100 West St</address1>
      <address2 null="true"/>
      <city>Anchorage</city>
      <state>AK</state>
      <zip>99501</zip>
      <country>US</country>
   </merchantAddress>
   <remitToAddress null="true"/>
   <statementOptions null="true"/>
   <acceptedCreditCards>
      <e>VISA</e>
      <e>MCARD</e>
   </acceptedCreditCards>
   <phoneNumber null="true"/>
   <maxTransactionLimit>100</maxTransactionLimit>
   <accountDetails>
      <routingNumber>064103707</routingNumber>
      <accountNumber>4344421</accountNumber>
      <accountType>C</accountType>
      <checkingDepositType>CommercialChecking</checkingDepositType>
      <amexSid null="true"/>
      <preferredProcessor>element</preferredProcessor>
      <federalTaxId>123456789</federalTaxId>
      <worldPayAccountDetails>
         <backingWPMerchantExists>true</backingWPMerchantExists>
         <merchantUUID null="true"/>
         <worldpayUnderwritingStatus null="true"/>
         <chainCode>0N3859</chainCode>
         <billingDescriptor>PFA*SM</billingDescriptor>
         <ownershipType>PublicCorporation</ownershipType>
         <businessType>ECommerce</businessType>
         <mccCode>8021</mccCode>
         <businessEstablishedDate>03/16/2020</businessEstablishedDate>
         <websiteURL>https://payfacsm.com</websiteURL>
         <beneficialOwners>
            <e>
               <beneficialOwnerId null="true"/>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <middleInitial>S</middleInitial>
               <title>President</title>
               <addressLine1>123 South St</addressLine1>
               <addressLine2>Apt 500</addressLine2>
               <city>Anchorage</city>
               <state>AK</state>
               <zipCode>99501</zipCode>
               <country>US</country>
               <phoneNumber>5135551234</phoneNumber>
               <ssn>123456789</ssn>
               <percentOwned>51</percentOwned>
               <dateOfBirth>12/05/1989</dateOfBirth>
               <email>jsmith@payfacsm.com</email>
               <ownerType>ControlOwner</ownerType>
            </e>
         </beneficialOwners>
         <contacts null="true"/>
         <elementAccountId>1011643</elementAccountId>
         <elementAcceptorId>4445600505192</elementAcceptorId>
         <elementTerminalId>N3859505801</elementTerminalId>
         <elementAccountToken>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</elementAccountToken>
         <vantivIbmMid>4445600505192</vantivIbmMid>
         <vantivLitleIbfMid null="true"/>
         <vantivLitlePbfMid null="true"/>
         <subMerchantId>750497267</subMerchantId>
      </worldPayAccountDetails>
      <paypalAccountDetails null="true"/>
      <qbPayAccountDetails null="true"/>
   </accountDetails>
   <contractedRates>
      <perTransAuthFee>1</perTransAuthFee>
      <perTransRefundFee>1</perTransRefundFee>
      <qualifiedUpperBoundaryPercent>1.0</qualifiedUpperBoundaryPercent>
      <qualifiedFeePercent>1.0</qualifiedFeePercent>
      <midQualifiedUpperBoundaryPercent>1.0</midQualifiedUpperBoundaryPercent>
      <midQualifiedFeePercent>1.0</midQualifiedFeePercent>
      <nonQualifiedUpperBoundaryPercent>1.0</nonQualifiedUpperBoundaryPercent>
      <nonQualifiedFeePercent>1.0</nonQualifiedFeePercent>
      <amexPercent>1.0</amexPercent>
      <suppressFeeSettlement>false</suppressFeeSettlement>
   </contractedRates>
   <status null="true"/>
   <fraudVars null="true"/>
   <deactivatedDate null="true"/>
   <customerAccountNumber null="true"/>
   <alsoKnownAsName null="true"/>
   <primaryContactFirstName>Ken</primaryContactFirstName>
   <primaryContactLastName>Jennings</primaryContactLastName>
   <primaryContactEmail>dudeBro75@hotmail.com</primaryContactEmail>
   <primaryContactPhoneNumber>2521543586</primaryContactPhoneNumber>
   <legalEntityAddress null="true"/>
   <legalEntityPhoneNumber null="true"/>
   <infiniceptMerchantApplicationId null="true"/>
   <payAPICustomer>
      <id>4001</id>
      <customerName>NG Office</customerName>
   </payAPICustomer>
   <payAPICustomerReferenceIds>
      <externalMerchantId>9834</externalMerchantId>
      <extras>jane's test</extras>
      <customer_reference_id1>9389HKJK</customer_reference_id1>
      <practice_customer_type>NGO Clientts</practice_customer_type>
   </payAPICustomerReferenceIds>
   <notifiedPayCustomerProvisioning null="true"/>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b69ec7e-308b-4bc3-ab16-9a3e29bcc4f3" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>2000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da3834f5-6c5c-4822-8abd-67814dc70940" name="Match content of [merchantAttributes]"><con:configuration><path>$['merchantAttributes']</path><content>[ ]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as pay customer with reference ids" id="74dd895f-91c2-410b-80d0-e54274a5e6d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as pay customer with reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "Pay customer Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
   "merchantAttributes": [
    {
      "attributeName": "Test pay customer Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "h0320490_Test jane's id"
    }
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"
  }
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" name="Message Content Assertion" id="bce2c05f-83ee-4405-9b1e-efe17ef590cd"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2560807923</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantName[1]</con:xpath><con:element>merchantName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>nGO Test merchant</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantLegalName[1]</con:xpath><con:element>merchantLegalName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>infi merchant testing 2</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:doingBusinessAs[1]</con:xpath><con:element>doingBusinessAs</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Robert Pine Realty</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12345</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address1[1]</con:xpath><con:element>address1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100 West St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]</con:xpath><con:element>address2</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:address2[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:zip[1]</con:xpath><con:element>zip</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:merchantAddress[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]</con:xpath><con:element>remitToAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:remitToAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]</con:xpath><con:element>statementOptions</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:statementOptions[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[1]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>VISA</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:acceptedCreditCards[1]/ns1:e[2]</con:xpath><con:element>e</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>MCARD</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:phoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:maxTransactionLimit[1]</con:xpath><con:element>maxTransactionLimit</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>100</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:routingNumber[1]</con:xpath><con:element>routingNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>064103707</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountNumber[1]</con:xpath><con:element>accountNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4344421</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:accountType[1]</con:xpath><con:element>accountType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>C</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:checkingDepositType[1]</con:xpath><con:element>checkingDepositType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>CommercialChecking</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]</con:xpath><con:element>amexSid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:amexSid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:preferredProcessor[1]</con:xpath><con:element>preferredProcessor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>element</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:federalTaxId[1]</con:xpath><con:element>federalTaxId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:backingWPMerchantExists[1]</con:xpath><con:element>backingWPMerchantExists</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]</con:xpath><con:element>merchantUUID</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:merchantUUID[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]</con:xpath><con:element>worldpayUnderwritingStatus</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:worldpayUnderwritingStatus[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:chainCode[1]</con:xpath><con:element>chainCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>0N3859</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:billingDescriptor[1]</con:xpath><con:element>billingDescriptor</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PFA*SM</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:ownershipType[1]</con:xpath><con:element>ownershipType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>PublicCorporation</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessType[1]</con:xpath><con:element>businessType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ECommerce</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:mccCode[1]</con:xpath><con:element>mccCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>8021</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:businessEstablishedDate[1]</con:xpath><con:element>businessEstablishedDate</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>03/16/2020</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:websiteURL[1]</con:xpath><con:element>websiteURL</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>https://payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]</con:xpath><con:element>beneficialOwnerId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:beneficialOwnerId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:firstName[1]</con:xpath><con:element>firstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>John</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:lastName[1]</con:xpath><con:element>lastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Smith</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:middleInitial[1]</con:xpath><con:element>middleInitial</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>S</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:title[1]</con:xpath><con:element>title</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>President</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine1[1]</con:xpath><con:element>addressLine1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123 South St</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:addressLine2[1]</con:xpath><con:element>addressLine2</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Apt 500</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:city[1]</con:xpath><con:element>city</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Anchorage</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:state[1]</con:xpath><con:element>state</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>AK</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:zipCode[1]</con:xpath><con:element>zipCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>99501</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:country[1]</con:xpath><con:element>country</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>US</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:phoneNumber[1]</con:xpath><con:element>phoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5135551234</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ssn[1]</con:xpath><con:element>ssn</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>123456789</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:percentOwned[1]</con:xpath><con:element>percentOwned</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>51</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:dateOfBirth[1]</con:xpath><con:element>dateOfBirth</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>12/05/1989</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:email[1]</con:xpath><con:element>email</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>jsmith@payfacsm.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:beneficialOwners[1]/ns1:e[1]/ns1:ownerType[1]</con:xpath><con:element>ownerType</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ControlOwner</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]</con:xpath><con:element>contacts</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:contacts[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountId[1]</con:xpath><con:element>elementAccountId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1011643</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAcceptorId[1]</con:xpath><con:element>elementAcceptorId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementTerminalId[1]</con:xpath><con:element>elementTerminalId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>N3859505801</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:elementAccountToken[1]</con:xpath><con:element>elementAccountToken</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivIbmMid[1]</con:xpath><con:element>vantivIbmMid</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4445600505192</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]</con:xpath><con:element>vantivLitleIbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitleIbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]</con:xpath><con:element>vantivLitlePbfMid</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:vantivLitlePbfMid[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:worldPayAccountDetails[1]/ns1:subMerchantId[1]</con:xpath><con:element>subMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>750497267</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]</con:xpath><con:element>paypalAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:paypalAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]</con:xpath><con:element>qbPayAccountDetails</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:accountDetails[1]/ns1:qbPayAccountDetails[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransAuthFee[1]</con:xpath><con:element>perTransAuthFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:perTransRefundFee[1]</con:xpath><con:element>perTransRefundFee</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedUpperBoundaryPercent[1]</con:xpath><con:element>qualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:qualifiedFeePercent[1]</con:xpath><con:element>qualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>midQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:midQualifiedFeePercent[1]</con:xpath><con:element>midQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedUpperBoundaryPercent[1]</con:xpath><con:element>nonQualifiedUpperBoundaryPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:nonQualifiedFeePercent[1]</con:xpath><con:element>nonQualifiedFeePercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:amexPercent[1]</con:xpath><con:element>amexPercent</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1.0</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:contractedRates[1]/ns1:suppressFeeSettlement[1]</con:xpath><con:element>suppressFeeSettlement</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]</con:xpath><con:element>status</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:status[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]</con:xpath><con:element>fraudVars</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:fraudVars[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]</con:xpath><con:element>deactivatedDate</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:deactivatedDate[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]</con:xpath><con:element>customerAccountNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:customerAccountNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]</con:xpath><con:element>alsoKnownAsName</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:alsoKnownAsName[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactFirstName[1]</con:xpath><con:element>primaryContactFirstName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Ken</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactLastName[1]</con:xpath><con:element>primaryContactLastName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Jennings</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactEmail[1]</con:xpath><con:element>primaryContactEmail</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>dudeBro75@hotmail.com</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:primaryContactPhoneNumber[1]</con:xpath><con:element>primaryContactPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>2521543586</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]</con:xpath><con:element>legalEntityAddress</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityAddress[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]</con:xpath><con:element>legalEntityPhoneNumber</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:legalEntityPhoneNumber[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]</con:xpath><con:element>infiniceptMerchantApplicationId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:infiniceptMerchantApplicationId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:id[1]</con:xpath><con:element>id</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>4001</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomer[1]/ns1:customerName[1]</con:xpath><con:element>customerName</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>NG Office</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:externalMerchantId[1]</con:xpath><con:element>externalMerchantId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as pay customer with reference ids#RawRequest#$['payAPICustomerReferenceIds']['externalMerchantId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:extras[1]</con:xpath><con:element>extras</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as pay customer with reference ids#RawRequest#$['payAPICustomerReferenceIds']['extras']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:customer_reference_id1[1]</con:xpath><con:element>customer_reference_id1</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as pay customer with reference ids#RawRequest#$['payAPICustomerReferenceIds']['customer_reference_id1']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:payAPICustomerReferenceIds[1]/ns1:practice_customer_type[1]</con:xpath><con:element>practice_customer_type</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${Provision a new merchant as finance as pay customer with reference ids#RawRequest#$['payAPICustomerReferenceIds']['practice_customer_type']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]</con:xpath><con:element>notifiedPayCustomerProvisioning</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants';
//ns1:Response[1]/ns1:notifiedPayCustomerProvisioning[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay01.dev.medfusion.net/provisioning/services/internal/merchants">
   <id>2560807923</id>
   <merchantName>nGO Test merchant</merchantName>
   <merchantLegalName>infi merchant testing 2</merchantLegalName>
   <doingBusinessAs>Robert Pine Realty</doingBusinessAs>
   <externalMerchantId>12345</externalMerchantId>
   <merchantAddress>
      <address1>100 West St</address1>
      <address2 null="true"/>
      <city>Anchorage</city>
      <state>AK</state>
      <zip>99501</zip>
      <country>US</country>
   </merchantAddress>
   <remitToAddress null="true"/>
   <statementOptions null="true"/>
   <acceptedCreditCards>
      <e>VISA</e>
      <e>MCARD</e>
   </acceptedCreditCards>
   <phoneNumber null="true"/>
   <maxTransactionLimit>100</maxTransactionLimit>
   <accountDetails>
      <routingNumber>064103707</routingNumber>
      <accountNumber>4344421</accountNumber>
      <accountType>C</accountType>
      <checkingDepositType>CommercialChecking</checkingDepositType>
      <amexSid null="true"/>
      <preferredProcessor>element</preferredProcessor>
      <federalTaxId>123456789</federalTaxId>
      <worldPayAccountDetails>
         <backingWPMerchantExists>true</backingWPMerchantExists>
         <merchantUUID null="true"/>
         <worldpayUnderwritingStatus null="true"/>
         <chainCode>0N3859</chainCode>
         <billingDescriptor>PFA*SM</billingDescriptor>
         <ownershipType>PublicCorporation</ownershipType>
         <businessType>ECommerce</businessType>
         <mccCode>8021</mccCode>
         <businessEstablishedDate>03/16/2020</businessEstablishedDate>
         <websiteURL>https://payfacsm.com</websiteURL>
         <beneficialOwners>
            <e>
               <beneficialOwnerId null="true"/>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <middleInitial>S</middleInitial>
               <title>President</title>
               <addressLine1>123 South St</addressLine1>
               <addressLine2>Apt 500</addressLine2>
               <city>Anchorage</city>
               <state>AK</state>
               <zipCode>99501</zipCode>
               <country>US</country>
               <phoneNumber>5135551234</phoneNumber>
               <ssn>123456789</ssn>
               <percentOwned>51</percentOwned>
               <dateOfBirth>12/05/1989</dateOfBirth>
               <email>jsmith@payfacsm.com</email>
               <ownerType>ControlOwner</ownerType>
            </e>
         </beneficialOwners>
         <contacts null="true"/>
         <elementAccountId>1011643</elementAccountId>
         <elementAcceptorId>4445600505192</elementAcceptorId>
         <elementTerminalId>N3859505801</elementTerminalId>
         <elementAccountToken>5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001</elementAccountToken>
         <vantivIbmMid>4445600505192</vantivIbmMid>
         <vantivLitleIbfMid null="true"/>
         <vantivLitlePbfMid null="true"/>
         <subMerchantId>750497267</subMerchantId>
      </worldPayAccountDetails>
      <paypalAccountDetails null="true"/>
      <qbPayAccountDetails null="true"/>
   </accountDetails>
   <contractedRates>
      <perTransAuthFee>1</perTransAuthFee>
      <perTransRefundFee>1</perTransRefundFee>
      <qualifiedUpperBoundaryPercent>1.0</qualifiedUpperBoundaryPercent>
      <qualifiedFeePercent>1.0</qualifiedFeePercent>
      <midQualifiedUpperBoundaryPercent>1.0</midQualifiedUpperBoundaryPercent>
      <midQualifiedFeePercent>1.0</midQualifiedFeePercent>
      <nonQualifiedUpperBoundaryPercent>1.0</nonQualifiedUpperBoundaryPercent>
      <nonQualifiedFeePercent>1.0</nonQualifiedFeePercent>
      <amexPercent>1.0</amexPercent>
      <suppressFeeSettlement>false</suppressFeeSettlement>
   </contractedRates>
   <status null="true"/>
   <fraudVars null="true"/>
   <deactivatedDate null="true"/>
   <customerAccountNumber null="true"/>
   <alsoKnownAsName null="true"/>
   <primaryContactFirstName>Ken</primaryContactFirstName>
   <primaryContactLastName>Jennings</primaryContactLastName>
   <primaryContactEmail>dudeBro75@hotmail.com</primaryContactEmail>
   <primaryContactPhoneNumber>2521543586</primaryContactPhoneNumber>
   <legalEntityAddress null="true"/>
   <legalEntityPhoneNumber null="true"/>
   <infiniceptMerchantApplicationId null="true"/>
   <payAPICustomer>
      <id>4001</id>
      <customerName>NG Office</customerName>
   </payAPICustomer>
   <payAPICustomerReferenceIds>
      <externalMerchantId>9834</externalMerchantId>
      <extras>jane's test</extras>
      <customer_reference_id1>9389HKJK</customer_reference_id1>
      <practice_customer_type>NGO Clientts</practice_customer_type>
   </payAPICustomerReferenceIds>
   <notifiedPayCustomerProvisioning null="true"/>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="afdac86a-fba4-4a67-ace0-660b38dbc539" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance for ngpay with reference ids" id="96d92fd4-496d-4d8e-9a45-f5d4e62333b8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance for ngpay with reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGpay Test merchant",
  "merchantLegalName": "ngpay merchant",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "merchantAttributes": [
    {
      "attributeName": "Test ngpay Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "KDJFKJK3408"
    },
    {
      "attributeName": "random field",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "KDJFKJK3408"
    }
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  }
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6583890-0e02-4502-8db6-62470ea0f9f7" name="Match content of [payAPICustomer]"><con:configuration><path>$['payAPICustomer']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get ngpay merchant as finance" id="a57e8cdd-b348-49b4-af14-8717d07b4102"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get ngpay merchant as finance" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as finance for ngpay with reference ids#Response#$['id']}</con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "Reference_id_test_attribute_name",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "3948394_kjhkjdakf3940-!@#$%^&amp;()"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c5e0e68c-9dc0-41fa-9b54-d924d3badbff" name="Match content of [merchantAttributes]"><con:configuration><path>$['merchantAttributes']</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as ngo" id="1f3a971b-0ed5-4703-a1dd-2088698117a0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as ngo" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "nGO Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "H_6878_6579890"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e73c2c2-1818-4c5e-a70e-9f00963c8020" name="Match content of [id]"><con:configuration><path>$['payAPICustomer']['id']</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a61d890b-8fe6-43c9-9e87-708598762b3d" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="664b393e-a756-42c1-a99f-bde4b1bde048" name="Match content of [attributeType]"><con:configuration><path>$['merchantAttributes'][0]['attributeType']</path><content>"REFERENCE_ID"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67990de8-2388-4f58-b1a8-1154a1e0f972" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb674b1b-aab5-4596-9233-437159ee9185" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as finance as ngo customer with reference id#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update ngo merchant as ngpay updaing the reference ids" id="9f801641-bc07-42f3-9fea-75f773c3391f"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Update ngo merchant as ngpay updaing the reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as ngo#Response#$['id']}/wpSubMerchant?updateType=GENERAL_INFO</con:endpoint><con:request>{
	"id":${Provision a new merchant as ngo#Response#$['id']},
  "merchantName": "nGpay Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
   "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "H_6878_6579890"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":0,"customerName":"NG Pay"}
 
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant after update" id="72550871-62c6-4512-b39e-4cfee69dfcc9"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Get merchant after update" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants/${Provision a new merchant as ngo#Response#$['id']}</con:endpoint><con:request>{
	"id":${Provision a new merchant as ngo#Response#$['id']},
  "merchantName": "nGpay Test merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
   "merchantAttributes": [
    {
      "attributeName": "NGO Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "H_6878_6579890"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":0,"customerName":"NG Pay"}
 
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as finance as ngo customer without reference ids" id="d70935c3-ce28-47ac-990c-ac9e2c4aa153"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as finance as ngo customer without reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "New merchant for ngo",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":100,"customerName":"NG Office"}
 
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b6a2669-7802-4645-b273-badd99c94711" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a5d65bda-ea6a-4f43-b9b2-c609123e3a6b" name="Match content of [merchantAttributes]"><con:configuration><path>$['merchantAttributes']</path><content>[ ]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as pay customer with reference ids" id="ef42e28a-7df0-4f66-ba9e-2ee5ab2bd3cd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as pay customer with reference ids" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "Pay cust merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
   "merchantAttributes": [
    {
      "attributeName": "Test pay customer Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "KDJFKJK3408"
    },
    {
      "attributeName": "sapId",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "093404"
    },
    {
      "attributeName": "SAP ID",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "94045"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b6a2669-7802-4645-b273-badd99c94711" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="676c8347-11b9-4d80-b503-e49c25beb9e7" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b05b4299-27ad-412d-8768-f36c5f20dd1a" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Provision a new merchant as pay customer with can" id="8af7a2d2-721c-45fe-9b8e-eb01634da303"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Provision a new merchant as pay customer with can" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "Pay cust merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
  "customerAccountNumber":39489,
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
   "merchantAttributes": [
    {
      "attributeName": "Test pay customer Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "KDJFKJK3408"
    },
    {
      "attributeName": "sapId",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "9485n0945"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b6a2669-7802-4645-b273-badd99c94711" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="676c8347-11b9-4d80-b503-e49c25beb9e7" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b05b4299-27ad-412d-8768-f36c5f20dd1a" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Copy of Provision a new merchant as pay customer with can" id="63bbd508-d680-4d13-98ac-69e6fb1f1585"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="707ed2f1-1939-4de2-aa9e-c7060bf5c264" name="Copy of Provision a new merchant as pay customer with can" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/merchants </con:endpoint><con:request>{
  "merchantName": "Pay cust merchant",
  "merchantLegalName": "infi merchant testing 2",
  "doingBusinessAs": "Robert Pine Realty",
  "externalMerchantId": "12345",
 
  
   "merchantAddress": {
      "address1": "100 West St",
      "city": "Anchorage",
      "state": "AK",
      "zip": 99501,
      "country": "US",
      "worldPayAddressType": "Physical"
  },
   "merchantAttributes": [
    {
      "attributeName": "Test pay customer Practice id",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "KDJFKJK3408"
    },
    {
      "attributeName": "sapId",
      "attributeType": "REFERENCE_ID",
      "attributeValue": "9485n0945"
    }
  ],
  "acceptedCreditCards": [
    "VISA",
    "MCARD"
  ],
  "accountDetails": {
    "preferredProcessor": "ELEMENT",
    "accountNumber": "4344421",
    "routingNumber": "064103707",
    "accountType": "C",
    "checkingDepositType" : "CommercialChecking",
    "federalTaxId": "123456789",
    "worldPayAccountDetails": {
      "chainCode": "0N3859",
      "billingDescriptor": "PFA*SM",
      "ownershipType": "PublicCorporation",
      "businessType": "ECommerce",
      "businessEstablishedDate": "03/16/2020",
      "websiteURL": "https://payfacsm.com",
      "mccCode": "8021",
      "beneficialOwners": [
        {
          "title": "President",
          "firstName": "John",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135551234",
          "email": "jsmith@payfacsm.com",
          "percentOwned": 51,
          "ssn": "123456789",
          "dateOfBirth": "12/05/1989",
          "addressLine1": "123 South St",
          "addressLine2": "Apt 500",
          "city": "Anchorage",
          "state": "AK",
          "country": "US",
	      "zipCode": "99501",
          "ownerType": "ControlOwner"
        }
      ],
      "contact": [
        {
          "title": "Relationship Manager",
          "firstName": "Jane",
          "middleInitial": "S",
          "lastName": "Smith",
          "phoneNumber": "5135559876",
          "phoneNumberExt": "5432",
          "email": "jasmith@payfacsm.com",
          "faxNumber": "5135559876",
          "type": "CustomerService"
        }
      ]
    }
  },
  "maxTransactionLimit": 100,
  "principleDetails": {
    "principleName": "Julio Jones",
    "principleTitle": "Sr. Principle Engineer",
    "principleSocialSecurityNumber": "123456789"
  },
  "primaryContactFirstName": "Ken",
  "primaryContactLastName": "Jennings",
  "primaryContactEmail": "dudeBro75@hotmail.com",
  "primaryContactPhoneNumber": "2521543586",
  "contractedRates" : {
  	"perTransAuthFee" : 1,
  	"perTransRefundFee" : 1,
  	"qualifiedUpperBoundaryPercent" : 1,
  	"qualifiedFeePercent" : 1,
  	"midQualifiedUpperBoundaryPercent" : 1,
  	"midQualifiedFeePercent" : 1,
  	"nonQualifiedUpperBoundaryPercent" : 1,
  	"nonQualifiedFeePercent" : 1,
  	"amexPercent" : 1
  },
  "payAPICustomer":{"id":2000,"customerName":"Test Pay Customer"}
  
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1f1e8a5f-16ed-4269-9bec-23e553871475" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="32ecdf74-c686-4ba3-a61a-212fed3dd6f1" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef91e47b-587f-4810-91c0-3c8f5535e013" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b6a2669-7802-4645-b273-badd99c94711" name="Match content of [customerName]"><con:configuration><path>$['payAPICustomer']['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="676c8347-11b9-4d80-b503-e49c25beb9e7" name="Match content of [attributeName]"><con:configuration><path>$['merchantAttributes'][0]['attributeName']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeName']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b05b4299-27ad-412d-8768-f36c5f20dd1a" name="Match content of [attributeValue]"><con:configuration><path>$['merchantAttributes'][0]['attributeValue']</path><content>${Provision a new merchant as pay customer with reference ids#RawRequest#$['merchantAttributes'][0]['attributeValue']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d066b100-4a43-40e7-9ea7-6c5a3a9878ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>628ac0f6-e785-4e86-a6d4-41d5dea0e65e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9b8d9e4-b26e-412f-aa83-e09d3f356118</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38d90e46-cb44-4a32-9a45-c1b2b6691168</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>836e066a-4d0f-47c1-b306-94f05ce7ebd3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40869619-8aad-46d3-bbb5-4328f9a8c4d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6d3847f8-45ca-415c-88f0-fb0039666f43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e175ab3-59fb-4478-8aad-b7216430c82b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a4a0136a-bbf5-4473-8c93-47dfae7a9b56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5ddb2e5-7f0c-4b3e-9d81-3404bdfb4355</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92c89a33-3005-49b9-b789-0e9e9aa61b90</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4fde65ee-32d3-4269-8e4a-1e686afd2879</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e0aa07c3-4873-495e-bdc4-b4defcff331b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea90abfa-9cf9-459e-a97a-385daf0b218d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7f55d44-d64a-431f-b78f-4861b31a2264</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a57e8cdd-b348-49b4-af14-8717d07b4102</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f3a971b-0ed5-4703-a1dd-2088698117a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>72550871-62c6-4512-b39e-4cfee69dfcc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0ac296a3-e6ab-4cfe-b92b-d3f77c1a6564</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7898bd79-82dc-4df4-bc6a-fa4c19cdf7aa" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Pay api customer" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="httprequest" name="POST token as system" id="d0ce95e5-71f8-4f18-b5f4-85eba0017dc5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="02a5443f-0904-4c6f-9554-65e988e5d51f" name="POST token as system" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://d1-ping-01.dev.medfusion.net/as/token.oauth2?grant_type=client_credentials&amp;client_id=SystemJwtValidationClientV1&amp;client_secret=lWiNlRcD1snTlSNXmi0GfGFYRHmNtf1iFoawSKAL4M1kICsALm1pF4gwwvEddpIF</con:endpoint><con:request/><con:assertion type="JsonPath Existence Match" id="82450bed-afbf-4f77-b5cc-1007e8f73650" name="Check for existence of [access_token]"><con:configuration><path>$['access_token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="986a8037-d7d4-416b-8cc4-ad0bf0e7c214" name="Match content of [token_type]"><con:configuration><path>$['token_type']</path><content>"Bearer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="48a26895-5e2a-4443-a85a-ddde15b0626c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Get all customers" id="3bb5fa3d-fde2-4622-ae64-267602d512b3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a356f09c-204f-4edb-802e-764d13c47ac0" name="Get all customers" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/internal/apiCustomer</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="619a0107-ccbf-42f7-b765-c6138f9a0b63" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf270bda-0924-4387-a5cb-860f403e1961" name="Match content of [id]"><con:configuration><path>$[0]['id']</path><content>4001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9986cc27-faab-414a-8d6a-cea097340a18" name="Match content of [customerName]"><con:configuration><path>$[0]['customerName']</path><content>"NG Office"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47caabab-56e1-4e89-aa40-4c07d1230edf" name="Match content of [id]"><con:configuration><path>$[1]['id']</path><content>4002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b972ed5e-d5c5-498d-adf6-fc9423e36afe" name="Match content of [customerName]"><con:configuration><path>$[1]['customerName']</path><content>"Test Pay Customer"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-NGO" id="7f6bb9e7-cdc1-4dd8-b76f-39b6f0ad6cdc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-NGO" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/87b7e73a-ddab-4849-9af9-467b32c95ef2/tokens</con:endpoint><con:request>{
  "clientId": "PayApiClient",
  "clientSecret": "XFXNlyJL40mZk5PTH7GRKhqGt7EDVvesElr3tpTPgpq9PQ2yXgUQOK8ll0InQyzo",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"PayApiClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url as ngo customer" id="7f1c90bc-47bd-4b43-b0a1-2a8c07d22bdf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url as ngo customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>	{
	  "callbackURL": "https://en2xaohr8z3dzmq.m.pipedream.net"
	}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url as ngo customer(blank)" id="f2e37830-8aed-4b36-bffd-7d6a862997dd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url as ngo customer(blank)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>	{
	  "callbackURL": ""
	}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url as ngo customer(null)" id="4bebd9c8-32b4-43f3-8b3c-a1cf27a7eaf6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url as ngo customer(null)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/87b7e73a-ddab-4849-9af9-467b32c95ef2/callbackURL</con:endpoint><con:request>	{
	  "callbackURL": null
	}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-NGO#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-NGO#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST token-Pay customer" id="58be19d9-9469-4f95-a8b9-9628652e7e88"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="c382f4f4-c4df-47b4-9797-f46fe36ec207" name="POST token-Pay customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-pt-aws01.dev.medfusion.net:8080/api-customer/services/v1/customers/75164da9-5747-449f-be45-c2e28f3ff77b/tokens</con:endpoint><con:request>{
  "clientId": "NGPayTeamTestClient",
  "clientSecret": "UEK04jUo1zUWndtLaFVSptouSgRHepwswIdAGfgNn9nvZmciJqukSqh7Vh6Jaeaj",
  "scope": "api:pay"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3e75155b-bf3b-4f57-80d8-dfa4ad819812" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7987b6b7-1cef-406b-aa51-b7c30d0f5deb" name="Match content of [clientId]"><con:configuration><path>$['clientId']</path><content>"NGPayTeamTestClient"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="050ef050-15f6-4c31-bfe8-4b782691484e" name="Check for existence of [token]"><con:configuration><path>$['token']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Store callback url for Pay Customer" id="821578ca-07b5-48d9-86a0-f5165a519e62"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2f5e4ea6-8f40-4839-9412-ea0964b1e82a" name="Store callback url for Pay Customer" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8083/gateway-proxy/services/v1/customer/75164da9-5747-449f-be45-c2e28f3ff77b/callbackURL</con:endpoint><con:request>{
  "callbackURL": "https://en5xb6d5123mrof.m.pipedream.net"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="b6a86a33-89f8-4d90-b036-22b8ab20eb87" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token-Pay customer#Response#$['token']}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token-Pay customer#Response#$['token']}</con:default></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POst store callback url for ngo from mp" id="33226f5a-efdc-470d-917b-f1cf89f746e9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="e2e094bc-c25a-4003-9884-150389107e4a" name="POst store callback url for ngo from mp" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/apiCustomer/87b7e73a-ddab-4849-9af9-467b32c95ef2/storeCallback </con:endpoint><con:request>	{
	  "callbackURL": "https://en2xaohr8z3dzmq.m.pipedream.net"
	}</con:request><con:assertion type="Valid HTTP Status Codes" id="f331d25a-f0d2-4d9f-ab47-3e042febe408" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET  callback url for ngo in mp" id="dc553c35-946e-4007-8128-33f8d797c273"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="e2e094bc-c25a-4003-9884-150389107e4a" name="GET  callback url for ngo in mp" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v9/apiCustomer/87b7e73a-ddab-4849-9af9-467b32c95ef2/getCallback </con:endpoint><con:request>{
  "callbackURL": "https://gmail.com"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="81b4d257-6655-4d5b-b0ce-146858e4612a" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="252d1f17-2a42-497a-b763-6ae8b4b773ec" name="Match content of [data]"><con:configuration><path>//data[1]/text()</path><content>${POst store callback url for ngo from mp#RawRequest#$['callbackURL']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer ${POST token as system#Response#$.access_token}</con:value><con:style>HEADER</con:style><con:default>Bearer ${POST token as system#Response#$.access_token}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>callbackType</con:name><con:value>MERCHANT_PROVISIONED</con:value><con:style>QUERY</con:style><con:default>MERCHANT_PROVISIONED</con:default></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d0ce95e5-71f8-4f18-b5f4-85eba0017dc5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f1c90bc-47bd-4b43-b0a1-2a8c07d22bdf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f6bb9e7-cdc1-4dd8-b76f-39b6f0ad6cdc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3bb5fa3d-fde2-4622-ae64-267602d512b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>33226f5a-efdc-470d-917b-f1cf89f746e9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dc553c35-946e-4007-8128-33f8d797c273</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2e37830-8aed-4b36-bffd-7d6a862997dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4bebd9c8-32b4-43f3-8b3c-a1cf27a7eaf6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:requirements/><con:properties><con:property><con:name>Authorization</con:name><con:value>opentoken T1RLAQIBCHIHnUkVaTX3xqxoXRNCA9KI2BBCUmLZFKXT4pPq4IW5WMyFAADwufMenY2yl-7-gVY2HXL9JI6HGYT_NEZnO2EOqWY0ZzqUpH0UDGxmMmJV9SqECN5srUkvIEwthHeh5xq0Pgbrn_UV5aH_4XeA25K5rr4kM3AcWFCDMVHWvFjK0WzlHOlXLqFOVwzyOa80dLdMTwaW00dibEdzsxSGh6NVD9-1qthmbMjUiMlCXKm5kSGV_eKTKCPjxNMYZ9dov4P2xKeBMxhs6Kz3S5P0_FmnUdT9jY9xHKJJ37sCF9ji_hrMPaQF-NX_h44mY_fWogL75Z9ZMlcHys52ZfnG3BiV-MguGmDmU2-IT-FdwcSGk7AQBYu8</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>dev gwr</con:name><con:type>OAuth 2.0</con:type><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/><con:parameters/></con:reporting><con:reporting/><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:authRepository><con:oAuth20AuthEntry><con:name>dev gwr</con:name><con:type>OAuth 2.0</con:type><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod></con:oAuth20AuthEntry></con:authRepository><con:loadUiTest name="dev LoadTest" id="33c53aed-6fec-4892-9e30-3a6d855f46f2"><con:settings><con:setting id="soapUIObjectSourceId">1d65619d-c509-4957-a77b-2614d71eaf2d</con:setting><con:setting id="soapUIObjectSourceType">soapUIObjectSourceType_TestCase</con:setting></con:settings><con1:loadui-project id="e3874914-801c-4cc1-a65a-810452f7fc03" label="dev LoadTest" xmlns:con1="http://eviware.com/loadui/config"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con1:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con1:property propagates="true" key="Temporary project" type="java.lang.String"/><con1:property propagates="true" key="ModelItem.rate" type="java.lang.Long">10</con1:property><con1:property propagates="true" key="ModelItem.loadDistributionType" type="com.smartbear.load.facade.LoadDistributionType">PerScenario</con1:property><con1:property propagates="true" key="ModelItem.remoteMode" type="java.lang.String"/></con1:properties><con1:attributes/><con1:addons/><con1:scene label="New Scenario" id="390dc64a-8960-405c-8f51-e0b1cab4744c"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="SceneItem.scenarioRatePercentage" type="java.lang.Long">100</con1:property><con1:property propagates="true" key="SceneItem.scenarioRateSpecific" type="java.lang.Long">10</con1:property><con1:property propagates="true" key="ModelItem.samplerOutputLevel" type="com.eviware.loadui.api.component.SoapUISamplerOutputLevel">TestCaseAndAllTestSteps</con1:property></con1:properties><con1:attributes/><con1:addons/><con1:component type="com.eviware.loadui.impl.component.IntervalComponent" label="Interval 1" id="56a76ec3-d890-494b-8570-6e7b2354240e" category="Scheduler"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="startAt" type="java.lang.Long">0</con1:property><con1:property propagates="true" key="duration" type="java.lang.Long">5</con1:property><con1:property propagates="true" key="unit" type="java.lang.String">Sec</con1:property><con1:property propagates="true" key="mode" type="java.lang.String">Single</con1:property><con1:property propagates="true" key="defaultMode" type="java.lang.Boolean">true</con1:property></con1:properties><con1:attributes><con1:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con1:property></con1:attributes><con1:addons/></con1:component><con1:component type="com.eviware.loadui.impl.component.generators.FixedVU" label="Fixed Load 1" id="56477b58-ca14-48d5-94fb-073d183bdd74" category="Generators"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="limitVU" type="java.lang.Long">10</con1:property><con1:property propagates="true" key="load" type="java.lang.Long">5</con1:property><con1:property propagates="true" key="interval" type="java.lang.Long">1000</con1:property></con1:properties><con1:attributes><con1:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Load</con1:property></con1:attributes><con1:addons/></con1:component><con1:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="gateway proxy:dev" id="543b75fd-1d3d-4374-886a-505ddb056ae2" category="Runners"><con1:properties><con1:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con1:property propagates="true" key="concurrentSamples" type="java.lang.Long">1000</con1:property><con1:property propagates="true" key="property_name_is_not_relevant_for_private_property" type="java.lang.Long">9223372036854775807</con1:property><con1:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con1:property><con1:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con1:property propagates="true" key="_thinkTime" type="java.lang.Long">0</con1:property><con1:property propagates="true" key="ReadyApiTestCase" type="com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase">1d65619d-c509-4957-a77b-2614d71eaf2d</con1:property><con1:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con1:property><con1:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con1:property><con1:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con1:property><con1:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con1:property></con1:properties><con1:attributes><con1:property key="com.eviware.loadui.api.model.ComponentItem@type">Ready API TestCase Runner</con1:property></con1:attributes><con1:addons/></con1:component><con1:connection outputTerminalId="56a76ec3-d890-494b-8570-6e7b2354240e/outgoingTerminal" inputTerminalId="56477b58-ca14-48d5-94fb-073d183bdd74/stateTerminal"/><con1:connection outputTerminalId="56477b58-ca14-48d5-94fb-073d183bdd74/triggerTerminal" inputTerminalId="543b75fd-1d3d-4374-886a-505ddb056ae2/triggerTerminal"/><con1:connection outputTerminalId="543b75fd-1d3d-4374-886a-505ddb056ae2/runningTerminal" inputTerminalId="56477b58-ca14-48d5-94fb-073d183bdd74/Sample Count"/></con1:scene><con1:statistics><con1:page title="DefaultLoadUIStatisticPage"><con1:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="" groupType="Monitors"><con1:attributes><con1:property key="GroupId">6adaff24-523e-47a6-9a28-0aea0db6c269</con1:property></con1:attributes></con1:chartGroup></con1:page></con1:statistics></con1:loadui-project><con:loadUITestScenario projectId="e3874914-801c-4cc1-a65a-810452f7fc03" scenarioId="390dc64a-8960-405c-8f51-e0b1cab4744c" name="New Scenario" id="d082bc6c-2c9d-4444-a1c5-878954ce5070"><con:settings/></con:loadUITestScenario><con:loadUIPanelData id="8f65aaa2-1f1c-4b7e-96ff-97db4471f8c5"><con:panel>Log</con:panel><con:data><con:paramName>column_width@Timestamp</con:paramName><con:paramValue>84</con:paramValue></con:data><con:data><con:paramName>column_visible@Timestamp</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@ID</con:paramName><con:paramValue>74</con:paramValue></con:data><con:data><con:paramName>column_visible@ID</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@Test step status</con:paramName><con:paramValue>120</con:paramValue></con:data><con:data><con:paramName>column_visible@Test step status</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@TriggerTimestamp</con:paramName><con:paramValue>84</con:paramValue></con:data><con:data><con:paramName>column_visible@TriggerTimestamp</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@TimeTaken</con:paramName><con:paramValue>115</con:paramValue></con:data><con:data><con:paramName>column_visible@TimeTaken</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@_wait_time_</con:paramName><con:paramValue>106</con:paramValue></con:data><con:data><con:paramName>column_visible@_wait_time_</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@Bytes</con:paramName><con:paramValue>52</con:paramValue></con:data><con:data><con:paramName>column_visible@Bytes</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@HTTP Status</con:paramName><con:paramValue>90</con:paramValue></con:data><con:data><con:paramName>column_visible@HTTP Status</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@CurrentlyRunning</con:paramName><con:paramValue>75</con:paramValue></con:data><con:data><con:paramName>column_visible@CurrentlyRunning</con:paramName><con:paramValue>true</con:paramValue></con:data><con:data><con:paramName>column_width@Request</con:paramName><con:paramValue>67</con:paramValue></con:data><con:data><con:paramName>column_visible@Request</con:paramName><con:paramValue>false</con:paramValue></con:data><con:data><con:paramName>column_width@Response</con:paramName><con:paramValue>77</con:paramValue></con:data><con:data><con:paramName>column_visible@Response</con:paramName><con:paramValue>false</con:paramValue></con:data></con:loadUIPanelData><con:reportParameters/></con:loadUiTest><con:tags/></con:soapui-project>