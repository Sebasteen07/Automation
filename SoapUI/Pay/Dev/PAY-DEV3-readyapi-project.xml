<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ee6764c2-8713-46be-8ba6-42998e99f423" created="2.8.2" activeEnvironment="Default environment" name="PAY DEV3" resourceRoot="" updated="2.8.2 2019-08-27T17:04:01Z" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite id="3662043f-b730-4237-82de-f31dae1d30ff" name="QBPAY Dev3"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="fba8e5ed-f0af-422a-a994-97ed9cf078dd" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Authorize" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8c4b5382-0f51-4f2e-9e01-15bec2f1c044"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"97798626217-385633"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"789-716646661853969972456"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"E1VW082DSYRJ"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="04588e21-4ad6-492a-8c24-18e752d813b3"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor" id="5a720066-668a-458e-ab8f-d297ad761542"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2890466-1fc3-453e-99e5-5d0cf31dd114" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Copy of Match content of [threadId]" id="0dc82351-49ec-475c-b166-73f204f77ed5"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Copy of Match content of [threadId]" id="8f165dd4-909e-4d8a-9e85-8885c31b1c2b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="e8dc5243-0e37-4dbf-aa5e-ee891a18752b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="41cadebc-c65f-4168-af50-876400a39490"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="1300f020-934c-4c1c-89a8-6ea8e9467e48"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="12d76c9a-7c24-4c8c-abf2-88bb52fac384"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="31357525-1dd4-43fc-b270-9f3b14dca07a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560791218</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="f0fb90bb-e167-44b4-9105-fcfdc3b01025"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="8cbad08a-e8b6-410d-bd81-35a0b41c21cc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3ef5ca01-84fa-413a-b5ff-08894b734b63"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="ea3bb74b-89db-4869-9063-fb96f6567a5b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="763e2306-1b95-45d3-8c4b-7821fd15f626"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- MORE THAN 10000" id="a72fb19a-bdd4-4df5-b030-11715ad7bb6c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3a49efa6-b407-4969-86ff-919f17647d57"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="5dc4b039-e60a-45ad-89e3-ab9198cae296"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86d4eed6-d650-4af9-8830-72606df380a7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 4" id="ff349f69-deb3-4af6-92f2-9408d6f80a3b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to modulator- MORE THAN 10000" id="e58ca2a1-5668-4730-83a0-b0d0b3ce558f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3a49efa6-b407-4969-86ff-919f17647d57"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="5dc4b039-e60a-45ad-89e3-ab9198cae296"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86d4eed6-d650-4af9-8830-72606df380a7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b0056877-bab6-48d3-b175-3e6807b0efa8"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- EXPIRED CARD" id="54b354cd-712b-4e33-b28b-410ebadacf23"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="0f01e39a-dc74-41a9-a32f-d98a010c0d65"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="4d85a164-ecb1-46d2-b15f-ce22a6991891"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 5" id="9bafcbde-88bc-4f92-aa86-f0137dc57676"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- EXPIRED CARD" id="05212a51-aee2-477e-9d6c-3176bfee9d43"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="0f01e39a-dc74-41a9-a32f-d98a010c0d65"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="4d85a164-ecb1-46d2-b15f-ce22a6991891"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="d68ab0ff-d0e9-4ec4-96bb-01ea042596b9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CARD" id="cead7246-9da3-44b8-9050-8dc899ab5294"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="a2d72fda-4689-4d8f-99a1-0e8139f9d9f1"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="f315a398-663b-4725-a894-4c0ae5cb91c7"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 6" id="064b9dd1-1b9c-4c21-805a-5f8ace8ad66a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="a3e74ee4-3c15-44c8-8b1c-858f0b0faf75"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="a2d72fda-4689-4d8f-99a1-0e8139f9d9f1"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="f315a398-663b-4725-a894-4c0ae5cb91c7"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06268f7a-8d3f-4e47-8498-9521d2ed1972" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="b04fde64-0b75-4536-bb7c-fe85be8c833d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CVV" id="4fd8072d-94d9-4a13-a4d9-97bbdec70ea0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3276cc2e-719e-417f-98d0-f6f11c9c3a32"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="b6ffef12-c16a-41fb-aa11-04e3d901fc1b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 8" id="5e6b421e-0419-4d00-bef8-fc47e34e0712"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="e5c57232-177d-4929-bfc5-22e6c893aae1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="3276cc2e-719e-417f-98d0-f6f11c9c3a32"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="b6ffef12-c16a-41fb-aa11-04e3d901fc1b"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="fefc75b8-c51c-4ce8-a22b-ef4260614e22"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="84050f5a-c509-42ef-8093-7afb150ccee8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="55c4de47-e0a3-4fb6-92dd-bec6e1ca0786"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="0ae1196e-a9c5-4a6e-8f6a-535cd743c55e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 9" id="709a073e-9f28-4a0e-9799-79553bda10d4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulaotr- AMEX" id="e70b325e-1b09-4721-801d-0d6b0a01efc7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulaotr- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="55c4de47-e0a3-4fb6-92dd-bec6e1ca0786"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="0ae1196e-a9c5-4a6e-8f6a-535cd743c55e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="27c9517c-7463-47b9-a612-3ff376434da8"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="fbec5ca9-a381-40f3-814c-6a66455e5ac7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="2fb93f45-47f3-4e61-8ef3-8adf85ce3a87"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="57632d27-49e9-4c0e-a556-c604a6d7d65d"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script" id="fc0d523c-0332-458e-baf3-5dbf157f1207"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-VALID AUTHORIZE" id="5f680e35-54ad-4693-a804-192bdc237d52"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
   "externalTransactionId":"ENHRYX0TI1NW",
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "CAPTURE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="faeaf23a-d4a1-490d-b6cb-49d0ef62990e"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="6ed6a12a-0cab-4876-9453-168b3d16d39a"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="c4d47384-1076-44ac-b7e7-9d528154ae04"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )



import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST to  QBPAY processor-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST to  QBPAY processor-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID CAPTURE" id="0a29bc1a-3088-4a5f-a04b-a964de1af889"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]" id="8a005a1c-5615-4df2-943f-a10466adda02"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [threadId]1" id="da65cc53-11b5-40e9-9f70-d4790dfe3b69"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ea160c2-8e32-409c-b68d-64aff7b234ff" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3a323fb5-6f58-48ba-9c6a-e5c95a42518e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ac6af74-bcee-454b-822c-2e0c30ef99dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c3e92c0-8c6f-401a-ab32-c5aef3498dce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5fee7a24-0d3a-4996-81bc-9f982aa74fdd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c97cbedf-8a72-4107-a979-ecdc4404eacf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45535682-cb4f-4090-8b88-ca87fca024ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2049883-656a-4e1a-b398-4a881ef6e068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc75437f-320e-4519-b0b7-a0838638c245</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe5ab526-4153-4fc4-bdba-b41ae0875e63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3760d29-91e0-4853-b897-ac9884ef0504</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>358cec94-df71-4a19-8f82-ae4477064dd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0e955963-2a0d-4aef-88b3-2a7b7047b56b" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="348bb962-cb00-411a-8591-f0360f884b3a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"248164167912-21353"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="4102b5af-f1f9-4329-b8ba-6b5ae5786d49"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor" id="bde52e5b-bb31-467d-9860-1cb4a64eb101"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="637bd57f-501d-47a1-8e53-f20b27b90cb6"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="ce2ba146-6c96-45b0-a6c9-479e209335de"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="a269e67f-6d3b-4e23-a70b-002a732ada79"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="53975500-b9d5-41fe-ad92-1ec32ff12992"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="ace4d7e3-169a-4c28-aaeb-2e7cddfe59b5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant through modulator" id="fd813831-7d5c-4098-a1e1-440128239c82"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8d7afaf-d6e8-44d7-81a9-1d383a4d38ba" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b032eb9-ec8d-491e-a299-2f18681ecbc6" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="be160c87-8679-44d3-965c-3b49de389d13" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03290dfc-32eb-4e56-9271-73ef89dcc70b" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="b41bee79-555a-469c-9bbf-8ef432bee5f6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="426d466f-51a7-4f7a-8a5f-a0a23ecfb0bb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="09a6367b-0cd1-4426-a1e2-a0aa69a15507"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- MORE THAN 10000" id="4c33427a-bbfe-4287-8cb0-c2e42ad4cb4d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4930c70-6b68-41e2-aa3b-4636414aa0f6" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2371bde6-2057-47b9-8d2f-a2c1eb28cd27" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="db8f163b-ccb5-48b4-8067-b76d8cdffb40"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- EXPIRED CARD" id="0fabe539-41c7-4795-9fa6-0f2ee2ae68c6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f618c8a0-c5c2-4612-a8e2-80efd8bdd9e5" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="91bfbc22-c129-411f-98fc-45a6fc52abc4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CARD" id="9cac2f17-5490-40e4-a946-ded041b3372e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="f3564112-e403-4971-9e9b-a91e457afc0b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CVV" id="4ccaf19b-73b2-42ef-b992-29dd86a9c522"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="a08492a9-20f7-47c6-b19c-2f6514a687ea"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="124f0669-85e0-41b5-870b-9900e0637d50"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="22ac8d61-a3a6-467d-97a2-95263424f275"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="5486046b-998b-488c-aacb-03bcd05348ed"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="d3eb4043-65f3-4330-8d00-8341d13c71fb"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DUPLICATE CHARGE" id="8122d675-79e4-4893-98ef-4ac77387baf8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DUPLICATE CHARGE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="d747133a-b9fb-4b42-b8fa-07240ff6ce77"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor without cvv" id="f98c7a7b-20a9-4455-a98c-0f32056db755"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 13" id="ce7a5401-3de2-42ff-8fcc-ced837bc379b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator without cvv" id="a1468398-c87f-438f-972e-f87ad9ee9c55"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b511eed2-9c20-4d8e-a8d5-fc7b33421140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ef5c8b-97bc-4feb-8139-9b79014e3f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aaa1be1-79c2-4b16-95e0-1a5ceae23876</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c123c5d7-b29d-49d9-99f3-0279f221f9db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c2d18eee-1072-4ccc-9f52-45327dfcc21c" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Void a sale" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3b5ce022-12da-4b02-9265-10c2d0d85851"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"282-82177667182-7933-7829"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"ER89S3G5HLO7"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="b0e0f7df-3c4a-4401-9056-62915a4a8b1a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-SALE" id="548d32c6-d82f-4175-9264-268e4856f936"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Get transaction id" id="c7ab55a8-ce94-433e-922a-d97f774f9065"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VOID" id="224cacbb-d5e4-4452-aeee-dd1d8aea9622"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VOID" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="54924208-62e7-4ce6-a607-dc7434203862"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-sale" id="feb18f20-826a-4977-9489-4b49d2253336"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Get transaction id 2" id="4ccc9a1f-b5e5-4d01-9252-41f8e8f742dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VOID" id="d3927ddb-ed1a-48cc-9bd3-3a59d3ce15b7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VOID" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="f12fce74-6d4b-47ec-ad48-35542e5f4995"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to QBPAY for an already voided sale" id="dc8370f1-2275-4f3a-8159-628973d9bd56"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to QBPAY for an already voided sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b032eb9-ec8d-491e-a299-2f18681ecbc6" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="be160c87-8679-44d3-965c-3b49de389d13" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03290dfc-32eb-4e56-9271-73ef89dcc70b" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf352d6-c80d-4d8c-82d5-60b81678bda1" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="0af2330d-54c6-402c-bb13-02c64673a291"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="dc03ffe0-341b-4c3a-91f9-01751aaf99c7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id" id="963d5cff-2715-47b8-befb-62f24c9954a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- master card#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- master card"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Void master card" id="af3cbfe0-5aab-4d88-9929-2dfeed143bcb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Void master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="24da71b0-d28c-41b4-bb0c-53488911290f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="cfbec9a1-9b0c-44c1-b492-11605b1e8096"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for amex" id="8e574e06-2de5-4cde-bd2f-892dd43b8549"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- AMEX#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- AMEX"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Void amex" id="632abe78-8846-4220-983e-013664a43ecb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Void amex" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="a9a6b663-e173-4252-a76c-6bedba70410a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-DISC" id="f96cc4f8-9d2f-4ec5-8f9f-3e10a53f8b27"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for disc" id="35a21d04-f4ff-4985-9ff3-0efd942ebfeb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through the modulator-DISC#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through the modulator-DISC"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-DISC void" id="8c63f4ee-c6aa-4f62-8e69-3e9cfe96f95f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-DISC void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id 2" id="70e2acc7-6fc0-4766-98a6-c06e7a840545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through the modulator-DISC void#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through the modulator-DISC void"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-refund a void" id="f2ea435d-382f-40d8-99dd-8cc6f7bf8f44"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-refund a void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":"" ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b511eed2-9c20-4d8e-a8d5-fc7b33421140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ef5c8b-97bc-4feb-8139-9b79014e3f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aaa1be1-79c2-4b16-95e0-1a5ceae23876</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1401655-636f-46ee-9d82-3b31999cf786</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ad2cae3-8693-4e95-a06f-3414f67af9dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0060df79-6071-4157-ae97-135c6ebda444</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb113116-e34a-403d-b1d7-c0cfbc0cc5a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1931b24c-8093-416e-955f-00395a0c2f1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6ed3540-911f-4cd3-8faf-e04a908a168f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c094c7a6-c84a-4d64-a5fc-4ce4ab7f5fff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6d79c52-322e-4e6a-84ae-68a79808cc5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26c6efde-6b26-44fc-84c3-671ec95c30e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ac9dcc0-a9bf-421f-b888-6246f93e09bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="454dfbe8-bbd2-4fe0-af6e-369fda4e69f9" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Authorize errors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="55a28ee3-9518-45cf-bab9-32487d4f463e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"3683584568943917878233-97"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d77b1fc6-37f4-45e4-9f54-f1be9ecbe85d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Valid authorize" id="9c5d56e7-53e9-42e3-94e2-4bfb9b4d5dec"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Valid authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=0",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="0dbab70b-6d4a-4f19-bf6a-0217dab7357e"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-General decline" id="26c22ec6-687a-46c0-9d18-f5ee164abe0b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="993002e7-526b-4cb1-9ff4-caf770a41aaa"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="5e916301-ab62-4ff9-9076-c99e6887b1b1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17a03dbc-8a9c-46f7-a822-f87efec92596" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fdd5e1e-2d53-428d-a990-a81f1bc5cfab" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="d66678d4-2dc3-4ed3-bd81-9169ebd3b721"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="5f672764-89fd-40af-ba7a-eb4289c8db52"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- temporary error" id="3c030d13-ad87-42e3-8a44-4c4c86021e29"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="45fdfaa5-2e71-4120-8067-0b2109bc523b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- temporary error" id="591971d0-a05c-45f8-8ab4-8b7f581ed73e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="2cab7660-5ba3-4374-97ae-020411b84f3b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POSTthrough modulator- MORE THAN 10000" id="f4dede82-9161-4714-92ed-83423d03d0d5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POSTthrough modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac554ea-992c-4246-ab26-270362094640" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cda52a9-65b9-4765-b92f-8a46b2e734d7" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="740c5e25-b49c-4c3e-b9c8-ab6911658397"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Invalid card error" id="6aa540b3-351e-4b25-bd67-6007672544fe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="1a8ab564-8df8-4211-88b8-7061080a68c2"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Expired card" id="37a00a91-84e0-4d26-b049-e33a0f1f0dbd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Expired card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Albert",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e21ed4e7-a9de-4a6b-8fbe-e3f52bf861bb" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="3a2fa440-6243-465e-ae98-8a43174b4105"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="83479049-0d98-4e7f-8fb2-648ccf5746ec"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="8d57a624-7bd0-4b98-a39c-f259e6c4d333"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="cdefda26-0f7d-4a8f-9737-a3d4222a1b54"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="95fc057f-7c1c-4b0d-9a64-adfd791ca687"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcab8cd7-4ebf-473f-84d1-8f9ccf1ddd83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaefa7b2-e492-44a1-96b1-66725f4909ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5507a38-d39c-457b-a193-f0e9d8f1b30c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5332e73-29d9-4677-bb9c-ee03e89b771a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>beb30ebf-63c8-4977-bec8-bb60b58b39c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa9ad3f1-8c0c-4913-8773-58ca297f9f0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="42b4d2b8-e4cf-40bd-b7fb-f819998328a0" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale errors" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="cd4b135d-1be5-4294-a9c8-e8bf8fba0334"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"6148898624-6474858"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="21437639-41fc-4946-a99b-a260bd74e9bd"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Valid sale" id="a0960582-1e14-4c54-b271-f470bb3daaa1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Valid sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=0",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="40adfad7-8b33-4c0f-b403-6324a52eacd9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor-General decline" id="ebc0b6a4-3942-4859-b598-ec0c23b4b6ef"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="ae20c1c9-b35e-4ee4-98dc-809532422bd4"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="94dc81f3-f407-41de-a4fe-783d64deabe5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17a03dbc-8a9c-46f7-a822-f87efec92596" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fdd5e1e-2d53-428d-a990-a81f1bc5cfab" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant" id="975e0a3e-ef1d-4ae8-801e-c048fb9c3857"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>500</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="82b5aaee-0be3-4494-b76a-1191bb444d7c"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- temporary error" id="89e1d689-6aac-4fcb-a557-db01f2b7ec0a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="ccf86a91-764d-4988-876f-a71c3aa89d3c"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- temporary error" id="938429a2-2700-46f6-82cd-60e9acb33d37"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="2c56cf87-37d9-4666-ba9d-129301d42ecf"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POSTthrough modulator- MORE THAN 10000" id="80012fa2-9563-4ab1-ae56-000ac97351e9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POSTthrough modulator- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac554ea-992c-4246-ab26-270362094640" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cda52a9-65b9-4765-b92f-8a46b2e734d7" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="e8700b8c-7471-4208-a8cb-2803c980b2df"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Invalid card error" id="35cf0b16-4b44-42fb-a456-7357b5e3b657"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="9f31ab32-6637-4c3a-9ea1-727c0cb906d5"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Expired card" id="9449208e-6051-4708-870d-198c9dfcb08a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Expired card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1218",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Albert",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e21ed4e7-a9de-4a6b-8fbe-e3f52bf861bb" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.expyear is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="8c16ce22-41f4-46c5-8b8d-cd8d2b61b516"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CARD" id="ff40f4d8-4fb9-49f5-a88b-cf3db401e0dc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "3443443443443443",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2d98004-fed7-4611-88dd-efda95e74b81" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="503855d2-a87b-4875-9c7b-c5c994b8937b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="c21e1f0d-6941-4959-abf4-f4bba7769efe"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-INVALID CVV" id="64819b17-5d27-487b-9118-967025fd74fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "0232",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a4f1b4-3157-4846-9802-d93b09f71158" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.cvc is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script 2" id="c0f40485-c454-4078-9b72-8475817210df"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="post through the modulator-General decline" id="f2d33ae0-1661-4a8c-ae14-3b24d3b91ae7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="post through the modulator-General decline" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10401",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>350</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207464b1-7b19-4262-93d7-5b19489fa402" name="Match content of [message]"><con:configuration><path>$['message']</path><content>General Declined</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3" id="50799661-a809-407b-b2e9-77fb73a6b0a6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator- temporary error" id="02f52a96-f450-4401-95c6-c979649f6715"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator- temporary error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="217c0f2e-05dd-4bab-a902-9838bdefc022" name="Match content of [message]"><con:configuration><path>$['message']</path><content>A temporary issue prevented this request from being processed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ec28bd-c810-439e-a331-f45ea107b88f" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 5" id="d40f4fb3-db5b-4d75-b2e1-e6e8015efb9f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator-Invalid card error" id="76ea67f7-662f-4f15-8b59-76d23d55a62b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator-Invalid card error" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10301",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dff826c0-ba42-43e1-8bfd-830cc37a250c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcab8cd7-4ebf-473f-84d1-8f9ccf1ddd83</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eaefa7b2-e492-44a1-96b1-66725f4909ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5507a38-d39c-457b-a193-f0e9d8f1b30c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5332e73-29d9-4677-bb9c-ee03e89b771a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>beb30ebf-63c8-4977-bec8-bb60b58b39c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa9ad3f1-8c0c-4913-8773-58ca297f9f0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="83e8af85-9c86-441f-8990-ce5a0f47b172" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale and refund" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="d050dab4-fd92-4f88-8f31-b9ce3da3f08b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"4539-42474976497938414669"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EDWT2J7A31CD"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"-74-12684464-352126-47414"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="22121c59-02fe-405f-a85f-9c55df961460"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor--Sale" id="b10b0973-313e-43f2-873c-3d0320513cd4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor--Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": ${Properties#threadId},
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5ba627e-2068-4991-8796-c24fb5531459" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="cd3e5eaa-c6c7-4167-832b-6ea586499cda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor--Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor--Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Full refund" id="8bcce55c-7d6c-4933-906a-51797a1501a9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Full refund" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
   "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="70f0af65-c107-4458-9d70-c7d6ac57b8c6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Sale" id="ecea9f7f-f6a0-470a-b6db-853797a6c95a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
     "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c48416d-59a9-4ca0-a083-62c739e434f7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 2" id="face3162-7fbe-4d69-a3a9-3a62127a474f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Full refund" id="166cb980-28d6-44b3-b6aa-52dd1647aa2a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Full refund" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "20500",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
   "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="644752c7-3a1f-4682-a7f0-198f789fd03f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor--Sale 2" id="81990205-3eee-4980-967f-af6c2036dfd1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor--Sale 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 77799,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5ba627e-2068-4991-8796-c24fb5531459" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 3" id="c8f81f50-0add-4e43-a1b4-8d99562db61e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor--Sale 2#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor--Sale 2"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 1" id="65d6c238-9124-48fd-8010-db93446cbd3d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 1" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "10000",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="528032b3-cf02-4038-a129-84cf1687df9a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 2" id="35e909d0-cbe7-4acc-8b8e-377e9ab37652"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "10099",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3 2" id="71b6fc29-9c2c-4546-8d93-4a7457f22c44"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- partial refund 3(exceeds)" id="01f8f6b8-5517-4a22-8fcb-a7122e98cd38"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- partial refund 3(exceeds)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "70099",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52695fd1-a9e6-4e39-9012-591ea4db79b7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ada96f3-71c8-4412-9a7e-1d86342a5695" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48646cd9-c5ae-4e3f-bb56-c1e52c662184" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="affced25-7c88-48eb-bcdb-33b6487cf0e0"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Sale" id="9b4a0d30-7a1f-416c-b64c-a935c54e3b3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Sale" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2000,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c48416d-59a9-4ca0-a083-62c739e434f7" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id 2" id="74c7d7f7-9aa4-4668-87b0-90cff04babd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-Sale#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Sale"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- partial refund 1" id="03afc808-849d-4d80-a2a3-88ae10dd6b19"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- partial refund 1" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="43e391ef-17c4-45f8-9ace-b731694f1020"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )




def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- partial refund 2(exceeds)" id="c0ce0a6d-e062-44db-84af-e6aaf0e5776b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- partial refund 2(exceeds)" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":${Properties#threadId} ,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="328b902d-015b-4870-b5b0-76468a79fa5c" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127894cf-218c-43fa-84fa-9acb0ce00550" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${Properties#threadId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c3b0e01-4240-4c57-8249-fe2345804dec" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6143aab-fea5-45ac-968c-bb323b71393e" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c350f7b-e992-4442-966c-f1ad35489a1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e8731a8-3e20-4b15-8884-ee5cf8c9db28</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8ff43fe-c81e-4041-9673-dbd358063567</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aea82a2-0f14-407c-a2a3-77979624f4b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60dbc711-cabd-4d4b-b1e3-6f7c7b01c7fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f6b17ee-ad3b-41cd-a63d-b23e13883a60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5d03368-1ca9-4b0e-a4eb-36f13610f493</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7387b4bf-2b54-40dd-990e-023f88e56bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b51794ae-fe22-4720-95d2-07d461c3a252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c8b04f7-73eb-4896-aa4b-3231c2d71c44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95e850e4-fae5-402f-86b2-7a0de5df928a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f3b35-9857-4c74-9275-918193621a56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6817fff7-166b-4ba6-a62d-a6b795423aee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>153544fd-5bc9-4873-b640-c2d5a4222c57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eccc3775-2a96-420d-b0d1-7ad8be10fad6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>250d1984-6a24-4488-8024-3d9cbd91d09e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3215cc2-839c-4a3b-8d3f-99b693cc4813</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0c52ab4-0829-451b-87aa-1ea1f31ee954</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>163005e0-684d-4425-85c8-02757a3d980e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2556646b-1952-439e-9e79-df04b3afdc5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>365b1abb-3fc4-4cca-965e-8d157d07909b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f8b65a5-c2e6-468e-a832-d8a486fd5cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3fe1f574-7a30-46ee-b4ac-3a3120263942" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Capture" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7d8669bb-d2a8-4454-8860-907cde5d84fe"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"6593724-41655952528984782"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EJHF5O6V3YZA"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="22f4303e-0b93-476c-b36d-38476ab33f3f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Authorize" id="bec0e387-5558-48ff-acc8-aeba88bd3b49"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="f66b8461-4f68-4e04-827f-2416d26163c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- Capture" id="aed7e833-cab3-498e-9c70-41ae8d2fdfa6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="2af81fba-512e-4e3a-a270-673ee9188e97"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Authorize" id="edc7172b-72ca-4160-9b70-1774f77a0a9b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 2" id="0437536c-7614-4303-a8fd-b8409579151c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- Capture" id="a821fe6a-44df-46f4-af8b-6b13d96b099b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="9abf90fa-b287-4fac-aae2-4f95e7722443"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- without authorization" id="8da2e263-6af9-438c-a4a3-95bd01ed47f0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- without authorization" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="10609d5c-4418-4004-819b-cfbfbdb9a067" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf5d883f-2ccc-4664-a215-e8be59c83541" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId cannot be empty or null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 3" id="5a4041df-b93c-49e4-ab39-de3ee8185333"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- with an invalid auth transaction id" id="8dbf3462-54c5-487e-be94-e52d391ada53"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- with an invalid auth transaction id" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
       "externalTransactionId":"EUIYUUFXSI6C9",
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="10609d5c-4418-4004-819b-cfbfbdb9a067" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19004ddf-cc7f-4284-8055-6274b10a2ed6" name="Match content of [message]"><con:configuration><path>$['message']</path><content>chargeId is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="2358a25f-8f2f-48e2-aea6-2699a638d084"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator- capture without authorization" id="76b1da38-a884-4815-9fad-66a77600b1d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator- capture without authorization" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="d89b869b-538f-4fe7-85bb-57521789d1f7" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="b6e403e8-618f-481c-ace8-96022c40fece"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="12526564-aa45-467e-bf3f-f706fff0c5f1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for amex" id="d8799dff-bc77-4a37-adff-9ad3e7aef864"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor- AMEX#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor- AMEX"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Capture Amex" id="d6e1a756-34c5-4849-9993-33422462d8a6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Capture Amex" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="3d325012-19be-4074-a1b5-12209b3d5e64"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="157aa239-f7f8-46ba-bfc7-e4f6b04a682f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get trans id for disc" id="c314a7ea-518b-4705-a9e8-73eaf4a69641"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-DISC#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-DISC"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Capture Disc" id="8f5a0a5c-f543-46ba-a436-3a47251941a2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Capture Disc" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script" id="095e3a41-6e94-4a59-ac10-bc6e2c3d4c38"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-Authorize 2 for only track data" id="d1564ffe-496c-4347-91ac-1abd61ecf6d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-Authorize 2 for only track data" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="48d424c6-d837-436f-8b81-21f469468727" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ed56ed4-be30-4b0c-a218-19c8cdbeae33" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${POST to  QBPAY processor-Authorize 2 for only track data#RawRequest#$['threadId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id" id="69d3ef88-bbc9-435e-b381-bea7f17a68fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-Authorize 2 for only track data#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-Authorize 2 for only track data"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST to  QBPAY processor- Capture" id="c6428210-7264-4797-82f0-9445310049a5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST to  QBPAY processor- Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": true
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="edf652ca-3048-497e-8de9-f5a9eea51766" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57bdda69-8a22-494c-ab58-77a4fa8741cf" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script -Get transaction id 2" id="3918d20b-1830-44b9-948c-5be70c61e4be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST to  QBPAY processor- Capture#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST to  QBPAY processor- Capture"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Void" id="a028a263-824e-4b77-8f7b-994a73e61545"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script" id="335b91eb-027b-48f9-9a9d-e9f785be46c9"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Authorize 2 only track data" id="bcda548a-b7fb-49d1-8d73-a8db979958c0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Authorize 2 only track data" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="48d424c6-d837-436f-8b81-21f469468727" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ed56ed4-be30-4b0c-a218-19c8cdbeae33" name="Match content of [threadId]"><con:configuration><path>$['threadId']</path><content>${POST to  QBPAY processor-Authorize 2 for only track data#RawRequest#$['threadId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="97c22217-d6c7-4612-99bf-06ec5cab28f5" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Copy of Groovy Script -Get transaction id" id="a7bbdf68-15cd-4dcb-a95a-c473b9d154be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-Authorize 2 only track data#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-Authorize 2 only track data"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator - Capture" id="c2c4acf2-2fdc-4ee9-a863-33f5d58829fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator - Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
     "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": true
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="edf652ca-3048-497e-8de9-f5a9eea51766" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57bdda69-8a22-494c-ab58-77a4fa8741cf" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 4" id="cae36fb7-ab78-445f-83a6-ee4f1b427590"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Authorize" id="3455b331-1e6b-428b-bb3d-beb99dd5dd8b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Authorize" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20360,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id 2" id="03f380c8-34b0-4831-91ce-93ecfaf11ebf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-Authorize#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Authorize"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-Capture" id="4f434ec1-f033-4049-be4d-1fc92993e7dd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-Capture" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "capture": true ,

 "externalTransactionId":${Properties#externalTransactionId},




    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4055011111111111=19121015432112345678?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "emulate=10201",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb683159-a223-4841-bbba-89afbaaaba86" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id 3" id="c9fbf91a-3d84-4329-9dd0-6ea5710fbdc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-AuthorizeCopy of POST through modulator-Capture#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-Capture"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-Void" id="f04481f5-3f49-41f5-bef2-6bc97fb6bae6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-Void" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
    "merchantLocation": "Merchant test location",
    "merchantLocationId": "4764747",
    "staffName": "Dave test patient",
    "paymentSource": "VCS",
    "staffId": "portal:org_staff:26748",
    "merchantName": "QBPayTest merchant"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
    "consumerId": "test",
    "accountNumber": "44356346546",
    "consumerName": "test"
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c350f7b-e992-4442-966c-f1ad35489a1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e8731a8-3e20-4b15-8884-ee5cf8c9db28</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8ff43fe-c81e-4041-9673-dbd358063567</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5aea82a2-0f14-407c-a2a3-77979624f4b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60dbc711-cabd-4d4b-b1e3-6f7c7b01c7fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f6b17ee-ad3b-41cd-a63d-b23e13883a60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5d03368-1ca9-4b0e-a4eb-36f13610f493</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7387b4bf-2b54-40dd-990e-023f88e56bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b51794ae-fe22-4720-95d2-07d461c3a252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e13493f-b3c5-423e-bbf8-d5d8f611e961</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1b61fbd1-5c33-468c-ab67-69c717811d18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5c835583-f2a6-4cb5-84cf-4161a91eb13d" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="2 step SALE + credit +void" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="fbfd54c8-5ab2-4fa5-924c-21c38bdba7d2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"56969615-34---551-2495486"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"EF8FZSE7QD33"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 1" id="6bd3b4bf-7c56-496e-95d1-495a34559e39"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID AUTHORIZE" id="b68ac435-329f-4e7d-9b5e-8b251ee613d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 16600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id" id="7e293a04-a595-4080-a2b4-d3290abbf64c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID CAPTURE" id="82004f20-631e-4978-8d94-44ef918dbd84"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="820b6ec6-bf63-4a29-8c24-35618e7624e3" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>${Properties#externalTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale" id="a62db10e-2b27-4154-a4ba-067b17ed5c86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST to  QBPAY processor-VALID CAPTURE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST to  QBPAY processor-VALID CAPTURE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-VALID SALE" id="13ff6890-5858-4a57-9b7d-66b786b55b48"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="6dc0e80d-ec5f-40bc-861d-cdd44241a0bf"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID AUTHORIZE" id="41f5b48d-1832-483e-99b7-bbc598b757b2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID AUTHORIZE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 163600,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id 2" id="70eb6ab9-8d79-4e17-8e2e-4287f762e6dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID AUTHORIZE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID AUTHORIZE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID CAPTURE" id="7f001b43-0284-44af-bbab-4ff34ebec568"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID CAPTURE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-2" id="9b5ceb6d-5a3f-4fcc-931b-82f072642659"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID CAPTURE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID CAPTURE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID SALE" id="1619a616-9180-4bf1-a97e-8b52baeabfc3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for credit-3" id="3052ec98-ed92-4de7-bcea-cb86182617a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-VALID credit" id="b87edf5c-7c18-40cf-ad94-f3eab1c36062"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-VALID credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
  "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
  "externalTransactionId":${Properties#externalTransactionId},
  "transactionAmount": "1990",
  "threadId":null,
    "orderId": ${Properties#orderId},
  "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
  "comment": "qewr",
  "card": {
    "cvvNumber": "212",
    "bin": "411111",
    "type": "VI",
    "accountNumber": "4111111111111111",
    "trackData2": "",
    "expirationDate": "0123"
  }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-4" id="afea2cf6-4de7-4ec5-a40e-99831de172f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-void the sale after doing credit" id="2246c290-835e-4ddc-ac0b-43137a7ed4c0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-void the sale after doing credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId},
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ec65897-6b56-4f11-ba5f-7da3dc9e4de8" name="Match content of [message]"><con:configuration><path>$['message']</path><content>request is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 1" id="b88276a4-991d-4cda-b8d9-f5182f0381dc"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST through modulator-VALID SALE" id="cd812749-d7f2-4c14-b5b9-9b1d28e2a0f0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="Copy of POST through modulator-VALID SALE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
       "externalTransactionId":${Properties#externalTransactionId},
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "1220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="e508b102-3961-4f13-b14c-f95552e4add5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script to get transaction id for sale-5" id="80ac7c43-eb93-420a-80b1-7cc1a8c623f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Copy of POST through modulator-VALID SALE#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Copy of POST through modulator-VALID SALE"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator-void the sale before doing credit" id="ef1658ad-f3a4-4c80-8e18-15deadeac681"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator-void the sale before doing credit" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805517</con:endpoint><con:request>{
  "mfGatewayMerchant": {
     "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
  },
  "externalTransactionId":${Properties#externalTransactionId} ,
 
  "customerId": 20624,
  "threadId": null,
    "orderId": ${Properties#orderId},
  "mfGatewayConsumer": {
     "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
  },
  "comment": "test"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>88f53514-663f-4299-aeac-1bd3a68390d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab89491a-e9c4-438c-9bdc-b2aa379cb986</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5e488491-d7ba-41d2-9ee9-ae451456440b" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="QBPAY Sale with trackData" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="20c06a0b-498b-4016-a16a-c06e83d54a3c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"5867474197-7831921"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="2816de69-6506-4926-8411-21d20aa0d5ed"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor" id="2647370f-3fd5-4248-9c72-14f9b8925d04"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="ccc07dac-24d5-488c-bded-cb70fd5d72a6" name="Check for existence of [threadId]"><con:configuration><path>$['threadId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 11" id="bfe79086-7d07-4199-92ed-4eaf406a6a2e"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 2" id="20f4cda1-ad73-4beb-92f9-07d328c0cb5d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through modulator" id="de91e294-dbcb-409e-befc-5276c5ef1387"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": "9428590245-8992j9o32i04",
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 6600,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="50dcac11-5ff2-4501-a094-f4064bce5e3c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="09f0b217-7b6e-45bb-92e7-86ade400e71f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="26f35d7b-a5e3-4012-8d7f-e940f65580d3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]" id="75d4362a-ebb5-4dc9-8e3f-3be1aac2a1d2"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]" id="ae6f5f4d-ff32-4c44-9f1e-c729033e2944"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="a254903f-62a4-4190-a131-50589829fa86"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="5fbc30a1-17c9-4af4-a4d7-0722894669d1"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]" id="b9184406-ad09-409d-8333-c4b1eca5f16a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1" id="6fc5b22e-8d5a-44e3-9a5f-61a2f128c3f0"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="89da1909-ce13-44db-a8ad-272dee2ac484"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="9e824221-ad53-4e22-9879-63b9fa601125"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [responseTime]1" id="778c7655-9405-46e2-8923-7d6791d2ec19"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="fc2c4d20-935f-4e0d-bfbe-c681b0084a25"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="b41a6e4b-89d8-4a98-8453-4eaf0bd2d30f"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [authCode]1" id="53382001-2134-4a0e-be9e-9f318718731a"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script 2" id="04cdb8e4-9002-47b6-bc49-89cd862d75c2"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to a non- qbpay merchant through modulator" id="005adb5c-af84-4d1f-9040-a67bed43d090"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to a non- qbpay merchant through modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560791218</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "ElementPS",
        "merchantLocationId": "portal:location:20821",
        "merchantName": "Jakubs - Testing 15.3 Release",
        "staffId": null,
        "staffName": null,
        "paymentSource": "PRCC"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 2500,
    "card": {
        "type": "VI",
        "accountNumber": "4111111111111111",
        "expirationDate": "0220",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": null,
        "middleInitial": null,
        "lastName": null,
        "companyName": null,
        "addressLine1": null,
        "addressLine2": null,
        "addressLine3": null,
        "city": null,
        "state": null,
        "country": "US",
        "zipCode": "27519",
        "email": null,
        "phone": null
    },
    "requestType": "AUTHORIZATION"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="64636a6a-6200-474f-9f2a-455bfbb47c1c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8d7afaf-d6e8-44d7-81a9-1d383a4d38ba" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b032eb9-ec8d-491e-a299-2f18681ecbc6" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="be160c87-8679-44d3-965c-3b49de389d13" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03290dfc-32eb-4e56-9271-73ef89dcc70b" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 3" id="5fc3bb56-9a38-4619-962f-14cf3e33fa91"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- master card" id="2ed506b4-5cb1-4e23-bc6a-9b4e690f052a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- master card" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205360,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 4" id="6ece3dc5-e570-4535-a4aa-0b59488c833b"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- MORE THAN 10000" id="df51d302-516c-483e-b063-8aafef400969"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- MORE THAN 10000" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205333360,
     "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4930c70-6b68-41e2-aa3b-4636414aa0f6" name="Match content of [message]"><con:configuration><path>$['message']</path><content>amount is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2371bde6-2057-47b9-8d2f-a2c1eb28cd27" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 5" id="83922a3e-6917-43e6-8e2c-a729b6c63a39"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- EXPIRED CARD" id="48d5b4fb-a2c9-4d87-bafd-ac59497d04a8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- EXPIRED CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 3499,
    "card": {
        "type": "MC",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4111111111111111=17081014764094900000?",
        "cvvNumber": "",
        "bin": "",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="780e3d53-71d5-4eca-8b6c-909d65e8756b" name="Match content of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="932c9b48-e125-40d9-a212-aff02db5f8d7" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Track2Data. is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 6" id="bf7bf5b5-e59f-4095-8a5f-40e141daed04"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CARD" id="4c0d8a97-fb37-4a61-8a7c-2bbf38f97c21"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CARD" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "VI",
        "accountNumber": "",
        "expirationDate": "",
        "trackData": ";4155111111111111=17081014764094900000?",
        "cvvNumber": "220",
        "bin": "411111",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>-1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f68a408-cbd7-4a7e-aedc-a8b1e9d1c9f3" name="Match content of [message]"><con:configuration><path>$['message']</path><content>card.number is invalid.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 7" id="e6ff9faf-4c13-4709-88e8-fcf92efecaaa"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-INVALID CVV" id="df8ff89d-0da9-4e6d-8ac1-5f3db58f5830"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-INVALID CVV" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
     "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="268c7f93-9115-4757-bcb4-f651043b2864" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 9" id="060983a1-d61b-4d40-81e0-e3f29bfb603a"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor- AMEX" id="54ad18f7-9c8d-4e5f-81e9-9896b9f3e3a2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor- AMEX" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": "20624",
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 38999,
    "card": {
        "type": "AX",
        "accountNumber": "378282246310005",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "2208",
        "bin": "378282",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 10" id="74cfadaa-b6df-4434-87d6-6864d544a08e"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DISC" id="611fbdac-d902-4a00-9977-804ef746e7a7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DISC" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "TRML"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 205700,
    "card": {
        "type": "DI",
        "accountNumber": "6011000990139424",
        "expirationDate": "0735",
        "trackData": null,
        "cvvNumber": "344",
        "bin": "601100",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 8" id="06252c0c-9f17-4951-b59b-cc5dc17116f7"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor-DUPLICATE CHARGE" id="9dccebd0-88ad-4c86-b19c-8826ce90a1d2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor-DUPLICATE CHARGE" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
     "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 12" id="aa62bdff-a96b-4585-92c0-ec81051deefe"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST to  QBPAY processor without cvv" id="096d1799-bbb5-4313-8037-d761d43362d8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST to  QBPAY processor without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay02.dev.medfusion.net:8688/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
    "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "220",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 13" id="f86ed208-ab0a-4ce9-ba17-ed0d51770234"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 18 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST through the modulator without cvv" id="16ce68bd-491c-474a-8d55-7b607e66a936"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="4639cf60-ee7b-481e-89cf-1335f28715d5" name="POST through the modulator without cvv" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805517</con:endpoint><con:request>{
    "threadId": null,
    "orderId": ${Properties#orderId},
    "customerId": 20624,
    "mfGatewayConsumer": {
        "accountNumber": "PAT0804",
        "consumerName": "Dave Patient",
        "consumerId": null
    },
    "mfGatewayMerchant": {
        "merchantLocation": "Random place",
        "merchantLocationId": "253465656d5656",
        "merchantName": "QBPayTest merchant",
        "staffId": "portal:org_staff:26748",
        "staffName": "Dave test",
        "paymentSource": "VCS"
    },
    "comment1": "Jakubs - Testing 15.3 Release",
    "comment2": null,
    "transactionAmount": 20500,
     "card": {
        "type": "MC",
        "accountNumber": "5105105105105100",
        "expirationDate": "0225",
        "trackData": null,
        "cvvNumber": "",
        "bin": "510510",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Dave Patient",
        "firstName": "Dave",
        "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    },
    "requestType": "SALE"
}'</con:request><con:assertion type="Valid HTTP Status Codes" id="220de80a-cef7-4cd8-9b7d-c4dcc8ad65b0" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0e906-a4a8-4042-8e9e-68b8f1ecbd48" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8558dcf8-b72b-43af-8e68-d911037399ef" name="Match content of [message]"><con:configuration><path>$['message']</path><content>Approved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5e0ae5b0-acb1-4174-85f6-4b70b4da930e" name="Check for existence of [responseTime]"><con:configuration><path>$['responseTime']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19de85bd-2210-4186-92fe-6a40617c252a" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="65363f31-8408-460a-8e7a-82d776acc864" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="631f7f01-8d03-4f82-bbb1-6e5fbc5995c5" name="Check for existence of [authCode]"><con:configuration><path>$['authCode']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f57c6b8b-3a4d-47c5-92e7-b13b65ddbd36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f81b7a57-adfe-4eac-88fc-033aee0ad33a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aaa65e03-e827-4c9a-928b-4a8bc17a9add</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb9284cc-c2de-457e-9cd4-a18288792833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>938050c5-5909-486e-9a36-a27b875351f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>866ced34-b141-40b2-9878-2e74da9270d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7469eda9-a205-43e5-81ab-de771c24550e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99821902-a561-4695-b288-666bc4cc8d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b511eed2-9c20-4d8e-a8d5-fc7b33421140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ef5c8b-97bc-4feb-8139-9b79014e3f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2aaa1be1-79c2-4b16-95e0-1a5ceae23876</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c123c5d7-b29d-49d9-99f3-0279f221f9db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="89877e3c-5699-4f20-a0a0-a4315ee4854e" name="CCOF"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="2159555f-f733-4a1e-b5ad-cfc1bf8c1253" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="VCS through the  modulator and directly" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="22642a44-5f69-4a26-a7e7-9f0c408a9a3d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"d8774c10-4d9c-44fc-addd-5"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"68396729-7691636977295114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"43813780"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="34107033-6bf6-425b-9092-383b7cdb9bc3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="5f69df3f-0083-4f4e-bc90-a5d271c37f2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="3492785c-f2d6-4112-bfdd-3f89be6649af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="68a34104-f6bc-4f69-b678-dab344568206"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12f552fc-d7ae-475d-b6ac-f2523efe440a" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of capture" id="ddc29aee-53db-48fd-9215-9265abd18a7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of capture" id="acb7b37d-493b-4ca0-b440-a5857da92fd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment series" id="2d33049e-548a-4e8d-abf9-4b41ae22e513"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="b0b5e190-5369-47e3-8138-13c458352e3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="dba07c26-f34e-4172-a59e-2e8dc153eabe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="b1861c4c-cdc5-4ba1-a032-5cf458478816"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="1bba5090-c923-428e-8cc8-c446b932e249"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="ef27c28a-4579-489c-a9ac-cb4fc3594702"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script 1" id="b3e502a4-ad3a-48d4-a608-c4a6af7f0067"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )


def generator3 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
threadid = generator3( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info threadid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("threadId",'"'+threadid+'"' )
</script></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="dee2011f-5226-4053-8bb5-356d7cd61234"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="8a9345dc-bb8c-495e-acb0-cc44ebfb7493"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a19d59ed-c3b6-4db3-ac1d-1fb095b74b51"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [message]1" id="90aad804-c742-4746-944d-43fd9c5b2ec6"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]1" id="16c129d1-81ad-4ccf-86f5-06d578ad0972"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]1" id="0aa9bc12-9290-4d30-b9f8-9402b09332e5"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]1" id="76a19322-f3fa-4bfe-9c91-66096a408786"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]1" id="c617f491-8ddc-45cf-917a-1c921037907c"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]1" id="07099a6e-404e-41f5-8c49-00885646140a"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="931f6f81-562a-4097-9be5-494aa5751867"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="8db066e2-3e0c-4083-8349-601a20fe61a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="721eb325-418f-43b3-adeb-1dd213be0b0c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for sale" id="64e3d3ec-da4b-44a0-bfd0-885d2a262f15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post capture directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post capture directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="20715508-0ae4-44e4-bee5-b017ffdefc61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${Post capture directly#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post capture directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="4c94e4b4-d0cf-4ca3-9621-cdb3755b7c8b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="ead3c340-c33b-42f2-bccf-95f3d6f40130"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="48c71ff5-a7b1-4a68-8ec9-19106c54bf39"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="5e088507-21a4-47a8-bfc7-bd0197eb3a61"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="e253c585-3e18-4c4d-80a0-8c6484a1d012"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="edead76a-954d-426a-9a37-e0fd237cb3cb"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="27bb0a1a-678f-44b7-9cf2-223598f0ff04"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "MC",
        "accountNumber": "5541032000004422",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionSeriesId]" id="a27e9184-6db7-46c1-a976-fec608276ded"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="fce70769-f858-4e82-b3b5-3d35260767c7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "2222",
        "type": "AX",
        "accountNumber": "341111597242000",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="f5a3b397-ac6c-42c6-bb6d-7c69bf9f3410"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="47283ebf-422f-486c-aa82-c7d4906450cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="5a2200df-de87-4c1a-8429-2e3ea39f1035"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "2222",
        "type": "AX",
        "accountNumber": "341111597242000",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non-initial payment" id="5c1e2724-4f47-48d2-9e88-45d09e302155"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "VCS"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "DI",
        "accountNumber": "6011000990911111",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="24e5a49a-f758-4a6a-b5b4-42ee7cdbc62d" name="Check for existence of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eceb8c6-40f1-4780-8f8a-ffde74d87483" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="2339766a-dfec-465e-a947-b6c0b8971cb5" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="BDGB through the  modulator and directly" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="2e48f613-d29c-43cf-8f9b-56014965ab80"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"dc7ed0f5-619d-4c3a-84e3-e"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"9-5921618827934531-1-5114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"45831355"</con:value></con:property><con:property><con:name>externalTransactionSeriesId</con:name><con:value>"000090687490600"</con:value></con:property><con:property><con:name>expressNetworkTransactionId</con:name><con:value>"201060110549996"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="3a471084-01fc-4413-a1c9-30228b650e68"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aba19280-a57d-45e8-82fb-c15845c8bd3c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="c2b0e39f-22df-47d6-ba88-65fc039262ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="1ece87bb-0306-43ec-97dd-225e1bbe9c7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id for 2nd authorize" id="803c03aa-623d-41f1-8121-85b3f1010a37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="ba5a0af0-cde7-46f7-ab66-f528d3de3b78"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":true,
           
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="437c86a8-3365-4322-b58d-522af2916a6d" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 2nd set" id="7091a83e-0e24-401c-9177-ec1f293547b6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 2nd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da8b51d5-8ea3-4b25-adea-b3e1aa2eeef0" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="04844dc8-d84e-4f39-bb2a-0e1860d9ea65" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="fe4fb773-1b03-45cb-b601-77f78d7d3120" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585862411733</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>56a76065-0621-4adf-8bca-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44327296</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>976640</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585862411733</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>56a76065-0621-4adf-8bca-d</orderId>
   <externalTransactionId>44327296</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930162010376</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>976640</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of authorize" id="b2d79a27-b351-45d8-ba6c-e5db1e1322f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of authorize" id="4532fa51-1141-4417-a2ce-991375b10f81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 2" id="6bf6ec8a-57d2-4938-aac4-e234d5a4c41b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1b90e14-38c2-4973-86cd-daa749d96e38" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>${POST authorize through the modulator-initial payment series 2nd set#Response#$['externalTransactionSeriesId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="716c4df8-ed16-4236-a528-6d28190c6673" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 3rd set" id="527ae19f-145c-4719-b68a-7e6106a265df"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 3rd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 200000,
    "initialTransactionInSeries": false,
  
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b422ee3-ed62-4560-8783-c18b98699e8f" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="e5be35d2-6685-4e31-9b79-6153b1dbc347" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="52bb7c51-7ff0-4e7a-8174-0f176a6d01e6" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99b84e54-dfa0-4926-abb7-b76eb129b44c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id of authorize" id="76d6bc7a-e28b-49ea-9124-215c09537d06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get order id of authorize" id="9d36e4e7-69f0-4742-ba1c-f7799836879d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id" id="75fbeeaf-f070-4bfa-8926-6a09c81c41db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 3" id="7c036f4f-b354-4ee0-97d4-d3cc1b9d05d7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 200000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="bd4be054-5836-42be-912c-20b8055c98e2" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="12983460-8b8e-42e0-bbc9-cbe9adac84c8" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Invalid Transaction Status</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863697463</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>-1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637">
   <message>Invalid Transaction Status</message>
   <responseTime>1585863697463</responseTime>
   <responseCode>-1</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163352146</expressNetworkTransactionId>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="5e877381-57df-4087-8b1e-d0d4f54a47d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="06109012-526d-4403-8975-59c6e46f9ed4" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="503d9f51-9e37-412e-98f6-c52ef4f7054d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id for refund and void" id="b8bb4ede-5ed7-4f80-afc5-ebb6e0470093"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="5efa50fc-cb9a-4011-b32c-42f12d22a66b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="0ff1f9e5-442a-4813-9dae-a84c636d9fd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="4a2b6a77-1c50-4957-9057-0a9466232dcb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="57c26003-765a-4754-a166-e245fa2b22d3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non- initial payment" id="3061db17-08ea-4d85-9337-6700a51ce73a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non- initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aa70b174-ed4b-427c-86d5-a81390d94ce5" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="98888af8-751f-40d1-a9e8-c4d323fba683"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-non- initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-non- initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST refund through the modulator" id="bdd8070b-5283-4e11-bcbb-9e9c4cb4be4f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="10f86cae-e51b-4fd8-b86b-617e82cf20d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
      "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a2fb579a-d973-46cf-8fde-59e7a8a5774a" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="25075149-7793-449d-91df-3ff1ec054523"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="96fde025-dec4-44d1-8858-0b656e1b9c66"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="5a824c78-8187-41f1-a59f-c87923c9fc4e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":true,
    "card": {
     "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="dc0986cf-7981-4624-83e6-d8e018731b5f"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="bdca7c3a-d983-4992-9a42-b1796134dcc9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    
 
    "initialTransactionInSeries":true,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd228b94-1c48-4049-84d9-82aeb70e7e61" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5a6dca44-f27e-4cc5-9957-5ec8fa6ef342" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="3193f3dd-71f2-4601-92c5-326518350d85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="e5f17a92-6eb3-4ed4-a36f-822e117968bc"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="2f4dc883-b0c6-46b8-874a-a10bb6ba6718"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="3848163f-3674-446e-9664-527ed9cc7e18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="bdc64793-5764-4d28-865e-b405350dbad6"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="d842e918-7c2f-4227-a55e-77e0fe133d1d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="1ed21725-3615-448d-9db8-895b16498396"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="35871613-3b60-4023-856a-be33229a0941" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="18d2e90a-33c9-49aa-9dcf-48d1db91513b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="6884a562-8336-4c10-a5e1-5e75687e6826"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id" id="98cecf45-be4e-450f-9600-4fc27b9a4ed5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="28ac4842-4122-4aab-a414-d1db13f5b932"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
      "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries": false,
    "card": {
         "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55c0eba4-af87-43da-8f5e-86766efd06bb" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan- 1 initial payment" id="9a37c859-b51e-4a93-be2f-8cb0b7580dd3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan- 1 initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 98800,
    "initialTransactionInSeries": true,
    "card": {
       "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="28226c5b-cf06-4af0-b34d-5b0d9fd5d8a0" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d957fa30-c03f-41cb-8821-8d30711160ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan- 1 initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan- 1 initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-2nd payment" id="f63128db-c10f-4ae7-bb85-2cd113f4094b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-2nd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 2000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="1d9bd45b-df48-4cc6-b28b-aa5ac5a55f1b" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="b2a2c620-e713-409a-8cbb-7fa29252e85b" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585865844873</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>6ad5b791-f7d3-484c-b968-6</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44332714</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15499A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585865844873</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>6ad5b791-f7d3-484c-b968-6</orderId>
   <externalTransactionId>44332714</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093802441377</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15499A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get network transaction id of previous series" id="e2ba9492-fd5b-4497-b31f-4a4003c54802"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan-2nd payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan-2nd payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-3rd payment" id="02ae5e37-420a-4f55-a5e6-003d52c2ad08"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-3rd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "BDGB"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 4000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="4cc0b6d8-7eb2-47c0-a4e7-165a44246abe" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="c43deabf-4374-4db0-bec6-b22fe00fdc30" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan-2nd payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d67d5bf5-1a9e-404c-947f-1de8523c16dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d196dc48-e107-409e-ae08-571dd84b84ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9df84187-0e01-4cfc-bb5d-5a1971f05bcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad6e7be-859a-436e-b76b-ecf5ac332836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d25d1686-4b7d-4caf-8cae-05df7e4df210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcd8c55f-0234-4f67-aa01-7b8332f3f368</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35f3e719-7935-41af-bbfb-065e0d854d88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35846ab0-c797-4c51-9709-47333fcf1c35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d71e830-f4e5-4e35-b371-a12299e19cf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5baeafbf-734c-430c-b0ac-73aa5432af9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50786732-e251-4f19-bbdf-fa29599b709b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa4001c4-2027-4490-9dc2-a68afacad511</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8c5c650-74a6-42b0-a0a0-c0760a12664f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2ea3361-6808-4a10-bfdb-d2907d8c8c41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa40f52e-3f78-48fe-82f4-44e7ac098ce9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7be1daf0-97cb-42c3-887f-bc6e0b2b8062" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="OLBP through the  modulator and directly" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="59c5a092-55e1-45a5-b85a-f365968c4ef9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>orderId</con:name><con:value>"66741509-cfe2-4afb-ae19-b"</con:value></con:property><con:property><con:name>threadId</con:name><con:value>"9-5921618827934531-1-5114"</con:value></con:property><con:property><con:name>externalTransactionId</con:name><con:value>"44406820"</con:value></con:property><con:property><con:name>externalTransactionSeriesId</con:name><con:value>"000090687490600"</con:value></con:property><con:property><con:name>expressNetworkTransactionId</con:name><con:value>"201210104446776"</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series" id="03f1ecb9-a393-4a54-b6a5-606911ef48fd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aba19280-a57d-45e8-82fb-c15845c8bd3c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id" id="cd75d766-032f-4f08-a370-d2db865bb852"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id" id="0b967b37-230f-4c3e-b474-cba282da3ec2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id for 2nd authorize" id="52e97f88-8f13-47a9-ab28-9e23308f86ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series" id="daa0f084-6fed-453a-a1c8-4888f941849c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
         "initialTransactionInSeries":true,
           
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="437c86a8-3365-4322-b58d-522af2916a6d" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 2nd set" id="42061559-342a-42fb-b8d2-c14433914cca"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 2nd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 100000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da8b51d5-8ea3-4b25-adea-b3e1aa2eeef0" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="04844dc8-d84e-4f39-bb2a-0e1860d9ea65" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="fe4fb773-1b03-45cb-b601-77f78d7d3120" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585862411733</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>56a76065-0621-4adf-8bca-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44327296</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>976640</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585862411733</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>56a76065-0621-4adf-8bca-d</orderId>
   <externalTransactionId>44327296</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930162010376</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>976640</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id of authorize" id="4348e9cc-ad82-4956-8854-0cb5c0e3bb25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id of authorize" id="3f00620a-6747-433a-ae9b-87726e78d2b5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST capture through the modulator-initial payment series#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST capture through the modulator-initial payment series"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 2" id="8fcc2eb0-710f-468b-95b0-fbb3594e7389"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 2" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 100000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1b90e14-38c2-4973-86cd-daa749d96e38" name="Match content of [externalTransactionSeriesId]"><con:configuration><path>$['externalTransactionSeriesId']</path><content>${POST authorize through the modulator-initial payment series 2nd set#Response#$['externalTransactionSeriesId']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="716c4df8-ed16-4236-a528-6d28190c6673" name="Match content of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>${Properties#expressNetworkTransactionId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-initial payment series 3rd set" id="57990ff2-ed15-4e80-b75b-6af98f11fcb4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-initial payment series 3rd set" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 200000,
    "initialTransactionInSeries": false,
  
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="4cc993e9-8622-46d8-9968-a3d01cb57f00" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b422ee3-ed62-4560-8783-c18b98699e8f" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="e5be35d2-6685-4e31-9b79-6153b1dbc347" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="52bb7c51-7ff0-4e7a-8174-0f176a6d01e6" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863398866</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>986503</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/authorize/2560805637">
   <message>Approved</message>
   <responseTime>1585863398866</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163637960</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>986503</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99b84e54-dfa0-4926-abb7-b76eb129b44c" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get transaction id of authorize" id="f1e42e25-fdb4-4d6e-9374-a033c833b28b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script -Get order id of authorize" id="57341461-3c04-4e73-a179-ebcf47103678"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-initial payment series 3rd set#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 3rd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get express id" id="203efac5-6d81-44c8-8999-58f67ae1546c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-initial payment series 2nd set#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-initial payment series 2nd set"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-initial payment series-capture 3" id="8cf8c3e4-8b2f-4fbb-a3b2-681e5c246c52"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-initial payment series-capture 3" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
   "orderId":${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
       "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 200000,
       "externalTransactionId":${Properties#externalTransactionId},
       "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
         "initialTransactionInSeries":false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
         "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4125e0-0eee-47c1-b90c-be9b4a73240e" name="Match content of [orderId]"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="3ef6b7be-0aed-4454-ab92-48334ec5871a" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="bd4be054-5836-42be-912c-20b8055c98e2" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="12983460-8b8e-42e0-bbc9-cbe9adac84c8" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>Invalid Transaction Status</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585863697463</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>-1</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>false</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>701ca852-f0fc-4220-8914-d</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44328738</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST authorize through the modulator-initial payment series 2nd set#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/capture/2560805637">
   <message>Invalid Transaction Status</message>
   <responseTime>1585863697463</responseTime>
   <responseCode>-1</responseCode>
   <threadId null="true"/>
   <orderId>701ca852-f0fc-4220-8914-d</orderId>
   <externalTransactionId>44328738</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>200930163352146</expressNetworkTransactionId>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-initial payment" id="59628997-1fb8-4941-bb30-c12268f44c27"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": true,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="06109012-526d-4403-8975-59c6e46f9ed4" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for credit" id="0e30b680-1251-472c-9d84-1e32fe37b279"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id for refund and void" id="80144ab3-106f-4d9e-a2b3-b3551cd258bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST refund through the modulator" id="6c8ea2f6-3776-462a-88ea-f79eda07bf91"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get transaction id for void" id="740a58ac-7f79-438b-ab52-fe1ed694a6ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="POST void through the modulator" id="91822f2d-96ea-49c9-a1ca-21ce3f9fd803"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST void through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST credit through the modulator after voiding" id="b30a5f9f-3474-4768-aa4a-5ec8b20ea459"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST credit through the modulator after voiding" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be23a7d0-9152-48b9-a76f-0118c9c2b1e7" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale through the modulator-non- initial payment" id="0db6b910-4aa5-40ba-9c1b-377d251198aa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale through the modulator-non- initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "initialTransactionInSeries": false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="aa70b174-ed4b-427c-86d5-a81390d94ce5" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get transaction id for credit" id="06bf1336-2c35-47e8-9d84-147663617a0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale through the modulator-non- initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale through the modulator-non- initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')



</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of POST refund through the modulator" id="6ba89365-5397-4b88-aefe-a87509b4b779"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Copy of POST refund through the modulator" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 10000,
    "externalTransactionId":${Properties#externalTransactionId},
    "initialTransactionInSeries":false,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize directly-intial payment" id="1fd8891d-ffdc-4548-b864-15012fd71d86"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize directly-intial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId":${Properties#orderId},
     "threadId":${Properties#threadId},
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    "initialTransactionInSeries": true,
    "card": {
      "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="d0429d13-312f-42b6-a609-30120c0fa0c2"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="3c9cbac5-fe40-4223-a6d3-db2cf9f7fcbd"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="981beecb-a94f-4878-b8bb-6fc9757b0360"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="bee473f9-a910-4375-9c19-e5bd62d08576"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a2fb579a-d973-46cf-8fde-59e7a8a5774a" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for capture" id="cde0322b-0673-48a3-8374-563604555cfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize directly-intial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for capture" id="a0979f3a-8c27-46bc-877b-73bffc5d7de3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize directly-intial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize directly-intial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="httprequest" name="Post capture directly" id="2e5c9bed-14c0-49c8-a9ee-02ef76369c0a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post capture directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":true,
    "card": {
     "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [initialTransactionInSeries]" id="21c78439-6504-448d-8089-5ef2a54fe1f4"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get order id for sale" id="9c1997b8-e300-4a8a-b2f3-4e506d7617f7"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post sale directly" id="0ae0c61e-a5ec-4851-9918-bbc19449b998"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post sale directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
    
 
    "initialTransactionInSeries":true,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd228b94-1c48-4049-84d9-82aeb70e7e61" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="5a6dca44-f27e-4cc5-9957-5ec8fa6ef342" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for refund" id="41434a32-5fec-415c-9b69-f001ef48273d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id" id="c3d3ccbb-c89d-4840-a29c-b3242e6501ac"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post refund directly" id="af915528-29d7-49f5-ba8b-2b50e0eda86d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post refund directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/credit/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 20000,
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Get transaction id for void" id="24d7f82a-1750-4e9e-b4af-2ed955473f4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${Post sale directly#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["Post sale directly"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -order id 2" id="e8bda461-2010-4104-b777-79211057976d"><con:settings/><con:config><script>

def generator2 = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
orderid = generator2( (('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')+('-')+('1'..'9')).join(), 25 )
log.info orderid
testRunner.testCase.getTestStepByName( "Properties" ).setPropertyValue("orderId",'"'+orderid+'"' )</script></con:config></con:testStep><con:testStep type="httprequest" name="Post void directly" id="ec2822a4-0c97-467b-a591-03788da9c1ab"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="Post void directly" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8081/mfgateway-api/services/mfgateway/v4/void/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId": null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
       "externalTransactionId":${Properties#externalTransactionId},
 
    "initialTransactionInSeries":null,
    "card": {
        "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" name="Match content of [message]" id="e649787a-f34b-4593-8dba-e69447942043"><con:configuration><path>$['message']</path><content>"Success"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [responseCode]" id="dc785745-b716-4746-bf6f-01feb6fad803"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [externalTransactionId]" id="24345397-d1cc-400b-b704-0768212cfaaa"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [orderId]" id="58522c50-b622-4d04-8e0d-a481c349dfa3"><con:configuration><path>$['orderId']</path><content>${Properties#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST authorize through the modulator-non-initial payment" id="3889b040-958c-4001-8f02-539bd9bf3237"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST authorize through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/authorize/2560805637</con:endpoint><con:request>{
    "orderId": null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "transactionAmount": 34400,
    "initialTransactionInSeries": false,
    "card": {
       "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="35871613-3b60-4023-856a-be33229a0941" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get authorize transactionid" id="c0ef3469-678d-49fc-b065-dce12a8d13a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.externalTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.externalTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("externalTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="groovy" name="Get authorize orderid" id="9c7b1a4e-b9f8-4f90-8c9f-3a49bc783020"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;


def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.orderId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def orderid = jsonSlurper.orderId
assert orderid!=null
log.info orderid
testRunner.testCase.testSteps["Properties"].setPropertyValue("orderId",'"'+orderid+'"')




</script></con:config></con:testStep><con:testStep type="groovy" name="Get express id" id="ad9e962e-5a1c-4efe-91cf-74d5869779c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST authorize through the modulator-non-initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST authorize through the modulator-non-initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST capture through the modulator-non-initial payment" id="ac81d710-8c25-475c-b820-96f20eecfbf2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST capture through the modulator-non-initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/capture/2560805637</con:endpoint><con:request>{
    "orderId": ${Properties#orderId},
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
    "amount": 34400,
     "externalTransactionId":${Properties#externalTransactionId},
    
    "initialTransactionInSeries": false,
    "card": {
         "cvvNumber": "222",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan- 1 initial payment" id="64359710-e361-4b41-bc02-d7d9d199ebb7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan- 1 initial payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 98800,
    "initialTransactionInSeries": true,
    "card": {
       "cvvNumber": "201",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="28226c5b-cf06-4af0-b34d-5b0d9fd5d8a0" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="ab782322-b5ca-4b63-b71e-0bad3acf521f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan- 1 initial payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan- 1 initial payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-2nd payment" id="ee79da56-e85a-42c3-a542-b0b3914cf705"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-2nd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 2000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "201",
        "type": "VI",
        "accountNumber": "4895281000000006",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="1d9bd45b-df48-4cc6-b28b-aa5ac5a55f1b" name="Check for existence of [expressNetworkTransactionId]"><con:configuration><path>$['expressNetworkTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="b2a2c620-e713-409a-8cbb-7fa29252e85b" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585865844873</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>6ad5b791-f7d3-484c-b968-6</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44332714</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15499A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585865844873</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>6ad5b791-f7d3-484c-b968-6</orderId>
   <externalTransactionId>44332714</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093802441377</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15499A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Get network transaction id of previous series" id="dce004eb-0a02-4c9c-92db-bde98a5cba4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import groovy.json.JsonSlurper
import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import java.net.URLEncoder;

def id = context.expand( '${POST sale series for budget plan-2nd payment#Response#$.expressNetworkTransactionId}' )
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ResponseMessage = testRunner.testCase.testSteps["POST sale series for budget plan-2nd payment"].testRequest.response.contentAsString
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
assert jsonSlurper!=null
def transid = jsonSlurper.expressNetworkTransactionId
assert transid!=null
log.info transid
testRunner.testCase.testSteps["Properties"].setPropertyValue("expressNetworkTransactionId",'"'+transid+'"')

</script></con:config></con:testStep><con:testStep type="httprequest" name="POST sale series for budget plan-3rd payment" id="3e958fb2-f8e8-4d0b-b488-aaa6224e2bcc"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="2eadc3db-0169-45d5-95a2-ad7e4c7a4c56" name="POST sale series for budget plan-3rd payment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay03.dev.medfusion.net:8085/mfgateway-api/services/mfgateway/v4/sale/2560805637</con:endpoint><con:request>{
    "orderId":null,
     "threadId":null,
    "mfGatewayConsumer": {
        "accountNumber": "23345",
        "consumerName": "Test patient"
    },
    "mfGatewayMerchant": {
        "paymentSource": "OLBP"
    },
    "comment1": "hello",
    "comment2": " Test",
     "transactionAmount": 4000,
    "initialTransactionInSeries": false,
     "expressNetworkTransactionId":${Properties#expressNetworkTransactionId},
    "card": {
        "cvvNumber": "901",
        "type": "VI",
        "accountNumber": "4960049010100011",
        "expirationDate": "1225",
        "trackData": null,
        "bin": "489528",
        "cardPresent": false
    },
    "billToAddress": {
        "name": "Jane",
        "zipCode": "87239",
          "middleInitial": null,
        "lastName": "Patient",
        "companyName": "Medfusion",
        "addressLine1": "123 Rainbow colony",
        "addressLine2": "",
        "addressLine3": null,
        "city": "cary",
        "state": "NC",
        "country": "US",
        "zipCode": "27518",
        "email": "",
        "phone": ""
    }
}</con:request><con:assertion type="JsonPath Match" id="069c4050-d684-4a87-bf91-7dfc9cb88c6c" name="Match content of [message]"><con:configuration><path>$['message']</path><content>"Approved"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce760500-3444-4e8c-ba1c-52d48bb34297" name="Match content of [responseCode]"><con:configuration><path>$['responseCode']</path><content>"000"</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="09d1a6b1-f0f2-41c8-a8be-cb3f5147c157" name="Check for existence of [externalTransactionId]"><con:configuration><path>$['externalTransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2ecc143-ea4c-45d9-a5b3-6795ad01c777" name="Match content of [initialTransactionInSeries]"><con:configuration><path>$['initialTransactionInSeries']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="43bb1c49-3528-4b51-9f9a-e4a22a632a7c" name="Check for existence of [orderId]"><con:configuration><path>$['orderId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="4cc0b6d8-7eb2-47c0-a4e7-165a44246abe" name="Message Content Assertion"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan- 1 initial payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:assertion type="MessageContentAssertion" id="c43deabf-4374-4db0-bec6-b22fe00fdc30" name="Message Content Assertion 2"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:message[1]</con:xpath><con:element>message</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>Approved</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseTime[1]</con:xpath><con:element>responseTime</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>1585866079852</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:responseCode[1]</con:xpath><con:element>responseCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>000</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]</con:xpath><con:element>threadId</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:threadId[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:orderId[1]</con:xpath><con:element>orderId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>ecada844-8e4d-40db-90f5-e</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:externalTransactionId[1]</con:xpath><con:element>externalTransactionId</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>44333071</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:initialTransactionInSeries[1]</con:xpath><con:element>initialTransactionInSeries</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>false</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:expressNetworkTransactionId[1]</con:xpath><con:element>expressNetworkTransactionId</con:element><con:type xsi:nil="true"/><con:operator>!=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${POST sale series for budget plan-2nd payment#Response#$['expressNetworkTransactionId']}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]</con:xpath><con:element>fraudResponse</con:element><con:type xsi:nil="true"/><con:operator>exists</con:operator><con:enabled>true</con:enabled><con:expectedValue xsi:nil="true"/><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:fraudResponse[1]/@null</con:xpath><con:element>@null</con:element><con:type/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>true</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637';
//ns1:Response[1]/ns1:authCode[1]</con:xpath><con:element>authCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>15510A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<Response xmlns="http://d3-py-pay03.dev.medfusion.net/mfgateway-api/services/mfgateway/v4/sale/2560805637">
   <message>Approved</message>
   <responseTime>1585866079852</responseTime>
   <responseCode>000</responseCode>
   <threadId null="true"/>
   <orderId>ecada844-8e4d-40db-90f5-e</orderId>
   <externalTransactionId>44333071</externalTransactionId>
   <initialTransactionInSeries>false</initialTransactionInSeries>
   <expressNetworkTransactionId>000093804791386</expressNetworkTransactionId>
   <fraudResponse null="true"/>
   <authCode>15510A</authCode>
</Response>]]></con:originalMessage></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d5c54e2e-71ee-4502-a662-9f7c026ffee8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a61abc31-1b1a-4628-8605-f824879bc169</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b00714c7-f9f9-4969-aa0d-0fda589723e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8bf6996f-9dc4-4de4-be99-7a51870ede5c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48aeb5db-4f50-4fa5-8efd-83a399355c75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>59be85c8-01b3-44f1-8780-530bae265d82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537e404-76ee-47a1-8145-16cd43ff5428</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf7b36e0-0ae7-482a-8831-ae6815d99b44</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>855e8e94-deec-4cfa-adcb-dad05d549d84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62baae7c-026a-475a-a7ff-5279dab5752e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54ceb6d2-9fbe-409f-8616-ccca69dd3d3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a402829-b64f-46e8-9ca8-153f7e1d39ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd1721c5-9fcb-464f-83f7-5315fabec38e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1e0baac8-3a14-4af1-9244-f9330ad70eb4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30fa2db2-0076-48de-b910-b95af5e74719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f902d976-8d1d-4515-ba32-6ad55e39f19b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5f5268c-e618-43bb-a316-c238f97d9281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13e74273-7051-4664-95e1-4e5e0762b4b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8476c6b-4261-4593-bdf4-1b00fbc63db0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61618669-442c-45df-8152-34a8de5231e0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ba62eb2-c4ed-4c4d-806f-3f17b7411e95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd5a1bc6-3bf1-4b41-ac69-26d81b2b9995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de8d1c3a-7ac2-40c0-804d-e3efe8be1860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5890964c-a86d-4d2e-8e36-39e101dd113f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e492ed3b-74ba-41eb-8d84-7d13de81b840</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>304c8d37-d867-4867-b95d-97884ece6b2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3861431c-06a0-4a8b-87d2-73e7e3e029cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f7369f82-bcf3-4e20-9e3e-147b27981651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94a42d34-e944-4330-92af-9c5f58f7c482</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ea7dff6-bc6f-4851-8449-439a46dcfe14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d67d5bf5-1a9e-404c-947f-1de8523c16dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d196dc48-e107-409e-ae08-571dd84b84ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9df84187-0e01-4cfc-bb5d-5a1971f05bcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad6e7be-859a-436e-b76b-ecf5ac332836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d25d1686-4b7d-4caf-8cae-05df7e4df210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bcd8c55f-0234-4f67-aa01-7b8332f3f368</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35f3e719-7935-41af-bbfb-065e0d854d88</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35846ab0-c797-4c51-9709-47333fcf1c35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d71e830-f4e5-4e35-b371-a12299e19cf4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5baeafbf-734c-430c-b0ac-73aa5432af9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50786732-e251-4f19-bbdf-fa29599b709b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa4001c4-2027-4490-9dc2-a68afacad511</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8c5c650-74a6-42b0-a0a0-c0760a12664f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2ea3361-6808-4a10-bfdb-d2907d8c8c41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa40f52e-3f78-48fe-82f4-44e7ac098ce9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="b9ce34ae-e73c-41a2-b587-bbf5a86f0ee1" name="Old Merchant provisioning endpoints"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="8e38ef0b-a536-4d34-8f19-c2aff2b1ef66" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Old merchant provisioning tests" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="httprequest" name="POST create merchant" id="ba10b0fb-039c-4640-86ac-887771bf5f02"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="POST create merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT Update merchant" id="5036e228-0cad-4231-8e22-9110ddb60adc"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT Update merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/${POST create merchant#Response#$['id']}</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Updated merchant name test 123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": "",
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": {
    	"address1":"remit address#233",
    	"address2":"address2",
    	"city":"Salem",
    	"state":"NC",
    	"zip":"34444"
    	},
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": 3446667676,
    "customerServicePhoneNumber": 3444334343,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"124444346",
  "accountNumber":"4344421",
  "federalTaxId":"123456789",
   "elementAccountId" : "143444",
      "elementAcceptorId" : "344344344",
      "elementTerminalId" : "235235g45",
      "elementAccountToken" : "245kj243jk524k5jk2454225",
      "vantivIbmMid" : "3434343434545",
      "routingNumber" : "12444434",
      "accountNumber" : "4344421",
      "accountType" : "C",
      "amexSid" : "42534546",
      "vantivLitleIbfMid" : "034878444356",
      "vantivLitlePbfMid" : "02495445",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "123456789"
     

 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"8021",
  "avgTicketPrice":"1000000",
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "1234567890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "4554554545",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@gmail.com",
  "principlePhoneNumber":"5555555555",
  "principleDateOfBirth":"04/05/1969",
 "principleAddress":{
 	"address1":"#788, Weston parkway",
 	"address2":"some landmark",
 	"city":"Orlando",
 	"state":"FL",
 	"zip":"34555"
 	}
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get merchant" id="361e5560-a004-4e7a-a5d9-9b894ad380ae"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchants/${POST create merchant#Response#$['id']}</con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f903419-e2cc-4c37-bc35-4a97f01ebad8" name="Match content of [id]"><con:configuration><path>$['id']</path><content>${POST create merchant#Response#$['id']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="POST add beneficial owners" id="f1bc3a96-db8e-4432-940d-41ee32912a5b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="POST add beneficial owners" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchant/${POST create merchant#Response#$['id']}/beneficialowner</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get beneficial owners for this merchant" id="1b7c2210-d1b2-4cdd-9393-543ea45563ec"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get beneficial owners for this merchant" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v8/application/rcm/merchant/${POST create merchant#Response#$['id']}/beneficialowner</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get account details" id="4654b85a-7dfc-4563-8368-b6a5a4c420b2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get account details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218 </con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT account details" id="82d7866f-0cf0-4d89-a8a7-aa8d87001618"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT account details" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218</con:endpoint><con:request>{
   "id" : 2560791218,
   "merchantName" : "Jakubs merchant 20624 2",
   "merchantLegalName" : "Legal name WWw",
   "doingBusinessAs" : "jakubs",
   "externalMerchantId" : 20624,
   "merchantAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074wewew",
      "country" : "US"
   },
   "remitToAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074",
      "country" : "US",
      "merchantName" : "Test"
   },
  
   "oauthToken" : null,
   "acceptedCreditCards" : [
      "AMEX",
      "DISCV",
      "MCARD",
      "VISA"
   ],
   "phoneNumber" : "1234567891",
   "customerServicePhoneNumber" : "1234567891",
   "maxTransactionLimit" : 59996,
   "accountDetails" : {
      "elementAccountId" : "1011643",
      "elementAcceptorId" : "874767013",
      "elementTerminalId" : "0060810007",
      "elementAccountToken" : "5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001",
      "vantivIbmMid" : "4445018686923",
      "routingNumber" : "545455112",
      "accountNumber" : "5156161",
      "accountType" : "C",
      "amexSid" : "555",
      "vantivLitleIbfMid" : "0123456",
      "vantivLitlePbfMid" : "01234566",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "200000000",
      "paypalCardNotPresentUsername" : null,
      "paypalCardNotPresentPassword" : "",
      "paypalCardPresentUsername" : null,
      "paypalCardPresentPassword" : "",
      "paypalPartner" : null,
      "qbmsMerchantTicket" : null,
      "qbmsBatchCloseTime" : null,
      "qbmsBatchCloseTimeOfDay" : null,
      "qbpayRealmId" : null,
      "qbpayRefreshToken" : null,
      "qbpayRefreshTokenExpiry" : null
   },
   "contractedRates" : {
      "perTransAuthFee" : 4,
      "perTransRefundFee" : 3,
      "qualifiedUpperBoundaryPercent" : 0.5,
      "qualifiedFeePercent" : 7.155,
      "midQualifiedUpperBoundaryPercent" : 2.0,
      "midQualifiedFeePercent" : 11.555,
      "nonQualifiedUpperBoundaryPercent" : 3.0,
      "nonQualifiedFeePercent" : 22.555,
      "amexPercent" : 5.0,
      "suppressFeeSettlement" : false
   },
   "status" : "ACTIVE",
   "vantivBoardingData" : {
      "merchantStatus" : "OPEN",
      "sicMccCode" : "8041",
      "avgTicketPrice" : 1900,
      "swipePercent" : null,
      "voucherFlag" : "MAG_STRIPE"
   },
   "fraudVars" : {
      "duplicateDollarTxCount" : 0,
      "duplicateDollarTxAmount" : 0,
      "excessiveVolumeIncreasePercent1vs90" : 100.0,
      "excessiveVolumeIncreaseAmount1vs90" : 0,
      "excessiveVolumeIncreasePercent1vs30" : 100.0,
      "excessiveVolumeIncreaseAmount1vs30" : 0,
      "excessiveVolumeIncreasePercent1vs7" : 100.0,
      "excessiveVolumeIncreaseAmount1vs7" : 0,
      "excessiveVolumeIncreasePercent7vs90" : 100.0,
      "excessiveVolumeIncreaseAmount7vs90" : 0,
      "dailyUnmatchedCreditsCount" : 0,
      "dailyUnmatchedCreditsAmount" : 0,
      "sameCardTxCount" : 0,
      "sameCardTxAmount" : 0,
      "totalDailyForeignCardCount" : 0,
      "totalDailyForeignCardTxAmount" : 0,
      "txLimitToAlert" : 0,
      "singleForcedTxAmount" : 0,
      "aggregateForcedTxAmount" : 0,
      "staleTxDays" : 0
   },
   "deactivatedDate" : null,
   "customerAccountNumber" : "",
   "alsoKnownAsName" : "",
   "primaryContactName" : "twst",
   "primaryContactEmail" : "test@gmail.com",
   "primaryContactPhoneNumber" : "3878377373",
   "legalEntityAddress" : {
      "address1" : null,
      "address2" : null,
      "city" : null,
      "state" : null,
      "zip" : null,
      "country" : "US"
   },
   "legalEntityPhoneNumber" : "",
   "principleDetails" : {
      "principleName" : "",
      "principleTitle" : "",
      "principleSocialSecurityNumber" : "",
      "principleDateOfBirth" : "",
      "principleEmail" : "",
      "principlePhoneNumber" : "",
      "principleAddress" : {
         "address1" : null,
         "address2" : null,
         "city" : null,
         "state" : null,
         "zip" : null,
         "country" : "US"
      }
   }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="send mbf" id="4cdd0bd8-ec9d-4979-a992-7658fea6b36b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="send mbf" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net:8080/provisioning/services/v2/application/rcm/merchants/2560805677/vantiv/mbf</con:endpoint><con:request>[
 {
  "firstName":"Oliver",
  "lastName":"Perkins",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"30 Chestnut St.",
  "addressLine2":"Winter Garden",
  "city":"Miami",
  "state":"FL",
  "zipCode":"34787",
  "phoneNumber":"9195661717",
  "ssn":"023348489",
  "percentOwned":"10",
  "dateOfBirth":"19901809",
  "email":"olive@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Elianna",
  "lastName":"Hunter",
  "middleInitial":"Q",
  "title":"Ms",
  "addressLine1":"66 Meadowbrook St",
  "addressLine2":"Suite #56",
  "city":"Danville",
  "state":"VA",
  "zipCode":"24540",
  "phoneNumber":"9194554883",
  "ssn":"489368350",
  "percentOwned":"60",
  "dateOfBirth":"20170809",
  "email":"elan@example.com",
  "contactType":"C"
 },

 {
  "firstName":"Jennifer",
  "lastName":"Gordon",
  "middleInitial":"Marian",
  "title":"Mrs",
  "addressLine1":"2501 SOUTH STATE HIGHWAY 121 BUSINESS",
  "addressLine2":"SUITE 1100",
  "city":"LEWISVILLE",
  "state":"TX",
  "zipCode":"75067",
  "phoneNumber":"9198991819",
  "ssn":"198292829",
  "percentOwned":"10",
  "dateOfBirth":"20170809",
  "email":"jennifer@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Steve",
  "lastName":"Rozario",
  "middleInitial":"J",
  "title":"Mr",
  "addressLine1":"41 Del Monte Lane",
  "addressLine2":"",
  "city":"Crofton",
  "state":"MD",
  "zipCode":"21114",
  "phoneNumber":"9194554883",
  "ssn":"989368350",
  "percentOwned":"12",
  "dateOfBirth":"19900809",
  "email":"steve23@example.com",
  "contactType":"S"
 },
 {
  "firstName":"Matt",
  "lastName":"Maher",
  "middleInitial":"B",
  "title":"Mr",
  "addressLine1":"657 Peg Shop Street",
  "addressLine2":"",
  "city":"Elizabethtown",
  "state":"PA",
  "zipCode":"17022",
  "phoneNumber":"9194554883",
  "ssn":"099388393",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"matt@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Greg",
  "lastName":"Meechum",
  "middleInitial":"T",
  "title":"Mr",
  "addressLine1":"123,Lofts highway",
  "addressLine2":"Suite #34",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"9881918194",
  "ssn":"489368350",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"greg@example.com",
  "contactType":"C"
 },
 {
  "firstName":"Brian",
  "lastName":"Rodrigues",
  "middleInitial":"",
  "title":"Mr",
  "addressLine1":"300,Lily Orchard drive",
  "addressLine2":"Near Apex community park",
  "city":"Apex",
  "state":"NC",
  "zipCode":"27539",
  "phoneNumber":"3773883738",
  "ssn":"177188178",
  "percentOwned":"14",
  "dateOfBirth":"19900809",
  "email":"brian@google.com",
  "contactType":"C"
 },
 {
  "firstName":"Nyle",
  "lastName":"Lazarus",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"1334,Glanton Valeey Park",
  "addressLine2":"Silicon valley",
  "city":"San Jose",
  "state":"CA",
  "zipCode":"34555",
  "phoneNumber":"3882993839",
  "ssn":"988399389",
  "percentOwned":"100",
  "dateOfBirth":"19900809",
  "email":"nyle@goodbye.com",
  "contactType":"C"
 },
 {
  "firstName":"Eric",
  "lastName":"Anderson",
  "middleInitial":"j",
  "title":"Mr",
  "addressLine1":"2344,North west village parkway",
  "addressLine2":"",
  "city":"Cary",
  "state":"NC",
  "zipCode":"27513",
  "phoneNumber":"3882772928",
  "ssn":"988299282",
  "percentOwned":"100",
  "dateOfBirth":"19780809",
  "email":"eric@goodbye.com",
  "contactType":"C"
 }
 ]</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdHVzZXJGaW5hbmNlMTpGczNKbjImTQ==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Get account details as implementation" id="517e5d88-382a-4d0f-b9e8-b1855f585398"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="Get account details as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218 </con:endpoint><con:request>
{
    "id": "",
    "merchantName": "Test123",
    "merchantLegalName": "LegalName",
    "doingBusinessAs": "somebody",
    "externalMerchantId": null,
    "merchantAddress": {
        "address1": "Hello",
        "address2": null,
        "city": "Cary",
        "state": "NC",
        "zip": "12345",
        "country": "US"
    },
    "remitToAddress": null,
    "statementOptions": {},
    "oauthToken": null,
    "acceptedCreditCards": [
        "VISA"
    ],
    "phoneNumber": null,
    "customerServicePhoneNumber": null,
    "maxTransactionLimit": 1000,
    "accountDetails": {
  "routingNumber":"12444434",
  "accountNumber":"4344421",
  "federalTaxId":"123456789"
 },
    "contractedRates": null,
    "status": "ACTIVE",
    "vantivBoardingData": {
  "merchantStatus":"OPEN",
  "sicMccCode":"SIC",
  "avgTicketPrice":1000000,
  "swipePercent":5,
  "voucherFlag":"MAIL_PHONE",
  "monthlyVolume":10000,
  "merchantClass":"10"
 },
    "fraudVars": {
        "duplicateDollarTxCount": 0,
        "duplicateDollarTxAmount": 0,
        "excessiveVolumeIncreasePercent1vs90": 100,
        "excessiveVolumeIncreaseAmount1vs90": 0,
        "excessiveVolumeIncreasePercent1vs30": 100,
        "excessiveVolumeIncreaseAmount1vs30": 0,
        "excessiveVolumeIncreasePercent1vs7": 100,
        "excessiveVolumeIncreaseAmount1vs7": 0,
        "excessiveVolumeIncreasePercent7vs90": 100,
        "excessiveVolumeIncreaseAmount7vs90": 0,
        "dailyUnmatchedCreditsCount": 0,
        "dailyUnmatchedCreditsAmount": 0,
        "sameCardTxCount": 0,
        "sameCardTxAmount": 0,
        "totalDailyForeignCardCount": 0,
        "totalDailyForeignCardTxAmount": 0,
        "txLimitToAlert": 0,
        "singleForcedTxAmount": 0,
        "aggregateForcedTxAmount": 0,
        "staleTxDays": 0
    },
    "deactivatedDate": null,
    "customerAccountNumber": 435345,
    "alsoKnownAsName": "dunno",
    "primaryContactName": "PrimayContact",
    "primaryContactEmail": "primary@gmail.com",
    "primaryContactPhoneNumber": "123-456-7890",
    "legalEntityAddress": {
    	"address1":"#444, Luminous drive",
    	"address2":"",
    	"city":"cary",
    	"state":"NC",
    	"zip":"34444"
    	},
    "legalEntityPhoneNumber": "",
    "principleDetails": {
  "principleName":"Principle Name",
  "principleTitle":"Title",
  "principleSocialSecurityNumber":"019918189",
  "principleEmail":"Principle@email.com",
  "principlePhoneNumber":"555-555-555"
 }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="PUT account details as implementation" id="4f7d3234-ed29-44e6-aeeb-a8f6587f2916"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" id="730a2226-aeb5-4b2b-8c35-224096f74cd7" name="PUT account details as implementation" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://d3-py-pay01.dev.medfusion.net/provisioning-api/services/v7/application/1/merchants/2560791218</con:endpoint><con:request>{
   "id" : 2560791218,
   "merchantName" : "Jakubs merchant 20624 2",
   "merchantLegalName" : "Legal name WWw",
   "doingBusinessAs" : "jakubs",
   "externalMerchantId" : 20624,
   "merchantAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074wewew",
      "country" : "US"
   },
   "remitToAddress" : {
      "address1" : "address1",
      "address2" : "address2",
      "city" : "city",
      "state" : "NC",
      "zip" : "276074",
      "country" : "US",
      "merchantName" : "Test"
   },
  
   "oauthToken" : null,
   "acceptedCreditCards" : [
      "AMEX",
      "DISCV",
      "MCARD",
      "VISA"
   ],
   "phoneNumber" : "1234567891",
   "customerServicePhoneNumber" : "1234567891",
   "maxTransactionLimit" : 59996,
   "accountDetails" : {
      "elementAccountId" : "1011643",
      "elementAcceptorId" : "874767013",
      "elementTerminalId" : "0060810007",
      "elementAccountToken" : "5A4630F7870E4EF628A100E7C88CFA6BB0125C18348D32EC6BA75DA4D727DDC57E680001",
      "vantivIbmMid" : "",
      "routingNumber" : "",
      "accountNumber" : "***6161",
      "accountType" : "",
      "amexSid" : "555",
      "vantivLitleIbfMid" : "",
      "vantivLitlePbfMid" : "",
      "preferredProcessor" : "ELEMENT",
      "federalTaxId" : "200000000",
      "paypalCardNotPresentUsername" : null,
      "paypalCardNotPresentPassword" : "",
      "paypalCardPresentUsername" : null,
      "paypalCardPresentPassword" : "",
      "paypalPartner" : null,
      "qbmsMerchantTicket" : null,
      "qbmsBatchCloseTime" : null,
      "qbmsBatchCloseTimeOfDay" : null,
      "qbpayRealmId" : "3498394",
      "qbpayRefreshToken" : "23948043",
      "qbpayRefreshTokenExpiry" : null
   },
   "contractedRates" : {
      "perTransAuthFee" : 4,
      "perTransRefundFee" : 3,
      "qualifiedUpperBoundaryPercent" : null,
      "qualifiedFeePercent" : 7.155,
      "midQualifiedUpperBoundaryPercent" : null,
      "midQualifiedFeePercent" : 11.555,
      "nonQualifiedUpperBoundaryPercent" : null,
      "nonQualifiedFeePercent" : 22.555,
      "amexPercent" : 5.0,
      "suppressFeeSettlement" : false
   },
   "status" : "ACTIVE",
   "vantivBoardingData" : {
      "merchantStatus" : "OPEN",
      "sicMccCode" : "8041",
      "avgTicketPrice" : 1900,
      "swipePercent" : null,
      "voucherFlag" : "MAG_STRIPE"
   },
   "fraudVars" : {
      "duplicateDollarTxCount" : 0,
      "duplicateDollarTxAmount" : 0,
      "excessiveVolumeIncreasePercent1vs90" : 100.0,
      "excessiveVolumeIncreaseAmount1vs90" : 0,
      "excessiveVolumeIncreasePercent1vs30" : 100.0,
      "excessiveVolumeIncreaseAmount1vs30" : 0,
      "excessiveVolumeIncreasePercent1vs7" : 100.0,
      "excessiveVolumeIncreaseAmount1vs7" : 0,
      "excessiveVolumeIncreasePercent7vs90" : 100.0,
      "excessiveVolumeIncreaseAmount7vs90" : 0,
      "dailyUnmatchedCreditsCount" : 0,
      "dailyUnmatchedCreditsAmount" : 0,
      "sameCardTxCount" : 0,
      "sameCardTxAmount" : 0,
      "totalDailyForeignCardCount" : 0,
      "totalDailyForeignCardTxAmount" : 0,
      "txLimitToAlert" : 0,
      "singleForcedTxAmount" : 0,
      "aggregateForcedTxAmount" : 0,
      "staleTxDays" : 0
   },
   "deactivatedDate" : null,
   "customerAccountNumber" : "",
   "alsoKnownAsName" : "",
   "primaryContactName" : "twst",
   "primaryContactEmail" : "test@gmail.com",
   "primaryContactPhoneNumber" : "3878377373",
   "legalEntityAddress" : {
      "address1" : null,
      "address2" : null,
      "city" : null,
      "state" : null,
      "zip" : null,
      "country" : "US"
   },
   "legalEntityPhoneNumber" : "",
   "principleDetails" : {
      "principleName" : "",
      "principleTitle" : "",
      "principleSocialSecurityNumber" : null,
      "principleDateOfBirth" : "",
      "principleEmail" : "",
      "principlePhoneNumber" : "",
      "principleAddress" : null
   }
}</con:request><con:assertion type="Valid HTTP Status Codes" id="1caa8af7-c439-4aed-a92e-08cad16d82d2" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="99719208-bc50-4471-bca6-37885110b091" name="Check for existence of [id]"><con:configuration><path>$['id']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:value><con:style>HEADER</con:style><con:default>Basic dGVzdEltcGxlbWVudGF0aW9uMTpuRzk7JihMJjM5bWo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>6848a849-0135-4043-81f6-b30a2688b76c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:authRepository/><con:tags/></con:soapui-project>