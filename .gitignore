*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
target/
*.keystore
response.xml

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# CDT-specific
.cproject

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse
IHGWSDKTest/.gitignore
community-automation/.gitignore
ehcore-api-automation/.gitignore
integration-platform-acceptance/.gitignore
integration-support-team-automation/.gitignore
mobile-automation/.gitignore
mu2-api-automation/.gitignore
patient-portal-automation/.gitignore
phr-portal-automation/.gitignore
practice-portal-automation/.gitignore
qa-automation-utils/.gitignore
service-mediator-automation/.gitignore
sitegen-automation/.gitignore

# Eclipse specific
*.classpath
*.project

# test failure output folder
*/trust/*

*/test-output/

# Idea Files
.idea/
*.iml
forms-automation/FormExportImport.txt
forms-automation/true/
/.recommenders/

# Local .terraform directories
**/.terraform/*

#Local .terraform.lock.hcl
.terraform.lock.hcl

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
*plan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
